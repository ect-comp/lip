---
title: "Matrizes"
title-slide-attributes:
  data-background-image: ../../assets/img/brasao_ufrn_positivo.png
  data-background-size: "50%, auto, contain"
  data-background-opacity: "0.05"
---

## Nas Aulas Anteriores

- Vetores
- Funções com vetores
---

## Objetivo da Aula

Introduzir o uso de matrizes:

- Representação em memória
- Declaração de matrizes
- Inicialização de matrizes
- Exercícios
---

## Motivação
#### Exercício

Implemente um programa que leia dois números inteiros
`M` e `N` e em seguida, leia as `N` notas
de `M` turmas. O programa deve apresentar todas as
turmas onde encontra-se a maior nota.

Temos o que é necessário para implementar uma solução para este problema?
---

## Matriz

- Armazena dados em formato de tabela
- Estrutura bidimensional:
    - `nl` linhas
    - `nc` colunas
    - `nl` x `nc` elementos (de um mesmo tipo)
---

## Matriz

Além das matrizes conhecidas da matemática, matrizes em C++ podem armazenar outros tipos de dados:

- Notas de alunos por sala
- Distâncias entre cidades
- Relações entre pessoas
- Etc.
---

## Declarando uma Matriz
#### Sintaxe

```C++
tipo_da_matriz nome_da_matriz[n_linhas][n_colunas];
```

- `tipo_da_matriz` são os tipos de variáveis conhecidos:
  `int, char, float, bool`.
- `nome_da_matriz` segue as mesmas regras que usamos para variáveis
- `n_linhas` é uma expressão para o número de linhas da matriz
  cujo tipo deve ser `int`
- `n_colunas` é uma expressão para o número de colunas da matriz
  cujo tipo deve ser `int`
---

## Declarando uma Matriz
#### Exercício

Escrever declaração de matriz:

1. Do tipo real e tamanho `2` x `2`, chamada `A`
2. Do tipo caractere e tamanho `10` x `10`, chamada `img`
3. Do tipo inteiro e tamanho `nl` x `nc`, chamada `mat`
---

## Declarando uma Matriz
#### Exercício: Solução

```C++
1. float A[2][2];
2. char img[10][10];
3. int mat[nl][nc];
```
---

## Matriz {.nostretch}
#### Representação em Memória

![](img/matriz_posicoes2.png){width=65% fig-align="center"}

---

## Posições de uma Matriz
#### Acesso a Elementos de Matrizes

- Uma matriz com `nl` linhas e `nc` colunas:
    - Tem índices de linhas válidos que vão de `0` até `nl-1`
    - Tem índices de colunas válidos que vão de `0` até `nc-1`
- Uma matriz `m` não pode ser usada diretamente em expressões
- Cada elemento `m[0][0],m[0][1]`, ..., `m[nl-1][nc-1]` é que deve ser usado
---

## Posições de uma Matriz
#### Acesso a Elementos de Matrizes

Para acessar cada elemento da matriz `m`:

- O primeiro índice acessa a linha da matriz
- O segundo índice acessa a coluna da matriz
- Exemplo: `m[2][0]` acessa a terceira linha e primeira coluna
---

## Posições de uma Matriz
#### Exercício

:::: {.columns}

::: {.column width="50%"}

![](img/matriz_exemplo.png){width=75% fig-align="center"}

:::

::: {.column width="50%"}

::: {style="font-size: 0.65em"}
Qual o valor de cada expressão a seguir, sendo `x = 1`?

- `m[0][0] + m[0][1]`
- `m[0][3*x-1]`
- `m[m[2][1]][x+1]`
- `m[0][-1]`
- `m[3][3]`
- `m[3][1000]`
:::

:::

::::

---

## Posições de uma Matriz
#### Percorrendo uma Matriz

Para acessar cada elemento de uma matriz de forma automática, é necessário
iterar todas as colunas de todas as linhas da matriz. Ou seja:

- Um `for` para variar o índice da linha
- Um `for` para variar o índice da coluna
- Os laços devem estar aninhados
- A ordem dos laços pode ou não influenciar no resultado, dependendo do
  uso final do laço no algoritmo
---

## Posições de uma Matriz
#### Exercício: Leitura de Dados

Implemente um programa que leia do usuário as dimensões de uma matriz
de inteiros e que leia também cada um de seus elementos.

Imprima a matriz no formato adequado na tela.
---

## Posições de uma Matriz
#### Exercício: Solução

```C++
int main(){
    int nl, nc;
    cin >> nl >> nc;
    int m[nl][nc], i, j;
    for(i = 0; i < nl; i++){
        for(j = 0; j < nc; j++){
            cin >> m[i][j];
        }
    }

    for(i = 0; i < nl; i++){
        for(j = 0; j < nc; j++){
            cout << m[i][j] << " ";
        }
        cout << endl;
    }
}
```
---

## Lista de Presença

![](https://chart.apis.google.com/chart?cht=qr&chs=300x300&chld=L%7C1&chl=http%3A%2F%2Fbit.ly%2Flip_20230523){fig-align="center"}

<a href="https://bit.ly/lip_20230523"><p style="text-align:center;">https://bit.ly/lip_20230523</p></a>

---

## Posições de uma Matriz
#### Exercício: Impressão de Dados

O que faz o seguinte programa?

```C++
int main(){
    int m[3][4], i, j;
    for(i = 0; i < 3; i++){
        for(j = 0; j < 4; j++){
            m[i][j] = 4*i+j+1;
        }
    }
    for(i = 0; i < 3; i++){
        for(j = 0; j < 4; j++){
            cout << m[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}
```
---

## Inicialização de Matrizes

Forma 1:

```C++
int m[3][4] = { {1,2,3,4},
                {5,6,7,8},
                {9,10,11,12} };
```

Forma 2:

```C++
int m[][4] = { {1,2,3,4},
               {5,6,7,8},
               {9,10,11,12} };
```

---

## Inicialização de Matrizes

Forma 3:

```C++
int m[3][4] = {1,2,3,4,
               5,6,7,8,
               9,10,11,12};
```

Forma 4:

```C++
int m[][4] = {1,2,3,4,
              5,6,7,8,
              9,10,11,12};
```

---

## Motivação

Voltando ao exercício inicial:

Implemente um programa que leia dois números inteiros
`M` e `N` e em seguida, leia as `N` notas
de `M` turmas. O programa deve apresentar todas as
turmas onde encontra-se a maior nota.

Como implementá-lo?
---

## Exercício Inicial
#### Solução

```C++
int main(){
    int M, N, i, j, lm, cm;
    cout << "Informe a quantidade de turmas:\n";
    cin >> M;
    cout << "Informe a quantidade de alunos:\n";
    cin >> N;
    float notas[M][N], maior;
    cout << "Informe as notas:\n";
    for(i = 0; i < M; i++){
        for(j = 0; j < N; j++){
            cin >> notas[i][j];
        }
    }
    maior = notas[0][0];
    lm = 0;
    cm = 0;
    for(i = 0; i < M; i++){
        for(j = 0; j < N; j++){
            if(notas[i][j] > maior){
                maior = notas[i][j];
                lm = i;
                cm = j;
            }
        }
    }
    for(i = 0; i < M; i++){
        for(j = 0; j < N; j++){
            if(notas[i][j] == maior){
                cout << "Turma " << i
                     << " tem a maior nota\n";
            }
        }
    }
    return 0;
}
```
---

## Matrizes com mais de 2 Dimensões

- C++ permite o uso de matrizes com mais do que 2 dimensões
- Por exemplo:
    - `int mat[3][3][3];`
- Número máximo de dimensões depende do compilador
---

## Exercícios

1. Armazenar em uma matriz `3` x `3` os 9 primeiros números pares e
   em seguida, exibir a matriz.
2. Ler do usuário um número `n` e em seguida,
   armazenar em uma matriz de números inteiros a matriz
   identidade de tamanho `n` x `n`.
   Exiba também a matriz na tela.
---

## Exercícios

3. Ler do usuário os elementos de uma matriz de números inteiros
   com tamanho `3` x `3` e em seguida, exibir na tela
   a soma dos elementos da diagonal principal
4. Ler do usuário um número `n` e em seguida,
   armazenar os elementos de uma matriz de números inteiros
   de tamanho `n` x `n`.
   Em seguida, exibir na tela a soma dos elementos da diagonal secundária
---

## Sumário

Na aula de hoje: matrizes

- Sintaxe de declaração
- Acesso às posições
- Inicialização
- Exercícios