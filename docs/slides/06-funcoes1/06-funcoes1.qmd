---
title: "Funções I"
title-slide-attributes:
  data-background-image: ../../assets/img/brasao_ufrn_positivo.png
  data-background-size: "50%, auto, contain"
  data-background-opacity: "0.05"
---

## Objetivo da Aula
- Motivar o uso de funções
- Apresentar as construções oferecidas em C++ para a implementação de programas
  com funções
---

## Função
- Variáveis guardam valores de diferentes tipos
    - `char`, `int`, `float`, `bool`
- E se pudéssemos atribuir não um valor, mas sim, _um trecho de código a um nome_,
  similar a uma variável?
- Isto é exatamente o que acontece com funções em linguagens de programação
---

## Função
- Função: conjunto de comandos (trecho de código) que realizam
  uma tarefa em particular
- Também chamada de subprograma
- Cada função recebe um nome e através deste, pode ser executada
- Uso de funções organiza, simplifica e reduz programas
---

## Função
Exemplos de funções conhecidas:

1. `sqrt`
2. `pow`
3. `sin`
4. `cos`
5. `tan`
6. `rand`
---

## Chamadas de Funções - Exemplo 1
O que faz o seguinte programa?

```C++
int main(){
    int x, r;
    cin >> x;
    r = sqrt(x);
    cout << x << ", " << r << endl;
    return 0;
}
```
---

## Chamadas de Funções - Exemplo 2
O que faz o seguinte programa?

```C++
int main(){
    float x, y;
    cin >> x >> y;
    cout << sin(x)/cos(y) << endl; 
    return 0;
}
```
---

## Programas que Chamam Funções
- Vocês já utilizaram funções em vários programas:
    - Você como programador foi _usuário de funções_
    - O seu programa (_programa usuário_) continha _chamadas_ de funções
    - As funções que você usou foram implementadas por
      outro programador
---

## Programas que Chamam Funções
A chamada de uma função funciona exatamente como uma variável:

- Resulta em um valor que pode ser usado em expressões
---

## Programas que Chamam Funções
- Principal vantagem de chamar funções:
  **não é necessário saber como uma função está implementada para utilizá-la**
- Exemplo: função `cos(x)` computa o cosseno de `x` com o polinômio
  de MacLaurin:

$$
cos(x) = \sum_{n=0}^{\infty}\frac{(-1)^{n}}{(2n)!}x^{2n}
$$
---

## Implementação de Funções
Linguagens de programação estruturadas oferecem
uma sintaxe para implementação de funções

Além da sintaxe, é preciso saber:

1. As entradas do subprograma (_parâmetros_ da função)
2. Como o subprograma deve operar (código da função)
3. O que o subprograma deve computar (saída da função)
---

## Implementação de Funções

::: {.callout-note appearance="simple"}

A implementação de uma função é dividida entre a sua _assinatura_
e as instruções que compõem a sua _definição_

:::

---

## Assinaturas de Funções
Sintaxe:

```
tipo_da_funcao nome_da_funcao(lista de parametros);
```

- Também chamadas de cabeçalhos ou protótipos da função
- Devem estar fora e antes do bloco `main`
---

## Assinaturas de Funções
Sintaxe:

```
tipo_da_funcao nome_da_funcao(lista de parametros);
```

- `tipo_da_funcao` é o tipo do valor computado pela função:
  `int, char, float, bool` ou o novo tipo `void`
---

## Assinaturas de Funções
Sintaxe:

```
tipo_da_funcao nome_da_funcao(lista de parametros);
```

- `nome_da_funcao` segue as mesmas regras que usamos para nomear variáveis
---

## Assinaturas de Funções
Sintaxe:

```
tipo_da_funcao nome_da_funcao(lista de parametros);
```

- _Parâmetros_ (ou argumentos) são variáveis das quais a
  função **depende** para computar o seu retorno
- A `lista de parametros` contém pares tipo/nome para cada
  parâmetro, sendo cada par separado por vírgula
---

## Assinaturas de Funções
#### Exercício

Escrever assinaturas para as funções abaixo:

1. `sqrt`: raíz quadrada de um número real
2. `pow`: eleva uma base a uma potência
3. `rand`: gera um número aleatório
4. Função que converte um número ASCII num caractere
5. Função que retorna verdadeiro caso o número seja primo e falso caso contrário
---

## Assinaturas de Funções
#### Exercício: solução
```
1. float sqrt(float x);
2. float pow(float b, float e);
3. int rand();
4. char converte_caractere(int cod);
5. bool eh_primo(int num);
```
---

## Assinaturas de Funções
A assinatura de uma função define uma relação entre
suas entradas e sua saída

- Nos parâmetros da função estão _as suas entradas_
- No tipo de retorno da função está _a sua saída_
---

## Assinaturas de Funções
Observe que:

- Algumas funções não têm entrada
- Algumas funções não retornam nada
- Algumas funções possuem mais de uma saída

Os dois últimos pontos acima serão vistos nas próximas
aulas

---

## Lista de Presença

![](bit.ly_lip_20241015.png){fig-align="center"}

<a href="https://bit.ly/lip_20241015"><p style="text-align:center;">https://bit.ly/lip_20241015</p></a>

---

## Definição de Funções
Sintaxe:

```
tipo_da_funcao nome_da_funcao(lista de parametros){
    corpo da funcao
}
```

- Uma função é definida quando programamos o seu comportamento com instruções válidas
- A definição de uma função deve vir após o bloco `main`
---

## Definição de Funções
Exemplo: programa que converte temperatura em graus Celsius para Fahrenheit, sabendo-se que

$$
f(c) = 1,8c + 32
$$

1. Sem usar função
2. Utilizando função
---

## Definição de Funções
Exemplo: função que converte temperatura em Celsius para Fahrenheit
```C++
float converte_temp(float c){
    return 1.8*c + 32;
}
```
---

## Definição de Funções
Exemplo: programa completo com função que converte temperatura em Celsius para Fahrenheit
```C++
float converte_temp(float c);
int main(){
    float tc;

    cout << "Insira a temperatura em Celsius:\n";
    cin >> tc;
    cout << "Temperatura em Fahrenheit: " << converte_temp(tc) << endl;
    return 0;
}
float converte_temp(float c){
    return 1.8*c + 32;
}
```
---

## Definição de Funções
- A lista de parâmetros define variáveis locais (existentes
  somente dentro da função)
- Qualquer instrução é permitida no corpo da função, inclusive
  chamadas a outras funções (ou a ela mesma)
---

## Definição de Funções
Comando `return`:

- Usado junto com qualquer expressão válida em C++
- Converte a expressão no tipo de retorno da função
- Encerra a função e retorna a execução
  do programa para a instrução seguinte
  à chamada a ela realizada 
---

## Definição de Funções
Variáveis locais de uma função:

- Variáveis que podem ser declaradas dentro da função
- Não são visíveis fora da função
- Variável local com mesmo nome de variável em outra
  função: não são as mesmas!
- Cada parâmetro da função também é uma variável local
---

## Definição de Funções
Exemplo anterior com variável local:
```C++
float converte_temp(float c){
    float f;
    f = 1.8*c + 32;
    return f;
}
```
---

## Função `main`
Motivo pelo qual todo programa deve conter
`int main()` e `return 0`:

::: {.callout-note appearance="simple"}

Todo programa em C++ deve obrigatoriamente
conter uma função chamada `main` que retorna
um número inteiro.
Assim, o sistema operacional (Windows, Linux, etc.)
sabe a função a ser chamada quando ele deseja executar
um programa.

:::

---

## Programa com Função
#### Exercício

Implemente uma função chamada `eh_primo`, que receba como parâmetro um número inteiro.
A função deve retornar verdadeiro caso o número seja primo ou falso
caso contrário.

A função `main` é dada e contém o código do _programa usuário_ da função
que você deve implementar (slide a seguir).
---

## Programa com Função
#### Exercício: programa usuário da Função

```C++
int main(){
    int num;
    cout << "Insira um numero inteiro:\n";
    cin >> num;

    if(eh_primo(num) == true){
        cout << num << " eh primo\n";
    }
    else{
        cout << num << " nao eh primo\n";
    }
    return 0;
}

```
---

## Programa com Função
#### Exercício: Solução

```C++
bool eh_primo(int x);
int main(){
    int num;
    cout << "Insira um numero inteiro:\n";
    cin >> num;

    if(eh_primo(num) == true){
        cout << num << " eh primo\n";
    }
    else{
        cout << num << " nao eh primo\n";
    }
    return 0;
}
bool eh_primo(int x){
    int i, cont = 0;

    for(i = 1; i <= x; i++){
        if(x % i == 0){
            cont++;
        }
    }
    return (cont == 2);
}
```
---

## Sumário
Na aula de hoje:

- Chamada de funções
- Assinatura de funções
- Definição de funções