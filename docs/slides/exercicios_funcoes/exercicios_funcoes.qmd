---
title: "Funções - Exercícios"
title-slide-attributes:
  data-background-image: ../../assets/img/brasao_ufrn_positivo.png
  data-background-size: "50%, auto, contain"
  data-background-opacity: "0.05"
---

## Funções I - Exercícios
#### Exercício 1: Função `pow`

Implemente uma função que opere de forma idêntica à função
`pow`: receba como parâmetros a base (nr. real) e expoente (nr. inteiro)
e retorne a potência resultante.

Implemente também a função `main`, que deve ler do usuário a base
e expoente exibir o resultado de uma chamada à função solicitada.

---

## Funções I - Exercícios
#### Exercício 1 - Solução

```C++
#include <iostream>

using namespace std;

int abs(int e);
float pow(float b, int e);

int main(){

    float x;
    int y;

    cout << "Insira a base e expoente: ";
    cin >> x >> y;

    cout << "Resultado: " << pow(x, y) << endl;

    return 0;
}

int abs(int e){
    if(e < 0){
        return -e;
    }
    else{
        return e;
    }
}

float pow(float b, int e){
    float r = 1;
    int i;

    for(i = 0; i < abs(e); i++){
        r = r*b;
    }

    if(e < 0){
        return 1/r;
    }
    else{
        return r;
    }
}
```
---

## Funções I - Exercícios
#### Exercício 2: Número Perfeito

Chama-se **número perfeito** um número que é igual à soma
dos seus divisores próprios (todos os divisores exceto ele mesmo).

Por exemplo, $6$ é um número perfeito, já que $6 = 1 + 2 + 3$.

---

## Funções I - Exercícios
#### Exercício 2: Número Perfeito

Implemente uma função que receba como parâmetro um número inteiro
e retorne verdadeiro se o número for perfeito ou falso caso contrário.

Implemente também a função `main`, que deve ler do usuário um número inteiro
e exibir uma mensagem de acordo com o resultado de uma chamada à função solicitada.

Exemplo:
```cpp
Entrada: 6
Saída: 6 e um numero perfeito
```

---

## Funções I - Exercícios
#### Exercício 2 - Solução

```C++
bool eh_perfeito(int x);
int main(){

    int num;

    cout << "Insira um numero inteiro:\n";
    cin >> num;

    if(eh_perfeito(num) == true){
        cout << num << " e um numero perfeito\n";
    }
    else{
        cout << num << " nao e um numero perfeito\n";
    }

    return 0;
}

bool eh_perfeito(int x){
    int i, soma = 0;

    for(i = 1; i < x; i++){
        if(x % i == 0){
            soma += i;
        }
    }

    if(soma == x){
        return true;
    }
    else{
        return false;
    }
}
```
---

## Lista de Presença

![](https://chart.apis.google.com/chart?cht=qr&chs=300x300&chld=L%7C1&chl=bit.ly%2Flip_20230912){fig-align="center"}

<a href="https://bit.ly/lip_20230912"><p style="text-align:center;">https://bit.ly/lip_20230912</p></a>

---

## Funções I - Exercícios
#### Exercício 3: Sequência de Fibonacci 

Implemente uma função que receba como parâmetro um número $n$
e retorne o n-ésimo termo da sequência de Fibonacci.
A sequência de Fibonacci tem o termo 0 e 1 iguais a
a 0 e 1 respectivamente, e todos os demais calculados como a
soma dos dois anteriores.

A função `main` deve ler do usuário um nr. inteiro `n` e
imprimir do termo 0 ao termo `n` da sequência de acordo
com chamadas à função solicitada.

---

## Funções I - Exercícios
#### Exercício 3 - Solução

```C++

#include <iostream>

using namespace std;

int fib(int n);

int main(){

    int i, x;

    cout << "Insira o ultimo indice dos termos: ";
    cin >> x;

    for(i = 0; i <= x; i++){
        cout << fib(i) << endl;
    }

    return 0;
}
int fib(int n){
    int i, an, an_1 = 1, an_2 = 0;

    if(n == 0){
        return 0;
    }
    if(n == 1){
        return 1;
    }
    for(i = 2; i <= n; i++){
        an = an_1 + an_2;
        an_2 = an_1;
        an_1 = an;
    }

    return an;
}
```