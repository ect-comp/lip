---
title: "Comandos de Repetição"
title-slide-attributes:
  data-background-image: ../../assets/img/brasao_ufrn_positivo.png
  data-background-size: "50%, auto, contain"
  data-background-opacity: "0.05"
---

## Linguagem de Programação
- Aula anterior:
    - Comandos de seleção
- Aula de hoje:
    - Comandos de repetição:
        - `for`
        - `while`
---

## Comandos de Repetição
- Essenciais para a automatização de tarefas repetitivas
- Repetem todos os comandos que estejam no seu corpo
- Também chamados de laços ou *loops*
---

## Comandos de Repetição
Dois tipos:

- Comando de repetição contado `for`: repete instruções
  por um determinado número de vezes
- Comando de repetição condicional `while`: repete instruções
  enquanto uma condição é verdadeira
---

## Comando `for`
Sintaxe:

```C++
for(inicializacao; condicao; incremento){
    comando1;
    ...
    comandoN;
}
```
---

## Comando `for`
- Itera sobre uma variável, chamada de contador, variável de iteração ou variável de controle
- Esta variável tem o seu valor alterado conforme o programador deseja
- Isto faz o laço **executar várias iterações**
---

## Comando `for`
Dividido em três expressões opcionais:

- Inicialização: executada somente na primeira vez
  em que o `for` é executado
- Condição: avaliada no início de cada iteração
- Incremento: executado no final de cada iteração
---

## Comando `for`
Ordem de execução:

1. A expressão de inicialização é executada
2. A expressão de condição é avaliada:
    - Caso seja verdadeira: o bloco de comandos é executado
    - Caso seja falsa: o laço é encerrado
3. A expressão de incremento é executada e volta para o passo 2
---

## Comando  `for`
#### Exemplo
```C++
int main(){
    int i, n;
    cin >> n;
    for(i = 0; i < n; i++){
        cout << "i: " << i << endl;
    }
    return 0;
}
```
O que imprime este programa?
---

## Comando `for`
#### Usos Equivalentes do `for`
- Diferentes `for` podem ser usados se estivermos preocupados
com a quantidade de execuções de um bloco de comandos
- O que não é o caso se desejarmos que a variável de iteração
assuma uma sequência de valores específicos
---

## Comando `for`
#### Exercício 1
Implemente um programa que lê um número `n` e em seguida,
lê as notas de  `n` alunos. O programa deve exibir a média das notas
na tela.

Antes de programar: o que deve ser repetido?
---

## Comando `for`
#### Exercício 1: Solução
```C++
int main(){
    int i, n;
    float nota, media = 0;
    cout << "Insira a quantidade de notas\n";
    cin >> n;
    for(i = 0; i < n; i++){
        cout << "Insira a nota do "
             << i+1 << "o. aluno" << endl;
        cin >> nota;
        media += nota;
    }
    media /= n;
    cout << "media dos alunos: " << media << endl;
    return 0;
}
```
---

## Comando `for`
#### Exemplos Atípicos
- Quantas vezes é executado o laço a seguir? `n` vezes?
```C++
for(i = 0; i <= n; i++){
    ...
}
```

- Quantas vezes é executado o laço a seguir?
```C++
for(i = n; i > 0; i++){
    ...
}
```
---

## Lista de Presença

![](bit.ly_lip_20241008.png){fig-align="center"}

<a href="https://bit.ly/lip_20241008"><p style="text-align:center;">https://bit.ly/lip_20241008</p></a>

---

## Comando `for`
#### Exercício 2
Implemente um programa que lê um número `n` e em seguida,
imprime os `n` primeiros números pares na tela. Considere o número 0 como
o primeiro par.
---

## Comando `for`
#### Exercício 2: Solução
```C++
int main(){
    int i, n;
    cout << "Digite n\n";
    cin >> n;
    for(i = 0; i < 2*n; i += 2){
        cout << i << endl;
    }
    return 0;
}
```
Obviamente, há outras formas de se implementar este programa
---

## Comando `for`
#### Exercício 3
Implemente um programa que imprime na tela em forma de tabela
as seguintes contagens:

- De 1 a 100
- De 10 a 1000 (incrementando o contador de 10 em 10)
- De 100 a 1 (em ordem decrescente)
---

## Comando `for`

Saída esperada para o exercício 3:

| 1   | 10   | 100 |
|:----|------|----:|
| 2   | 20   | 99  |
| 3   | 30   | 98  |
| ... | ...  | ... |
| 100 | 1000 | 1   |
---

## Comando  `for`
#### Exercício 3: Solução
```C++
int main(){
    int i;
    for(i = 1; i <= 100; i++){
        cout << i << " "
             << 10*i << " "
             << 101-i << endl;
    }
    return 0;
}
```
É possível implementar o programa com o uso de
variáveis adicionais
---

## Comando `for`
#### Exercício 4
Implemente um programa que lê um número `n` e em seguida,
lê `n` caracteres.
O programa deve exibir a quantidade de caracteres digitados
que são letras minúsculas.
---

## Comando `for`
#### Exercício 4: Solução
```C++
int main(){
    char car;
    int n, cont = 0;
    cout << "Informe a quantidade de caracteres:\n";
    cin >> n;
    for(int i = 0; i < n; i++){
        cout << "Informe um caractere\n";
        cin >> car;
        if(car >= 'a' && car <= 'z'){
            cont++;
        }
    }
    cout << cont << " letras minusculas digitadas\n";
    return 0;
}
```
---

## Comando `for`
#### Exercício 5
Faça um programa que lê um número `n` e um número `m`.
Em seguida, o seu programa deve exibir na tela as `m` primeiras potências
positivas dos `n` primeiros números positivos. As potências devem estar separadas por linha.
---

## Comando `for`
Exemplo de execução:
```
Informe a quantidade de numeros
5
Informe a quantidade de potencias
4
Potencias:
1 1 1 1 
2 4 8 16 
3 9 27 81 
4 16 64 256 
5 25 125 625
```
---

## Comando `for`
#### Exercício 5: Solução
```C++
int main(){
    int i, j, n, m;
    cout << "Informe a quantidade de numeros\n";
    cin >> n;
    cout << "Informe a quantidade de potencias\n";
    cin >> m;
    for(i = 1; i <= n; i++){
        for(j = 1; j <= m; j++){
            cout << pow(i,j) << " "; 
        }
        cout << endl;
    }
    return 0;
}
```
---

## Comando `while`
Sintaxe:

```C++
while(condicao){
    comando1;
    ...
    comandoN;
}
```
---

## Comando `while`
- Executa enquanto a condição é verdadeira
- Condição é qualquer expressão e é obrigatória
  (é convertida implicitamente em expressão lógica)
- A condição é testada antes de cada iteração
---

## Comando `while`
Devemos nos certificar de dois itens para garantir o seu funcionamento de forma correta:

1. Que a condição tem a possibilidade de ser verdadeira ao ser testada pela primeira vez
2. Que a condição vai se tornar falsa, em algum momento
---

## Comando `while`
#### Exemplo
```C++
int main(){
    int i = 0, n;
    cin >> n;
    while(i < n){
        cout << "i: " << i << endl;
        i++;
    }
    return 0;
}
```
- Qual a saída deste programa?
- Como foram garantidos os dois itens necessários?
---

## Comandos de Repetição
#### Diferenças entre `while` e `for`
- O comando `while` é apropriado para repetição condicional
    - É possível utilizá-lo para repetição contada, embora
      isto seja mais propenso a erros
- O comando `for` é apropriado para repetição contada
    - É possível utilizá-lo para repetição condicional, embora
      o código resultante fique menos intuitivo
---

## Comandos de Repetição {.nostretch}

![](meme_while.png){width=40% fig-align="center"}

---

## Comando `while`
#### Exercício 6
Faça um programa que lê **vários** números e
informa se cada um deles é par ou ímpar. O programa deve se encerrar
quando for digitado um número negativo.
---

## Comando `while`
Antes de programar, precisamos identificar:

1. Variáveis do programa
2. Entrada e saída do programa
3. O que deve ser repetido
4. Expressão lógica para repetição
---

## Comando `while`
#### Exercício 6: Solução
```C++
int main(){
    int x;
    cout << "Informe um numero\n";
    cin >> x;
    while(x >= 0){
        if(x % 2 == 0){
            cout << x << " e um numero par\n";
        }
        else{
            cout << x << " e um numero impar\n";
        }
        cout << "Informe um numero\n";
        cin >> x;
    }
    return 0;
}
```
---

## Comando `do-while`
- A linguagem C++ oferece também o comando
  `do-while` (faça-enquanto)
- Sintaxe:

```C++
do{
    comando1;
    ...
    comandoN;
} while(condicao);
```
---

## Comando `do-while`
**Diferença para o `while`**: a condição é testada após a execução do corpo

- No comando `while`, o corpo pode não ser executado nenhuma vez
- No comando `do-while`, o corpo é executado pelo menos uma vez
---

## Comando `while` e `do-while`
#### Erros Comuns
- Não garantir que a condição pode ser verdadeira ao ser testada pela primeira vez (`while`)
- Não garantir que a condição vai se tornar falsa na lógica do algoritmo
- Inverter condição: a expressão lógica deve ter valor verdadeiro para que o laço execute
---

## Comandos `while` e `do-while`
#### Exercício 7
Implemente um programa com um menu de escolha, que deve
ler do usuário uma entrada denotando uma opção.
O programa deve imprimir:

-  "opcao1 escolhida" quando o usuário inserir `1`
-  "opcao2 escolhida" quando o usuário inserir `2`
-  "opcao3 escolhida" quando o usuário inserir `3`

Para cada escolha acima, o programa deve voltar ao menu inicial.
Caso o usuário insira `s`, o programa deve se encerrar.
---

## Comandos `while` e `do-while`
#### Exercício 7: Solução
```C++
int main(){
    char o;
    do{
        cout << "Insira uma opcao:\n";
        cout << "\t (1) opcao1\n";
        cout << "\t (2) opcao2\n";
        cout << "\t (3) opcao3\n";
        cout << "\t (s) air\n";
        cin >> o;
        if(o == '1'){
            cout << "opcao1 escolhida\n";
        }
        else if(o == '2'){
            cout << "opcao2 escolhida\n";
        }
        else if(o == '3'){
            cout << "opcao3 escolhida\n";
        }
        else if(o == 's'){
            cout << "Vc escolheu sair\n";
        }
    }while(o != 's');
    return 0;
```
---

## Comandos `break` e `continue`
- Comandos que podem ser utilizados
  dentro de `for`, `while` e `do-while`:
    - Comando `break`: utilizado para encerrar o laço em que o comando `break` se encontra
    - Comando `continue`: utilizado para ignorar a iteração atual do laço e forçar a próxima iteração
- No geral, há alternativas que tornam ambos os comandos opcionais
---

## Comando `break`
#### Menu com `break`
O comando `break` pode ser usado
em menus:

```C++
int main(){
    char c1;
    do{
        cout << "Insira uma opcao:\n";
        cout << "\t (1) opcao1\n";
        cout << "\t (2) opcao2\n";
        cout << "\t (3) opcao3\n";
        cout << "\t (s) air\n";
        cin >> c1;
        if(c1 == '1'){
            cout << "opcao1 escolhida\n";
        }
        else if(c1 == '2'){
            cout << "opcao2 escolhida\n";
        }
        else if(c1 == '3'){
            cout << "opcao3 escolhida\n";
        }
        else if(c1 == 's'){
            cout << "Vc escolheu sair\n";
            break;
        }
    }while(true);
    return 0;
}
```
---

## Comando `continue`
#### Exemplo de Uso
```C++
int main(){
    int n, i, s = 0;
    cout << "Informe um numero\n";
    cin >> n;
    for(i = 0; i < n; i++){
        if(i % 2 == 0){
            continue;
        }
        s += i;
    }
    cout << s << endl;
    return 0;
}
```
O que faz este programa?
---

## Comando `continue`
#### Programa equivalente sem `continue`
O mesmo programa pode ser implementado sem `continue`:

```C++
int main(){
    int n, i, s = 0;
    cout << "Informe um numero\n";
    cin >> n;
    for(i = 0; i < n; i++){
        if(i % 2 != 0){
            s += i;
        }
    }
    cout << s << endl;
    return 0;
}
```
---

## Comando `while` e `do-while`
#### Exercício 8
Implemente um programa que lê a população no ano corrente
de dois países, A e B. O país A tem taxa de crescimento de 2% ao ano, enquanto
o país B cresce 4% ao ano. Supondo que a população do país A é maior do que a do
país B, o seu programa deve informar em quantos anos a população do país B ultrapassará a população do país A.
---

## Comando `while` e `do-while`
#### Exercício 8: Solução
```C++
int main(){
    int anos = 0;
    int pop_a, pop_b;

    cout << "Insira as populacoes iniciais:\n";
    cin >> pop_a >> pop_b;

    while(pop_b <= pop_a){
        pop_a *= 1.02;
        pop_b *= 1.04;
        anos++;
    }
    cout << "A populacao do pais B ultrapassa
             a do pais A em "
         << anos << " anos.\n";
    
    return 0;
}
```
---

## Sumário
Na aula de hoje:

- Comando de repetição `for`
- Comando de repetição `while`
- Comandos `break` e `continue`
- Exercícios