---
title: "Funções III"
title-slide-attributes:
  data-background-image: ../../assets/img/brasao_ufrn_positivo.png
  data-background-size: "50%, auto, contain"
  data-background-opacity: "0.05"
---

## Linguagem de Programação
Aulas anteriores:

- Sintaxe em C++ para construção de funções (chamada, assinatura e definição)
- Função com tipo `void`
- Passagem de parâmetro por valor e por referência
---

## Objetivo da Aula
Explorar o conceito de entrada/saída nos parâmetros de funções
---

## Passagem de Parâmetros por Referência
- Uso de operador `&`
- Útil quando:
    - Uma função deve modificar os seus parâmetros
    - _Uma função deve retornar mais de um valor_
---

## Passagem de Parâmetros por Referência
Permite trabalhar com parâmetros:

- _De entrada_: parâmetros necessários para computar a função
- _De entrada e saída_: parâmetros necessários para computar a função e usados para armazenar os resultados da função
- _De saída_: parâmetros usados apenas para armazenar os resultados da função
---

## Passagem de Parâmetros por Referência
#### Exemplo com Parâmetro de Saída
- Parâmetro(s) pode(m) ser usado(s) para armazenar resultado(s) de uma função
- Exemplo: função que converte temperatura em graus Celsius para Fahrenheit,
  armazenando o resultado em um parâmetro de saída

```C++
void converte_temp(float c, float& f){
    f = 1.8*c + 32;
}
```
---

## Passagem de Parâmetros por Referência
#### Exemplo com Parâmetro de Saída
Chamada à função:

```C++
int main(){
    float ce, fa;
    cin >> ce;
    converte_temp(ce, fa);
    cout << "Temp. em Fahrenheit: " << fa << endl;
    return 0;
}
```
---

## Parâmetros de Funções
#### Exemplos

Quantos parâmetros de entrada, saída e entrada/saída?

1. Função que gera um número aleatório:
    - `int rand();`
2. Função que computa o produto entre dois números inteiros:
    - `int produto(int x, int y);`
    - `void produto(int x, int y, int& r);`
---

## Parâmetros de Funções
#### Exemplos

1. Função que gera um número aleatório:
    - `int rand();` $\rightarrow$ nenhum parâmetro
2. Função que computa o produto entre dois números inteiros:
    - `int produto(int x, int y);` $\rightarrow$ 2 parâmetros de entrada
    - `void produto(int x, int y, int& r);` $\rightarrow$ 2 parâmetros de entrada e 1 de saída
---

## Parâmetros de Funções
#### Exemplos

Quantos parâmetros de entrada, saída e entrada/saída?

3. Função que troca o valor de dois números inteiros:
    - `void troca(int& x, int& y);` 
4. Função que calcula o quociente e resto entre dois números inteiros:
    - `void quoc_resto(int& x, int& y);` 
    - `void quoc_resto(int x, int y, int& q, int& r);}` 
---

## Parâmetros de Funções
#### Exemplos

3. Função que troca o valor de dois números inteiros:
    - `void troca(int& x, int& y);` $\rightarrow$ 2 parâmetros de entrada e saída, ao mesmo tempo
4. Função que calcula o quociente e resto entre dois números inteiros:
    - `void quoc_resto(int& x, int& y);` $\rightarrow$ 2 parâmetros de entrada e saída, ao mesmo tempo
    - `void quoc_resto(int x, int y, int& q, int& r);}` $\rightarrow$ 2 entradas, 2 saídas
---

## Lista de Presença

![](bit.ly_lip_20250929.png){fig-align="center"}

<a href="https://bit.ly/lip_20250929"><p style="text-align:center;">https://bit.ly/lip_20250929</p></a>

---

## Funções com Múltiplas Saídas
- Funções com múltiplas saídas são em geral mais complexas
- Dica: dividir o problema
    - Identifique cada saída a ser computada pelo algoritmo
    - Verifique se é melhor implementar uma função auxiliar para calcular cada saída
    - Chame as funções auxiliares dentro da função solicitada
---

## Exercício 1
Implemente uma função que receba como parâmetros de entrada dois números inteiros $x$ e $y$.
A sua função deve armazenar em um primeiro parâmetro de saída o fatorial
de $x$, o fatorial de $y$ em um segundo parâmetro e $x^y$ em um terceiro.

A função `main` deve ler dois números inteiros entre 0 e 10 do usuário,
passá-los como parâmetro para a função implementada e exibir as três saídas
da função.

Não utilize a função `pow`.

---

## Exercício 1: Solução
```C++
int fatorial(int n);
int potencia(int b, int e);
void fat_pot(int x, int y, int& f1, int& f2, int& p);

int main(){
    int n1, n2, r1, r2, r3;
    cout << "Insira dois numeros:\n";
    cin >> n1 >> n2;
    fat_pot(n1, n2, r1, r2, r3);
    cout << "Fatorial1: " << r1 << endl;
    cout << "Fatorial2: " << r2 << endl;
    cout << "Potencia: " << r3 << endl;
    return 0;
}
int fatorial(int n){
    int i, r = 1;
    for(i = 1; i <= n; i++){
        r *= i;
    }
    return r;
}
int potencia(int b, int e){
    int i, r = 1;
    for(i = 1; i <= e; i++){
        r *= b;
    }
    return r;
}
void fat_pot(int x, int y, int& f1, int& f2, int& p){
    f1 = fatorial(x);
    f2 = fatorial(y);
    p = potencia(x, y);
}
```
---

## Exercício 2

Implemente uma função que receba como parâmetro de entrada um
número inteiro.
A função a ser implementada deve armazenar em
parâmetros de saída a quantidade de dígitos ímpares e a
quantidade de dígitos pares do número.

Implemente a função `main` para testar o seu programa.
---

## Exercício 2: Solução
```C++
void digitos_par_impar(int x, int &pares, int &impares);

int main(){
    int num, np, ni;
    cout << "Insira um nr. inteiro:\n";
    cin >> num;
    digitos_par_impar(num, np, ni);
    cout << "Digitos pares: " << np << endl;
    cout << "Digitos impares: " << ni << endl;
    return 0;
}
void digitos_par_impar(int x, int &pares, int &impares){
    int d;

    pares = 0;
    impares = 0;

    while(x > 0){
        d = x % 10;
        if(d % 2 == 0){
            pares++;
        }
        else{
            impares++;
        }
        x = x/10;
    }
}
```
---

## Sumário
Na aula de hoje:

- Parâmetros de entrada, saída e de entrada e saída
- Funções que chamam outras funções para simplificar a lógica de programas