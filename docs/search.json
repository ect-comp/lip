[
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação",
    "title": "Informações sobre a Disciplina",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nPerguntas pertinentes sobre Linguagem de Programação (LiP) na ECT:\n\nPor que é tão importante?\nQual a relação com o curso de Bacharelado em Ciências e Tecnologia e com as engenharias?"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-1",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-1",
    "title": "Informações sobre a Disciplina",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nO curso de Linguagem de Programação está relacionado com várias competências e habilidades desejáveis em profissionais da engenharia. Por exemplo:"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-2",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-2",
    "title": "Informações sobre a Disciplina",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nCapacidade de identificar, avaliar e resolver problemas, enfrentar desafios e responder a novas demandas da sociedade contemporânea\nCapacidade de comunicação e argumentação em suas múltiplas formas\nCapacidade de atuar em áreas de fronteira e interfaces de diferentes disciplinas e campos de saber"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-3",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-3",
    "title": "Informações sobre a Disciplina",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nAtitude investigativa, de prospecção, de permanente busca e produção do conhecimento\nAtitude ética nas esferas profissional, acadêmica e das relações interpessoais"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-4",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-4",
    "title": "Informações sobre a Disciplina",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\nFonte: Curso de Ciências e Tecnologia"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-5",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-5",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\nComo é possível ver, o curso de Linguagem de Programação (LiP) é bem completo quanto ao seu envolvimento com as competências e habilidades desejadas de um bacharel em CeT."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#apresentação",
    "href": "slides/01-intro/01-intro.html#apresentação",
    "title": "Informações sobre a Disciplina",
    "section": "Apresentação",
    "text": "Apresentação\n\nProf. Bruno Silva\nAtendimento:\n\nVia email: bruno.silva@ufrn.br\nVia Discord\n\nÁreas de interesse:\n\nProcessamento de imagens e visão computacional\nInteligência artificial e robótica"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sobre-a-disciplina",
    "href": "slides/01-intro/01-intro.html#sobre-a-disciplina",
    "title": "Informações sobre a Disciplina",
    "section": "Sobre a Disciplina",
    "text": "Sobre a Disciplina\n\nAulas teóricas: segundas, de 20:30 às 22:00, Auditório E da ECT\nCarga horária: 60 horas (30h de laboratório)\nMetodologia:\n\nAulas expositivas com slides digitais\nTópicos de aula seguidos por exercícios\nAtividades práticas em laboratório"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#laboratórios",
    "href": "slides/01-intro/01-intro.html#laboratórios",
    "title": "Introdução",
    "section": "Laboratórios",
    "text": "Laboratórios\n\nSubturma 1A: Terça, 16:50 às 18:30, Lab. 3 (Prof. Bruno)\nSubturma 1B: Quarta, 14:55 às 16:35, Lab. 3 (Prof. Vidal)\nSubturma 1C: Quarta, 16:50 às 18:30, Lab. 3 (Prof. Vidal)"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#avaliações",
    "href": "slides/01-intro/01-intro.html#avaliações",
    "title": "Informações sobre a Disciplina",
    "section": "Avaliações",
    "text": "Avaliações\n\nPráticas semanais no laboratório (40%)\nProva prática em cada unidade (60%)\nPresenças serão registradas por chamada em todas as aulas"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sobre-a-disciplina-observação-importante",
    "href": "slides/01-intro/01-intro.html#sobre-a-disciplina-observação-importante",
    "title": "Introdução",
    "section": "Sobre a Disciplina: Observação Importante",
    "text": "Sobre a Disciplina: Observação Importante\nRegimento Interno/UFRN, Seção III:\n\nPrevê punições para casos de:\n\nFraudes (colas)\nPerturbação ao andamento normal das atividades\nOfensas a servidores da universidade"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma",
    "href": "slides/01-intro/01-intro.html#cronograma",
    "title": "Informações sobre a Disciplina",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 1"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma-1",
    "href": "slides/01-intro/01-intro.html#cronograma-1",
    "title": "Informações sobre a Disciplina",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 2"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma-2",
    "href": "slides/01-intro/01-intro.html#cronograma-2",
    "title": "Informações sobre a Disciplina",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 3"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#livros-utilizados",
    "href": "slides/01-intro/01-intro.html#livros-utilizados",
    "title": "Informações sobre a Disciplina",
    "section": "Livros Utilizados",
    "text": "Livros Utilizados"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes",
    "title": "Informações sobre a Disciplina",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nMeu programa enviado no Multiprova/Sistema LoP deu 100% correto. Por que a minha nota não foi 10? O seu programa ter 100% de acerto não implica no fato de que você implementou a questão como solicitada.\nAcho curto o tempo para entrega das questões de lab. Por que não estender este prazo? As questões são elaboradas para serem entregues em um determinado prazo. O fato de você não conseguir entregá-las significa que o seu nível de desenvoltura com a disciplina está abaixo do esperado."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes-1",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes-1",
    "title": "Informações sobre a Disciplina",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso utilizar o recurso XYZ (p. ex. vetores) em uma atividade, mesmo que ele ainda não tenha sido apresentado em sala de aula? E quanto a recursos não passados pelo professor? Não. Todas as atividades avaliativas são elaboradas de forma que o aluno seja avaliado considerando o conteúdo que a ele foi passado até o momento da atividade."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes-2",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes-2",
    "title": "Informações sobre a Disciplina",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso assistir aula em uma subturma de laboratório que não seja a minha? Não. Caso não seja possível que você compareça às aulas de laboratório, é aconselhável que você se matricule em outra turma."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#experiências-passadas-em-lip",
    "href": "slides/01-intro/01-intro.html#experiências-passadas-em-lip",
    "title": "Informações sobre a Disciplina",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que não ouve o professor\n\nParadoxo: se o aluno não ouve o professor, ele também não irá ouvir esta afirmação e portanto, o problema não tem solução\n\nAluno que não estudou o suficiente para uma atividade"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#experiências-passadas-em-lip-1",
    "href": "slides/01-intro/01-intro.html#experiências-passadas-em-lip-1",
    "title": "Informações sobre a Disciplina",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que acha que está aprendendo, mas não está\n\nPor exemplo, aluno que costuma fazer trabalhos em grupo ou acha que programação se aprende vendo alguém praticar\n\nAluno que quer burlar o sistema de avaliação"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#demais-perguntas",
    "href": "slides/01-intro/01-intro.html#demais-perguntas",
    "title": "Informações sobre a Disciplina",
    "section": "Demais Perguntas",
    "text": "Demais Perguntas\nSintam-se à vontade para fazer qualquer pergunta sobre a disciplina ou sobre o professor"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#dúvidas",
    "href": "slides/01-intro/01-intro.html#dúvidas",
    "title": "Informações sobre a Disciplina",
    "section": "Dúvidas",
    "text": "Dúvidas\n\nMensagem via Discord\nEmail: bruno.silva@ufrn.br\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#horários-dos-laboratórios",
    "href": "slides/01-intro/01-intro.html#horários-dos-laboratórios",
    "title": "Informações sobre a Disciplina",
    "section": "Horários dos Laboratórios",
    "text": "Horários dos Laboratórios\n\nSubturma 4A: quartas, 20:30 às 22:00, Lab. 1 (Prof. Bruno)\nSubturma 4B: segundas, 16:40 às 18:20, Lab. 1 (Prof. Bruno)\nSubturma 4C: segundas, 13:00 às 14:40, Lab. 2 (Prof. Jesaías)\n\nAs atividades práticas serão realizadas no Multiprova"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#observação-importante",
    "href": "slides/01-intro/01-intro.html#observação-importante",
    "title": "Informações sobre a Disciplina",
    "section": "Observação Importante",
    "text": "Observação Importante\nRegimento Interno/UFRN, Seção III:\n\nPrevê punições para casos de:\n\nFraudes (colas)\nPerturbação ao andamento normal das atividades\nOfensas a servidores da universidade"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#objetivos-da-disciplina",
    "href": "slides/02-cpp/02-cpp.html#objetivos-da-disciplina",
    "title": "Introdução à Linguagem C++",
    "section": "Objetivos da Disciplina",
    "text": "Objetivos da Disciplina\n\nDesenvolver a capacidade de implementar algoritmos em uma linguagem de programação estruturada e conceitos relacionados\nDesenvolver programas com funções e tipos estruturados\n\nPara isto, utilizaremos a linguagem:\n\nC++"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação",
    "href": "slides/02-cpp/02-cpp.html#programação",
    "title": "Introdução à Linguagem C++",
    "section": "Programação",
    "text": "Programação\nA capacidade de programar computadores será aplicada na resolução de problemas como:\n\nResolução de funções matemáticas, possivelmente com vetores e matrizes\nSimulação de sistemas\nProcessamento de grandes volumes de dados\netc."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-1",
    "href": "slides/02-cpp/02-cpp.html#programação-1",
    "title": "Introdução à Linguagem C++",
    "section": "Programação",
    "text": "Programação\nProgramação envolve:\n\nCompreender o problema a ser resolvido\nElaborar uma sequência de comandos/instruções conhecidos\nEscrever um programa na linguagem escolhida em um arquivo chamado código fonte (possui terminação .cpp)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-processo-de-compilação",
    "href": "slides/02-cpp/02-cpp.html#programação-processo-de-compilação",
    "title": "Introdução à Linguagem C++",
    "section": "Programação: Processo de Compilação",
    "text": "Programação: Processo de Compilação\n\n\nCompilação: transformação de código fonte em um programa\nCódigo fonte: formato legível por humanos, formado por comandos/instruções\nPrograma: formato legível por máquinas (arquivo binário)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio",
    "href": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio",
    "title": "Introdução à Linguagem C++",
    "section": "Programação: Representação de um Raciocínio",
    "text": "Programação: Representação de um Raciocínio\n\nLinguagem escolhida tem um formato próprio, denominado sintaxe\nPortanto, aprender programação se resume a:\n\nDominar a sintaxe da linguagem de programação utilizada\nDominar raciocínio lógico e a sua transcrição em um programa"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-2",
    "href": "slides/02-cpp/02-cpp.html#programação-2",
    "title": "Introdução à Linguagem C++",
    "section": "Programação",
    "text": "Programação\nProgramando na linguagem C++"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-primeiro-programa",
    "href": "slides/02-cpp/02-cpp.html#c-primeiro-programa",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Primeiro Programa",
    "text": "C++: Primeiro Programa\nint main(){\n    return 0;\n}\n\nEntretanto, o programa mostrado não faz nada."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-primeiro-programa-útil",
    "href": "slides/02-cpp/02-cpp.html#c-primeiro-programa-útil",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Primeiro Programa Útil",
    "text": "C++: Primeiro Programa Útil\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    cout << \"LiP: programando em C++\\n\";\n    return 0;\n}\n\nUm programa é dito “útil” quando tem algum tipo de saída."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-comando-de-saída",
    "href": "slides/02-cpp/02-cpp.html#c-comando-de-saída",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Comando de Saída",
    "text": "C++: Comando de Saída\n\nComando de saída cout: imprime na tela o que vem após cada <<\nIsto requer a inclusão da biblioteca iostream (com a diretiva #include)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-espaços-em-branco",
    "href": "slides/02-cpp/02-cpp.html#c-espaços-em-branco",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Espaços em Branco",
    "text": "C++: Espaços em Branco\nEspaços em branco não alteram o programa:\n#include <iostream>\n\nusing namespace std;\n\nint main(){\ncout << \"LiP: programando em C++\\n\";\nreturn 0;\n}\nEntretanto, mantenha sempre o seu código indentado (facilita a leitura)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-comentários-de-código",
    "href": "slides/02-cpp/02-cpp.html#c-comentários-de-código",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Comentários de Código",
    "text": "C++: Comentários de Código\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    //A proxima linha imprime uma frase\n    cout << \"LiP: primeiro programa\" << endl;\n\n    /* O proximo comando nao e processado pelo\n       compilador, pois e um comentario\n       de linha */\n    //cout << \"ECT/UFRN\" << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Variáveis",
    "text": "C++: Variáveis\n\nNomes dados a endereços de memória do computador\nUtilizadas para armazenar valores de diferentes tipos\nVariáveis precisam ser declaradas antes de serem utilizadas"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Sintaxe de Declaração de Variáveis",
    "text": "C++: Sintaxe de Declaração de Variáveis\nEm qualquer local dentro do bloco main:\ntipo_da_variavel nome_da_variavel;\n\ntipo_da_variavel pode ser:\n\nbool: declara um booleano (verdadeiro ou falso)\nint: declara um número inteiro\nfloat: declara um número real\nchar: declara um único caractere"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis-1",
    "href": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis-1",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Sintaxe de Declaração de Variáveis",
    "text": "C++: Sintaxe de Declaração de Variáveis\n\nnome_da_variavel deve obedecer às regras:\n\ndeve começar com uma letra ou _\ndeve ser composto por letras, dígitos ou _\nnão pode ser uma palavra reservada (p. ex. if)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Declaração de Variáveis",
    "text": "C++: Declaração de Variáveis\nExercício\nUtilizando o seu caderno, declare variáveis:\n\nChamada de x para armazenar um inteiro\nChamada de temp para armazenar uma temperatura\nPara armazenar o resultado de uma média aritmética\nPara armazenar o sexo de nascença de uma pessoa\nPara armazenar se um motor está ligado ou desligado"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis-1",
    "href": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis-1",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Declaração de Variáveis",
    "text": "C++: Declaração de Variáveis\nSolução\n1. int x;\n2. float temp;\n3. float media;\n4. char sexo;\n5. bool ligado;"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#lista-de-presença",
    "href": "slides/02-cpp/02-cpp.html#lista-de-presença",
    "title": "Introdução à Linguagem C++",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/3QV1pX1"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-valor-inicial-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-valor-inicial-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Valor Inicial de Variáveis",
    "text": "C++: Valor Inicial de Variáveis\nO que é impresso pelo seguinte programa?\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    int x;\n    cout << \"o valor de x e: \" << x << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-inicialização-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-inicialização-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Inicialização de Variáveis",
    "text": "C++: Inicialização de Variáveis\n\nAo serem declaradas em C++, as variáveis são inicializadas com valores aleatórios (lixo em memória)\nC++ oferece o recurso de inicializar uma variável ao mesmo tempo em que ela é declarada\nPor exemplo:\n\nfloat media = 0; \\rightarrow declara e inicializa a media com 0\nchar sexo = 'M'; \\rightarrow declara e inicializa a sexo com M"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nValores devem ser atribuídos com aspas simples: '\nVariáveis char armazenam um único caractere\n\nLetra: 'a', 'e', 'Z', etc.\nDígito: '5', '2', etc.\nSímbolo: ']', '/', ';', etc."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char-1",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char-1",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nAlguns caracteres especiais:\n\n'\\n': quebra de linha\n'\\t': tabulação (espaço em branco maior)\n'\\0': delimitador de final de cadeia de caracteres"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char-2",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char-2",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nTodo caractere está presente na tabela ASCII (lê-se “ásqui”):\n\nAssocia um número inteiro diferente para cada caractere\nImagem com a tabela"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-entrada-de-dados",
    "href": "slides/02-cpp/02-cpp.html#c-entrada-de-dados",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Entrada de Dados",
    "text": "C++: Entrada de Dados\nComando de entrada cin: atribui valor lido do teclado às variáveis após o >>:\n#include <iostream>\nusing namespace std;\nint main(){\n    int x = 0;\n    cout << \"digite um valor: \";\n    cin >> x;\n    cout << \"o valor digitado foi \" << x << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-1",
    "href": "slides/02-cpp/02-cpp.html#exercício-1",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício",
    "text": "Exercício\nImplemente um programa que lê um número inteiro e um caractere e imprime o texto \"O inteiro eh X e o caractere eh Y\" seguido por uma quebra de linha, sendo X e Y o inteiro e o caractere respectivamente."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-solução",
    "href": "slides/02-cpp/02-cpp.html#exercício-solução",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\n#include <iostream>\nusing namespace std;\nint main(){\n    int num;\n    char carac;\n    cout << \"insira um num. inteiro:\\n\";\n    cin >> num;\n    cout << \"insira um caractere:\\n\";\n    cin >> carac;\n    cout << \"O inteiro eh \" << num\n         << \" e o caractere eh \"\n         << carac << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-operadores",
    "href": "slides/02-cpp/02-cpp.html#c-operadores",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Operadores",
    "text": "C++: Operadores\n\nOperador de atribuição: =\nOperadores aritméticos: +, -, *, /\nOperadores relacionais: >, >=, <, <=, ==, !=\nOperadores lógicos: ! (negação), || (ou), && (e)\n\nVocê verá mais sobre operadores na aula que vem"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-2",
    "href": "slides/02-cpp/02-cpp.html#exercício-2",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício",
    "text": "Exercício\nImplemente um programa que lê dois números inteiros. O programa deve imprimir:\n\nA soma dos números\nA diferença entre o primeiro e o segundo\nO produto entre os números\nO quociente da divisão do primeiro pelo segundo\nO resto da divisão do primeiro pelo segundo"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-solução-1",
    "href": "slides/02-cpp/02-cpp.html#exercício-solução-1",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\n#include <iostream>\nusing namespace std;\nint main(){\n    int x, y;\n    cout << \"insira dois num. inteiros:\\n\";\n    cin >> x >> y;\n    cout << \"Soma: \" << x + y << endl;\n    cout << \"Diferenca: \" << x - y << endl;\n    cout << \"Produto: \" << x * y << endl;\n    cout << \"Quociente: \" << x/y << endl;\n    cout << \"Resto: \" << x % y << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#sumário",
    "href": "slides/02-cpp/02-cpp.html#sumário",
    "title": "Introdução à Linguagem C++",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje, você viu:\n\nEstrutura de um programa em C++\nDeclaração e inicialização de variáveis\nTipos básicos\nComandos de entrada e saída\nOperadores\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio-1",
    "href": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio-1",
    "title": "Introdução à Linguagem C++",
    "section": "Programação: Representação de um Raciocínio",
    "text": "Programação: Representação de um Raciocínio\n\n\n\n\n\n\nCaso esteja sintaticamente correto, o código fonte é compilado em um programa"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char-3",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char-3",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nNão se decora a tabela ASCII, mas é importante saber que:\n\nO alfabeto maiúsculo está em sequência na tabela: se 'A' é igual a um inteiro x, o correspondente a 'B' é igual a x+1, 'C' é x+2, etc.\nO mesmo para o alfabeto minúsculo: 'a' é y, 'b' é y+1…\nO mesmo para os números: '1' é z, '2' é z+1…\nO intervalo [A,Z] tem valores menores que [a,z]"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#linguagem-de-programação",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#linguagem-de-programação",
    "title": "Operadores e Expressões",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior: variáveis e tipos básicos\nAula de hoje: operadores e expressões"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-e-operandos",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-e-operandos",
    "title": "Operadores e Expressões",
    "section": "Operadores e Operandos",
    "text": "Operadores e Operandos\n\nCompõem uma expressão\nExemplo:\n\nx + y\n\nOperador: +\nOperandos: x e y"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores",
    "title": "Operadores e Expressões",
    "section": "Operadores",
    "text": "Operadores\nOs operadores possuem uma precedência (quem será computado primeiro) e estão divididos em grupos:\n\nOperador de atribuição\nOperadores aritméticos\nOperadores relacionais\nOperadores lógicos"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões",
    "title": "Operadores e Expressões",
    "section": "Expressões",
    "text": "Expressões\n\nSequências de operandos e operadores que especificam algo a ser calculado\nEm C++:\n\nExpressões aritméticas\nExpressões lógicas"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-atribuição",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-atribuição",
    "title": "Operadores e Expressões",
    "section": "Operador de Atribuição",
    "text": "Operador de Atribuição\nOperador = (“recebe”):\n\nAtribui um determinado valor a uma variável\nx = 0; \\rightarrow lê-se “x recebe zero”\nSempre: variável à esquerda da atribuição e qualquer outra expressão à sua direita"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos",
    "text": "Operadores Aritméticos\n\nFormam expressões aritméticas: valor resultante é um número\nOperadores de mesma precedência são avaliados da esquerda para a direita\n\n\n\n\n\nOperador\nFuncionalidade\nPrecedência no Grupo\n\n\n\n\n()\nAssociar operandos\nPrimeiro\n\n\n+\nAdição\nÚltimo\n\n\n-\nSubtração\nÚltimo\n\n\n*\nMultiplicação\nSegundo\n\n\n/\nDivisão\nSegundo\n\n\n%\nResto\nSegundo"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-aritméticas",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-aritméticas",
    "title": "Operadores e Expressões",
    "section": "Expressões Aritméticas",
    "text": "Expressões Aritméticas\nExemplos:\n\n1+2*3\n1*2+3\n(1+2)*3\n1*2%3\n((1*2)+3)*2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#programa-com-expressões",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#programa-com-expressões",
    "title": "Operadores e Expressões",
    "section": "Programa com expressões",
    "text": "Programa com expressões\nint main(){\n    int x = 0;\n    x + 45;\n    x = x + 100;\n    cout << x << endl;\n    return 0;\n}\nO programa está sintaticamente correto? Qual o valor impresso?"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos de Atribuição",
    "text": "Operadores Aritméticos de Atribuição\nComputam a expressão, aplicam o operador aritmético e atribuem o seu valor à variável à esquerda do op. de atribuição\n\n\n\nOperador\nExpressão\nExpressão Equivalente\n\n\n\n\n+=\nx += y\nx = x + y\n\n\n-=\nx -= y\nx = x - y\n\n\n*=\nx *= y\nx = x * y\n\n\n/=\nx /= y\nx = x/y\n\n\n%=\nx %= y\nx = x%y"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição-1",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos de Atribuição",
    "text": "Operadores Aritméticos de Atribuição\nQual o valor final das variáveis a seguir, para x = 1, y = 2?\n\nx += 2*2;\nx -= y;"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operações-de-potência-e-raíz-quadrada",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operações-de-potência-e-raíz-quadrada",
    "title": "Operadores e Expressões",
    "section": "Operações de Potência e Raíz Quadrada",
    "text": "Operações de Potência e Raíz Quadrada\n\nEm C++, não existem operadores para potência e raíz quadrada\nEstas operações são realizadas por chamadas a funções\n\npow(b,e) para potência (b elevado a e)\nsqrt(x) para raíz quadrada de x\n\nAmbas as funções estão na biblioteca cmath\n\n#include <cmath>"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento",
    "title": "Operadores e Expressões",
    "section": "Operador de Incremento/Decremento",
    "text": "Operador de Incremento/Decremento\nOperadores unários (só precisam de um operando)\n\n\n\n\nExpressao\nExpressao Equivalente\n\n\n\n\nx++\nx = x + 1\n\n\nx--\nx = x - 1\n\n\n\n\n\nPrecedência: mais alta do que a multiplicação/divisão/resto\nPor exemplo, para x = 1:\n\nx++; //x será igual a 2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento-1",
    "title": "Operadores e Expressões",
    "section": "Operador de Incremento/Decremento",
    "text": "Operador de Incremento/Decremento\n\nPrecedência: mais alta do que a multiplicação/divisão/resto\nPor exemplo, para x = 1, y = 2, z = 3:\n\nx++; //x será igual a 2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\n\nExpressões que possuem como resultado os valores 0 (falso) ou 1 (verdadeiro)\nFormadas por dois tipos de operadores:\n\nOperadores relacionais\nOperadores lógicos"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-1",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nEm C++, valores numéricos são interpretados como falso ou verdadeiro:\n\nO único valor a ser interpretado como falso é o 0\nQualquer outro é interpretado como 1 (ex. 1.000001, -10000, etc.)"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-relacionais",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-relacionais",
    "title": "Operadores e Expressões",
    "section": "Operadores Relacionais",
    "text": "Operadores Relacionais\nPossuem precedência mais alta do que o operador de atribuição e mais baixa do que os operadores aritméticos\n\n\n\nOperador\nFuncionalidade\nPrecedência no grupo\n\n\n\n\n==\nIgual\nÚltimo\n\n\n!=\nDiferente\nÚltimo\n\n\n<\nMenor\nPrimeiro\n\n\n<=\nMenor ou igual\nPrimeiro\n\n\n>\nMaior\nPrimeiro\n\n\n>=\nMaior ou igual\nPrimeiro"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-2",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-2",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nCom Operadores Relacionais\nExemplos:\n\n1 > 2;\n'a' < 'b';\nx == x;\nx = 5*2 > 4;"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-lógicos",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-lógicos",
    "title": "Operadores e Expressões",
    "section": "Operadores Lógicos",
    "text": "Operadores Lógicos\nPossuem precedência mais baixa do que os operadores relacionais (exceto a negação, que tem precedência igual ao op. de incremento)\n\n\n\nOperador\nFuncionalidade\nPrecedencia no grupo\n\n\n\n\n!\nNegacao (nao logico)\nPrimeiro\n\n\n||\nDisjuncao (ou logico)\nUltimo\n\n\n&&\nConjuncao (e logico)\nSegundo"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-negação-não-lógico",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-negação-não-lógico",
    "title": "Operadores e Expressões",
    "section": "Operador Lógico de Negação (Não Lógico)",
    "text": "Operador Lógico de Negação (Não Lógico)\nTabela Verdade\nNegação: inverte o valor lógico do operando (op. unário)\n\n\n\nx\n!x\n\n\n\n\n0\n1\n\n\n1\n0"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-disjunção-ou-lógico",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-disjunção-ou-lógico",
    "title": "Operadores e Expressões",
    "section": "Operador Lógico de Disjunção (OU Lógico)",
    "text": "Operador Lógico de Disjunção (OU Lógico)\nTabela Verdade\nDisjunção: falso quando os dois operandos são falsos\n\n\n\nx\ny\nx || y\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n1"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-conjunção-e-lógico",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-conjunção-e-lógico",
    "title": "Operadores e Expressões",
    "section": "Operador Lógico de Conjunção (E Lógico)",
    "text": "Operador Lógico de Conjunção (E Lógico)\nTabela Verdade\nConjunção: verdadeiro quando os dois operandos são verdadeiros\n\n\n\nx\ny\nx && y\n\n\n\n\n0\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n1"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-3",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-3",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nCom Todos os Operadores\nExemplos (para x = 1, y = 2, z = 3):\n\ny-x == false\nx > 0 && x < z+10\nx != 1 || x != 2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#lista-de-presença",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#lista-de-presença",
    "title": "Operadores e Expressões",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/3l7ktq8"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-4",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-4",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nExemplo de Expressão Mal Construída\nA expressão abaixo é sintaticamente correta mas é logicamente incorreta. O que há de errado com ela? Como consertar?\nint i = 3, j = 2, k = 1;\nbool expr;\n\nexpr = (i > j > k);"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-5",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-5",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nExemplo de Expressão Mal Construída\nForma correta da expressão anterior:\nint i = 3, j = 2, k = 1;\nbool expr;\n\nexpr = (i > j  && j > k);"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#precedência",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#precedência",
    "title": "Operadores e Expressões",
    "section": "Precedência",
    "text": "Precedência\nOrdem geral\n\nParênteses\nOperador de incremento/não lógico\nOperadores aritméticos\nOperadores relacionais\nOperadores lógicos\nAtribuição"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas",
    "title": "Operadores e Expressões",
    "section": "Verificando o Valor de Expressões Lógicas",
    "text": "Verificando o Valor de Expressões Lógicas\nUtilize o cout com a expressão lógica inteira entre parênteses para verificar o seu valor em programas:\nint main(){\n    int i = 1, j = 2, k = 3;\n\n    cout << (i + j < k || 5 >= k) << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas-1",
    "title": "Operadores e Expressões",
    "section": "Verificando o Valor de Expressões Lógicas",
    "text": "Verificando o Valor de Expressões Lógicas\nOu, atribua o resultado da expressão a uma variável booleana e imprima esta variável:\nint main(){\n    int i = 1, j = 2, k = 3;\n    bool expr;\n\n    expr = i + j < k || 5 >= k;\n\n    cout << expr << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos I",
    "text": "Conversão de Tipos I\nEm C++, o tipo do resultado de uma expressão aritmética é sempre convertido no tipo do operando com maior precisão (com maior capacidade de armazenamento)"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i-1",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos I",
    "text": "Conversão de Tipos I\nExemplo:\nchar ch;\nint i;\nfloat f;\n\nresult = (ch/i) + (f*i); \n\nch/i é uma expressão com tipo int\nf*i é uma expressão com tipo float\n(ch/i) + (f*i) é uma expressão com tipo float\nresult tem portanto tipo float"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos II",
    "text": "Conversão de Tipos II\nEm C++, o tipo da expressão do lado direito de uma atribuição é convertido no tipo do lado esquerdo apenas quando o lado esquerdo representa um conjunto menor de valores"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii-1",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos II",
    "text": "Conversão de Tipos II\nExemplos:\nfloat g = 9.8;\n//valor de g e convertido para int\nint x = g;\nint x = 3, y = 3, z = 4;\n//valor da expressao NAO e convertido para float\nfloat media = (x + y + z)/3;"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos III",
    "text": "Conversão de Tipos III\nEm C++, é possível forçar uma expressão a ser interpretada como um tipo informado"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii-1",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos III",
    "text": "Conversão de Tipos III\nTypecast\nSintaxe:\nnovo_tipo(expressao);\nou\n(novo_tipo) expressao;\nExemplos:\nint x = 3, y = 3, z = 4;\nfloat media = float(x + y + z)/3;"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#exercício",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#exercício",
    "title": "Operadores e Expressões",
    "section": "Exercício",
    "text": "Exercício\nImplemente um programa que leia do usuário um caractere. O programa deve imprimir na tela o número inteiro da tabela ASCII correspondente ao caractere informado. Dica: utilize o operador de conversão."
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#exercício-solução",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#exercício-solução",
    "title": "Operadores e Expressões",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\n#include <iostream>\nusing namespace std;\nint main(){\n    char car;\n    cout << \"insira um caractere:\\n\";\n    cin >> car;\n    cout << \"Num. ASCII: \" << int(car) << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#exercício-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#exercício-1",
    "title": "Operadores e Expressões",
    "section": "Exercício",
    "text": "Exercício\nForneça valores para as variáveis e calcule os resultados das expressões a seguir. Implemente um programa para verificar as suas respostas:\nint x, y, z;\nchar car;\n\n1. car && (x || y)\n2. (x > y && y > z) || (x == z)\n3. expressao verdadeira quando x nao eh 0 e nem 1\n   e y nao eh 0 e nem -1"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#desafio",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#desafio",
    "title": "Operadores e Expressões",
    "section": "Desafio",
    "text": "Desafio\nUtilizando apenas o que foi visto até o momento na disciplina, implemente um programa que leia do usuário um número inteiro. O seu programa deve imprimir na tela o antecessor do número, exceto se ele for o número 13. Neste caso, o próprio número deve ser impresso."
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#sumário",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#sumário",
    "title": "Operadores e Expressões",
    "section": "Sumário",
    "text": "Sumário\nChecklist da aula:\n\nOperador de atribuição\nOperadores aritméticos\nOperadores lógicos\nOperadores relacionais\nOperador de typecast\nExpressões aritméticas e lógicas\nOrdem de precedência e avaliação de expressões\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-small_table",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-small_table",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos {small_table}",
    "text": "Operadores Aritméticos {small_table}\n\nFormam expressões aritméticas: valor resultante é um número\nOperadores de mesma precedência são avaliados da esquerda para a direita\n\n\n\n\nOperador\nFuncionalidade\nPrecedência no Grupo\n\n\n\n\n()\nAssociar operandos\nPrimeiro\n\n\n+\nAdição\nÚltimo\n\n\n-\nSubtração\nÚltimo\n\n\n*\nMultiplicação\nSegundo\n\n\n/\nDivisão\nSegundo\n\n\n%\nResto\nSegundo"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#linguagem-de-programação",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#linguagem-de-programação",
    "title": "Comandos de Seleção",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAulas anteriores:\n\nVariáveis e tipos básicos\nComo modificar variáveis: operadores e expressões\nTipos diferentes em uma mesma expressão\n\nAula de hoje: comandos de seleção\n\nComando if-else\nComando switch-case\nOperador ternário ? :"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção",
    "title": "Comandos de Seleção",
    "section": "Comandos de Seleção",
    "text": "Comandos de Seleção\n\nDesviam o fluxo de execução de um programa\nPermitem a execução de uma ou mais instruções (bloco de código) quando uma determinada expressão for verdadeira"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nSintaxe:\nif(condicao){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-1",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\n\nComando de seleção simples: depende apenas de uma condição\nA condição é qualquer expressão (inclusive expressões aritméticas ou constantes)\nA condição é sempre avaliada como expressão lógica\n\nVerdadeiro: qualquer valor diferente de zero\nFalso: zero"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-2",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExemplo\nPrograma que lê um número digitado pelo usuário e imprime a frase \"Numero invalido\" caso o usuário digite zero:\nint main(){\n    int x;\n    cin >> x;\n    if(x == 0){\n        cout << \"Numero invalido\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-3",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExemplos Atípicos\n\nComando if que sempre executa:\n\nif(1){\n    cout << \"Sempre imprime\" << endl;\n}\n\nUso incorreto de operadores:\n\nif(x = 0){ //ha um problema aqui\n    cout << \"Numero invalido\" << endl;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-4",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-4",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExercício: faça um programa que lê uma letra digitada pelo usuário e imprime a frase \"Vogal minuscula digitada\" caso o usuário digite uma vogal minúscula"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-5",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-5",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExercício: Solução\nint main(){\n    char cr;\n    cin >> cr;\n    if(cr == 'a' || cr == 'e' || cr == 'i' ||\n       cr == 'o' || cr == 'u'){\n        cout << \"Vogal minuscula digitada\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nSintaxe:\nif(condicao){\n    comandoI.1;\n    ...\n    comandoI.N;\n}\nelse{\n    comandoE.1;\n    ...\n    comandoE.N;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-1",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\n\nComando de seleção composto: dois blocos dependem de uma mesma condição\nQuando a condição é verdadeira: bloco correspondente ao if é executado\nQuando a condição é falsa: bloco correspondente ao else é executado"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-2",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nExemplo: programa que lê um número digitado pelo usuário e imprime a frase \"Numero invalido\" caso o usuário digite zero ou a frase \"Numero valido\" caso contrário"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-3",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nint main(){\n    int x;\n    cin >> x;\n    if(x == 0){\n        cout << \"Numero invalido\" << endl;\n    }\n    else{\n        cout << \"Numero valido\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-4",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-4",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nExercício: faça um programa que lê uma letra digitada pelo usuário e imprime a frase \"Vogal minuscula digitada\" caso o usuário digite uma vogal minúscula ou a frase \"Consoante minuscula digitada\" caso o usuário digite uma consoante minúscula"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-5",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-5",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nExercício: Solução\nint main(){\n    char cr;\n    cin >> cr;\n    if(cr == 'a' || cr == 'e' || cr == 'i' ||\n       cr == 'o' || cr == 'u'){\n        cout << \"Vogal minuscula digitada\" << endl;\n    }\n    else{\n        cout << \"Consoante minuscula digitada\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#lista-de-presença",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#lista-de-presença",
    "title": "Comandos de Seleção",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/40e5ASi"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\nSintaxe:\nif(condicao1){\n    comando1.1;\n    ...\n    comando1.N;\n}\nelse if(condicao2){\n    comando2.1;\n    ...\n    comando2.N;\n}\nelse{\n    comando3.1;\n    ...\n    comando3.N;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-1",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\n\nComando de seleção aninhado: associação de vários if-else\nCada else só é executado se o if anterior for falso\nSomente então a condição do próximo if é testada\nAssim, os blocos de comandos são mutuamente exclusivos (apenas um deles pode ser verdadeiro por execução)"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-2",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\nExercício: faça um programa que lê a nota de um aluno e imprime:\n\n\"Aprovado\", caso a nota seja maior ou igual a 5.0\n\"Em recuperacao\", caso a nota seja maior ou igual a 3.0 e menor do que 5.0\n\"Reprovado\", caso a nota seja menor do que 3.0"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-3",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\nExercício: Solução\nint main(){\n    float nota;\n    cin >> nota;\n    if(nota >= 5.0){\n        cout << \"Aprovado\" << endl;\n    }\n    else if(nota >= 3.0){\n        cout << \"Em recuperacao\" << endl;\n    }\n    else{\n        cout << \"Reprovado\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nSintaxe:\nswitch(expressao){\n    case constante1:\n        comando 1.1;\n        ...\n        comando 1.N;\n        break;\n    ...\n    case constanteN:\n        comando N.1;\n        ...\n        comando N.N;\n        break;\n    default:\n        comando d.1;\n        ...\n        comando d.N;    \n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-1",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\n\nComando de seleção de múltipla escolha: alternativa ao uso de vários if-else\nPossui sintaxe específica que compara o valor de uma variável ao de várias constantes\nFuncionamento:\n\nO bloco case que possuir valor igual ao da constante será executado\nTodos os blocos case abaixo do executado são também executados…"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-2",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\n\n… exceto no caso em que cada case termina com um break\ndefault (opcional): executado quando a expressão não é igual a nenhuma das constantes"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-3",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nExemplo: programa que escreve por extenso na tela o nome de cada dígito (de 0 a 2; complete o código para nrs. até 9):\nint main(){\n    int d;\n    cin >> d;\n    switch(d){\n        case 0:\n            cout << \"zero\" << endl;\n            break;\n        case 1:\n            cout << \"um\" << endl;\n            break;\n        case 2:\n            cout << \"dois\" << endl;\n            break;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-4",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-4",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nExercício: utilizando o switch-case, faça um programa que lê uma letra digitada pelo usuário e imprime a frase \"Vogal digitada\" caso o usuário digite uma vogal ou a \"Consoante digitada\" caso o usuário digite uma consoante"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-5",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-5",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nExercício: Solução\nint main(){\n    char c;\n    cin >> c;\n    switch(c){\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case u':\n            cout << \"Vogal digitada\" << endl;\n            break;\n        default:\n            cout << \"Consoante digitada\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário ? :",
    "text": "Operador Ternário ? :\nSintaxe:\nexpr1 ? expr2 : expr3;  \n\nComo o nome sugere, necessita de três operandos expr1, expr2 e expr3\n\nexpr1 é avaliada\nse expr1 for verdadeira, expr2 é calculada\nse expr1 for falsa, expr3 é calculada\n\nO resultado calculado é o resultado do operador ternário"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-1",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário ? :",
    "text": "Operador Ternário ? :\nExemplo: programa que atribui à y: - O valor 1 se x for maior ou igual a zero - O valor -1 se x for menor que zero\nint main(){\n    int x, y;\n    cin >> x;\n    y = x >= 0 ? 1 : -1;\n    cout << \"y: \" << y << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-2",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário ? :",
    "text": "Operador Ternário ? :\nExercício: utilizando o ? :, faça um programa que lê dois números e imprime qual é o maior dos dois"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-3",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário ? :",
    "text": "Operador Ternário ? :\nExercício: Solução\nint main(){\n    int x, y, maior;\n    cin >> x >> y;\n    x > y ? maior = x : maior = y;\n    cout << maior << \" e o maior\" << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção-1",
    "title": "Comandos de Seleção",
    "section": "Comandos de Seleção",
    "text": "Comandos de Seleção\nDicas Gerais\n\nTodo switch-case pode ser feito com if-else, mas não o contrário\nOperador ternário: utilizado em casos simples de if-else\nNo final das contas: if-else é mais genérico e portanto, mais indicado para uso"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#sumário",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#sumário",
    "title": "Comandos de Seleção",
    "section": "Sumário",
    "text": "Sumário\nChecklist da aula de hoje:\n\nSeleção simples if\nSeleção composta if-else\nSeleção aninhada (encadeamento de if-else)\nComando switch\nOperador ternário ? :\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#linguagem-de-programação",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#linguagem-de-programação",
    "title": "Comando de Repetição for",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComandos de seleção\n\nAula de hoje:\n\nComando de repetição for"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-1",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-1",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado for: repete instruções por um determinado número de vezes\nComando de repetição condicional while: repete instruções enquanto uma condição é verdadeira (próxima aula)"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-2",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-2",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nImplemente um programa que escreva n vezes na tela \"vou estudar lip\""
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nSintaxe:\nfor(inicializacao; condicao; incremento){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-1",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-1",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nItera sobre uma variável, chamada de contador, variável de iteração ou variável de controle\nEsta variável tem o seu valor alterado conforme o programador deseja\nIsto faz o laço executar várias iterações"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-2",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-2",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nDividido em três expressões opcionais:\n\nInicialização: executada somente na primeira vez em que o for é executado\nCondição: avaliada no início de cada iteração\nIncremento: executado no final de cada iteração"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-3",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-3",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nOrdem de execução:\n\nA expressão de inicialização é executada\nA expressão de condição é avaliada:\n\nCaso seja verdadeira: o bloco de comandos é executado\nCaso seja falsa: o laço é encerrado\n\nA expressão de incremento é executada e volta para o passo 2"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-4",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-4",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"i: \" << i << endl;\n    }\n    return 0;\n}\nO que imprime este programa?"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-3",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-3",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nVoltando ao exemplo inicial: agora sim, vimos o que é necessário\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"vou estudar lip\\n\";\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#programação-e-automatização-de-tarefas",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#programação-e-automatização-de-tarefas",
    "title": "Comando de Repetição for",
    "section": "Programação e Automatização de Tarefas",
    "text": "Programação e Automatização de Tarefas\n\n\n\n\n\nAprender programação é aprender a automatizar tarefas"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-5",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-5",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo de Motivação\nNo mesmo exemplo, o que aconteceria se fosse usado:\n\nfor(i = 0; i < 10*n; i += 10)...\nfor(i = n; i > 0; i--)...\nfor(i = 10*n; i > 0; i -= 10)...\n\n?"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-6",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-6",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\nDiferentes combinações para a inicialização, condição e incremento fazem o for repetir pela mesma quantidade de vezes"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-7",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-7",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\n\nDiferentes for podem ser usados se estivermos preocupados com a quantidade de execuções de um bloco de comandos\nO que não é o caso se desejarmos que a variável de iteração assuma uma sequência de valores específicos"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-8",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-8",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 1\nFaça um programa que lê um número n e em seguida, lê as notas de n alunos. O programa deve exibir a média das notas na tela.\nAntes de programar: o que deve ser repetido?"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-9",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-9",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 1: Solução\nint main(){\n    int i, n;\n    float nota, media = 0;\n    cout << \"Insira a quantidade de notas\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"Insira a nota do \"\n             << i+1 << \"o. aluno\" << endl;\n        cin >> nota;\n        media += nota;\n    }\n    media /= n;\n    cout << \"media dos alunos: \" << media << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-10",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-10",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplos Atípicos\n\nQuantas vezes é executado o laço a seguir? n vezes?\n\nfor(i = 0; i <= n; i++){\n    ...\n}\n\nQuantas vezes é executado o laço a seguir?\n\nfor(i = n; i > 0; i++){\n    ...\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#lista-de-presença",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#lista-de-presença",
    "title": "Comando de Repetição for",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230829"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-11",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-11",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 2\nImplemente um programa que lê um número n e em seguida, imprime os n primeiros números pares na tela. Considere o número 0 como o primeiro par."
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-12",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-12",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 2: Solução\nint main(){\n    int i, n;\n    cout << \"Digite n\\n\";\n    cin >> n;\n    for(i = 0; i < 2*n; i += 2){\n        cout << i << endl;\n    }\n    return 0;\n}\nObviamente, há outras formas de se implementar este programa"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-13",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-13",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 3\nImplemente um programa que imprime na tela em forma de tabela as seguintes contagens:\n\nDe 1 a 100\nDe 10 a 1000 (incrementando o contador de 10 em 10)\nDe 100 a 1 (em ordem decrescente)"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-14",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-14",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nSaída esperada para o exercício 3:\n\n\n\n1\n10\n100\n\n\n\n\n2\n20\n99\n\n\n3\n30\n98\n\n\n…\n…\n…\n\n\n100\n1000\n1"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-15",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-15",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 3: Solução\nint main(){\n    int i;\n    for(i = 1; i <= 100; i++){\n        cout << i << \" \"\n             << 10*i << \" \"\n             << 101-i << endl;\n    }\n    return 0;\n}\nÉ possível implementar o programa com o uso de variáveis adicionais"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-16",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-16",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 4\nImplemente um programa que lê um número n e em seguida, lê n caracteres. O programa deve exibir a quantidade de caracteres digitados que são letras minúsculas."
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-17",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-17",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 4: Solução\nint main(){\n    char car;\n    int n, cont = 0;\n    cout << \"Informe a quantidade de caracteres:\\n\";\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        cout << \"Informe um caractere\\n\";\n        cin >> car;\n        if(car >= 'a' && car <= 'z'){\n            cont++;\n        }\n    }\n    cout << cont << \" letras minusculas digitadas\\n\";\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-18",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-18",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 5\nFaça um programa que lê um número n e um número m. Em seguida, o seu programa deve exibir na tela as m primeiras potências positivas dos n primeiros números positivos. As potências devem estar separadas por linha."
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-19",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-19",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo de execução:\nInforme a quantidade de numeros\n5\nInforme a quantidade de potencias\n4\nPotencias:\n1 1 1 1 \n2 4 8 16 \n3 9 27 81 \n4 16 64 256 \n5 25 125 625"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#sumário",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#sumário",
    "title": "Comando de Repetição for",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição for\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-20",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-20",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 5: Solução\nint main(){\n    int i, j, n, m;\n    cout << \"Informe a quantidade de numeros\\n\";\n    cin >> n;\n    cout << \"Informe a quantidade de potencias\\n\";\n    cin >> m;\n    for(i = 1; i <= n; i++){\n        for(j = 1; j <= m; j++){\n            cout << pow(i,j) << \" \"; \n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação",
    "title": "Comando de Repetição while",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComando de repetição for\n\nAula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação-1",
    "title": "Comando de Repetição while",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComando de repetição for\n\nAula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-1",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado: o for repete instruções por um determinado número de vezes (aula anterior)\nComando de repetição condicional: o while repete instruções enquanto uma condição é verdadeira"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-2",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-2",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nImplemente um programa que escreva na tela \"vou estudar lip\" enquanto um número lido não for 0"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nSintaxe:\nwhile(condicao){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\n\nExecuta enquanto a condição é verdadeira\nCondição é qualquer expressão e é obrigatória (é convertida implicitamente em expressão lógica)\nA condição é testada antes de cada iteração"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-2",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-2",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nDevemos nos certificar de dois itens para garantir o seu funcionamento de forma correta:\n\nQue a condição tem a possibilidade de ser verdadeira ao ser testada pela primeira vez\nQue a condição vai se tornar falsa, em algum momento"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-3",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-3",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExemplo\nint main(){\n    int i = 0, n;\n    cin >> n;\n    while(i < n){\n        cout << \"i: \" << i << endl;\n        i++;\n    }\n    return 0;\n}\n\nQual a saída deste programa?\nComo foram garantidos os dois itens necessários?"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-3",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-3",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nVoltando ao exemplo inicial: agora sim, vimos o que é necessário\nint main(){\n    int n;\n    cout << \"Digite um numero\\n\";\n    cin >> n;\n    while(n != 0){\n        cout << \"vou estudar lip\\n\";\n        cout << \"Digite um numero\\n\";\n        cin >> n;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-4",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-4",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDiferenças entre while e for\n\nO comando while é apropriado para repetição condicional\n\nÉ possível utilizá-lo para repetição contada, embora isto seja mais propenso a erros\n\nO comando for é apropriado para repetição contada\n\nÉ possível utilizá-lo para repetição condicional, embora o código resultante fique menos intuitivo"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-5",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-5",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-4",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-4",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExercício 1\nFaça um programa que lê vários números e informa se cada um deles é par ou ímpar. O programa deve se encerrar quando for digitado um número negativo."
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-5",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-5",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nAntes de programar, precisamos identificar:\n\nVariáveis do programa\nEntrada e saída do programa\nO que deve ser repetido\nExpressão lógica para repetição"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-6",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-6",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExercício 1: Solução\nint main(){\n    int x;\n    cout << \"Informe um numero\\n\";\n    cin >> x;\n    while(x >= 0){\n        if(x % 2 == 0){\n            cout << x << \" e um numero par\\n\";\n        }\n        else{\n            cout << x << \" e um numero impar\\n\";\n        }\n        cout << \"Informe um numero\\n\";\n        cin >> x;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while",
    "title": "Comando de Repetição while",
    "section": "Comando do-while",
    "text": "Comando do-while\n\nA linguagem C++ oferece também o comando do-while (faça-enquanto)\nSintaxe:\n\ndo{\n    comando1;\n    ...\n    comandoN;\n} while(condicao);"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando do-while",
    "text": "Comando do-while\nDiferença para o while: a condição é testada após a execução do corpo\n\nNo comando while, o corpo pode não ser executado nenhuma vez\nNo comando do-while, o corpo é executado pelo menos uma vez"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nErros Comuns\n\nNão garantir que a condição pode ser verdadeira ao ser testada pela primeira vez (while)\nNão garantir que a condição vai se tornar falsa na lógica do algoritmo\nInverter condição: a expressão lógica deve ter valor verdadeiro para que o laço execute"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#lista-de-presença",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#lista-de-presença",
    "title": "Comando de Repetição while",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230831"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while",
    "title": "Comando de Repetição while",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 2\nImplemente um programa que lê um número inteiro positivo n e em seguida, imprime o quociente e o resto da divisão de n por 10. O seu programa deve checar se o usuário digitou um número inteiro positivo, solicitando ao mesmo para redigitá-lo se não for o caso."
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 2: Solução\nint main(){\n    int x;\n    do{\n        cout << \"Insira um numero inteiro\n                 e positivo\\n\";\n        cin >> x;\n    } while(x < 0);\n\n    cout << \"q: \" << x/10\n         << \", r:\" << x%10 << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-break-e-continue",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-break-e-continue",
    "title": "Comando de Repetição while",
    "section": "Comandos break e continue",
    "text": "Comandos break e continue\n\nComandos que podem ser utilizados dentro de for, while e do-while:\n\nComando break: utilizado para encerrar o laço em que o comando break se encontra\nComando continue: utilizado para ignorar a iteração atual do laço e forçar a próxima iteração\n\nNo geral, há alternativas que tornam ambos os comandos opcionais"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break",
    "title": "Comando de Repetição while",
    "section": "Comando break",
    "text": "Comando break\nMenu com break\nO comando break pode ser usado em menus:\nint main(){\n    char c1;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> c1;\n        if(c1 == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(c1 == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(c1 == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(c1 == 's'){\n            cout << \"Vc escolheu sair\\n\";\n            break;\n        }\n    }while(true);\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break-1",
    "title": "Comando de Repetição while",
    "section": "Comando break",
    "text": "Comando break\nMenu sem break\nO mesmo menu pode ser implementado sem break:\nint main(){\n    char o;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> o;\n        if(o == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(o == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(o == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(o == 's'){\n            cout << \"Vc escolheu sair\\n\";\n        }\n    }while(o != 's');\n    return 0;"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue",
    "title": "Comando de Repetição while",
    "section": "Comando continue",
    "text": "Comando continue\nExemplo de Uso\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 == 0){\n            continue;\n        }\n        s += i;\n    }\n    cout << s << endl;\n    return 0;\n}\nO que faz este programa?"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue-1",
    "title": "Comando de Repetição while",
    "section": "Comando continue",
    "text": "Comando continue\nPrograma equivalente sem continue\nO mesmo programa pode ser implementado sem continue:\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 != 0){\n            s += i;\n        }\n    }\n    cout << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 3\nImplemente um programa que lê a população no ano corrente de dois países, A e B. O país A tem taxa de crescimento de 2% ao ano, enquanto o país B cresce 4% ao ano. Supondo que a população do país A é maior do que a do país B, o seu programa deve informar em quantos anos a população do país B ultrapassará a população do país A."
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-2",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-2",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 3: Solução\nint main(){\n    int anos = 0;\n    int pop_a, pop_b;\n\n    cout << \"Insira as populacoes iniciais:\\n\";\n    cin >> pop_a >> pop_b;\n\n    while(pop_b <= pop_a){\n        pop_a *= 1.02;\n        pop_b *= 1.04;\n        anos++;\n    }\n    cout << \"A populacao do pais B ultrapassa\n             a do pais A em \"\n         << anos << \" anos.\\n\";\n    \n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#sumário",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#sumário",
    "title": "Comando de Repetição while",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#objetivo-da-aula",
    "href": "slides/07-funcoes1/07-funcoes1.html#objetivo-da-aula",
    "title": "Funções I",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\n\nMotivar o uso de funções\nApresentar as construções oferecidas em C++ para a implementação de programas com funções"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#função",
    "href": "slides/07-funcoes1/07-funcoes1.html#função",
    "title": "Funções I",
    "section": "Função",
    "text": "Função\n\nVariáveis guardam valores de diferentes tipos\n\nchar, int, float, bool\n\nE se pudéssemos atribuir não um valor, mas sim, um trecho de código a um nome, similar a uma variável?\nIsto é exatamente o que acontece com funções em linguagens de programação"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#função-1",
    "href": "slides/07-funcoes1/07-funcoes1.html#função-1",
    "title": "Funções I",
    "section": "Função",
    "text": "Função\n\nFunção: conjunto de comandos (trecho de código) que realizam uma tarefa em particular\nTambém chamada de subprograma\nCada função recebe um nome e através deste, pode ser executada\nUso de funções organiza, simplifica e reduz programas"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#função-2",
    "href": "slides/07-funcoes1/07-funcoes1.html#função-2",
    "title": "Funções I",
    "section": "Função",
    "text": "Função\nExemplos de funções conhecidas:\n\nsqrt\npow\nsin\ncos\ntan\nrand"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#chamadas-de-funções---exemplo-1",
    "href": "slides/07-funcoes1/07-funcoes1.html#chamadas-de-funções---exemplo-1",
    "title": "Funções I",
    "section": "Chamadas de Funções - Exemplo 1",
    "text": "Chamadas de Funções - Exemplo 1\nO que faz o seguinte programa?\nint main(){\n    int x, r;\n    cin >> x;\n    r = sqrt(x);\n    cout << x << \", \" << r << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#chamadas-de-funções---exemplo-2",
    "href": "slides/07-funcoes1/07-funcoes1.html#chamadas-de-funções---exemplo-2",
    "title": "Funções I",
    "section": "Chamadas de Funções - Exemplo 2",
    "text": "Chamadas de Funções - Exemplo 2\nO que faz o seguinte programa?\nint main(){\n    float x, y;\n    cin >> x >> y;\n    cout << sin(x)/cos(y) << endl; \n    return 0;\n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#programas-que-chamam-funções",
    "href": "slides/07-funcoes1/07-funcoes1.html#programas-que-chamam-funções",
    "title": "Funções I",
    "section": "Programas que Chamam Funções",
    "text": "Programas que Chamam Funções\n\nVocês já utilizaram funções em vários programas:\n\nVocê como programador foi usuário de funções\nO seu programa (programa usuário) continha chamadas de funções\nAs funções que você usou foram implementadas por outro programador"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#programas-que-chamam-funções-1",
    "href": "slides/07-funcoes1/07-funcoes1.html#programas-que-chamam-funções-1",
    "title": "Funções I",
    "section": "Programas que Chamam Funções",
    "text": "Programas que Chamam Funções\nA chamada de uma função funciona exatamente como uma variável:\n\nResulta em um valor que pode ser usado em expressões"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#programas-que-chamam-funções-2",
    "href": "slides/07-funcoes1/07-funcoes1.html#programas-que-chamam-funções-2",
    "title": "Funções I",
    "section": "Programas que Chamam Funções",
    "text": "Programas que Chamam Funções\n\nPrincipal vantagem de chamar funções: não é necessário saber como uma função está implementada para utilizá-la\nExemplo: função cos(x) computa o cosseno de x com o polinômio de MacLaurin:\n\n\ncos(x) = \\sum_{n=0}^{\\infty}\\frac{(-1)^{n}}{(2n)!}x^{2n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#implementação-de-funções",
    "href": "slides/07-funcoes1/07-funcoes1.html#implementação-de-funções",
    "title": "Funções I",
    "section": "Implementação de Funções",
    "text": "Implementação de Funções\nLinguagens de programação estruturadas oferecem uma sintaxe para implementação de funções\nAlém da sintaxe, é preciso saber:\n\nAs entradas do subprograma (parâmetros da função)\nComo o subprograma deve operar (código da função)\nO que o subprograma deve computar (saída da função)"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#implementação-de-funções-1",
    "href": "slides/07-funcoes1/07-funcoes1.html#implementação-de-funções-1",
    "title": "Funções I",
    "section": "Implementação de Funções",
    "text": "Implementação de Funções\n\n\n\n\n\n\nA implementação de uma função é dividida entre a sua assinatura e as instruções que compõem a sua definição"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\nTambém chamadas de cabeçalhos ou protótipos da função\nDevem estar fora e antes do bloco main"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-1",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-1",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\ntipo_da_funcao é o tipo do valor computado pela função: int, char, float, bool ou o novo tipo void"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-2",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-2",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\nnome_da_funcao segue as mesmas regras que usamos para nomear variáveis"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-3",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-3",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\nParâmetros (ou argumentos) são variáveis das quais a função depende para computar o seu retorno\nA lista de parametros contém pares tipo/nome para cada parâmetro, sendo cada par separado por vírgula"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-4",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-4",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nExercício\nEscrever assinaturas para as funções abaixo:\n\nsqrt: raíz quadrada de um número real\npow: eleva uma base a uma potência\nrand: gera um número aleatório\nFunção que converte um número ASCII num caractere\nFunção que retorna verdadeiro caso o número seja primo e falso caso contrário"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-5",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-5",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nExercício: solução\n1. float sqrt(float x);\n2. float pow(float b, float e);\n3. int rand();\n4. char converte_caractere(int cod);\n5. bool eh_primo(int num);"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-6",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-6",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nA assinatura de uma função define uma relação entre suas entradas e sua saída\n\nNos parâmetros da função estão as suas entradas\nNo tipo de retorno da função está a sua saída"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-7",
    "href": "slides/07-funcoes1/07-funcoes1.html#assinaturas-de-funções-7",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nObserve que:\n\nAlgumas funções não têm entrada\nAlgumas funções não retornam nada\nAlgumas funções possuem mais de uma saída\n\nOs dois últimos pontos acima serão vistos nas próximas aulas"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#lista-de-presença",
    "href": "slides/07-funcoes1/07-funcoes1.html#lista-de-presença",
    "title": "Funções I",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230905"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros){\n    corpo da funcao\n}\n\nUma função é definida quando programamos o seu comportamento com instruções válidas\nA definição de uma função deve vir após o bloco main"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-1",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-1",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo: programa que converte temperatura em graus Celsius para Fahrenheit, sabendo-se que\n\nf(c) = 1,8c + 32\n\n\nSem usar função\nUtilizando função"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-2",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-2",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo: função que converte temperatura em Celsius para Fahrenheit\nfloat converte_temp(float c){\n    return 1.8*c + 32;\n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-3",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-3",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo: programa completo com função que converte temperatura em Celsius para Fahrenheit\nfloat converte_temp(float c);\nint main(){\n    float tc;\n\n    cout << \"Insira a temperatura em Celsius:\\n\";\n    cin >> tc;\n    cout << \"Temperatura em Fahrenheit: \" << converte_temp(tc) << endl;\n    return 0;\n}\nfloat converte_temp(float c){\n    return 1.8*c + 32;\n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-4",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-4",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\n\nA lista de parâmetros define variáveis locais (existentes somente dentro da função)\nQualquer instrução é permitida no corpo da função, inclusive chamadas a outras funções (ou a ela mesma)"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-5",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-5",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nComando return:\n\nUsado junto com qualquer expressão válida em C++\nConverte a expressão no tipo de retorno da função\nEncerra a função e retorna a execução do programa para a instrução seguinte à chamada a ela realizada"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-6",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-6",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nVariáveis locais de uma função:\n\nVariáveis que podem ser declaradas dentro da função\nNão são visíveis fora da função\nVariável local com mesmo nome de variável em outra função: não são as mesmas!\nCada parâmetro da função também é uma variável local"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-7",
    "href": "slides/07-funcoes1/07-funcoes1.html#definição-de-funções-7",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo anterior com variável local:\nfloat converte_temp(float c){\n    float f;\n    f = 1.8*c + 32;\n    return f;\n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#função-main",
    "href": "slides/07-funcoes1/07-funcoes1.html#função-main",
    "title": "Funções I",
    "section": "Função main",
    "text": "Função main\nMotivo pelo qual todo programa deve conter int main() e return 0:\n\n\n\n\n\n\nTodo programa em C++ deve obrigatoriamente conter uma função chamada main que retorna um número inteiro. Assim, o sistema operacional (Windows, Linux, etc.) sabe a função a ser chamada quando ele deseja executar um programa."
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#programa-com-função",
    "href": "slides/07-funcoes1/07-funcoes1.html#programa-com-função",
    "title": "Funções I",
    "section": "Programa com Função",
    "text": "Programa com Função\nExercício\nImplemente uma função chamada eh_primo, que receba como parâmetro um número inteiro. A função deve retornar verdadeiro caso o número seja primo ou falso caso contrário.\nA função main é dada e contém o código do programa usuário da função que você deve implementar (slide a seguir)."
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#programa-com-função-1",
    "href": "slides/07-funcoes1/07-funcoes1.html#programa-com-função-1",
    "title": "Funções I",
    "section": "Programa com Função",
    "text": "Programa com Função\nExercício: programa usuário da Função\nint main(){\n    int num;\n    cout << \"Insira um numero inteiro:\\n\";\n    cin >> num;\n\n    if(eh_primo(num) == true){\n        cout << num << \" eh primo\\n\";\n    }\n    else{\n        cout << num << \" nao eh primo\\n\";\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#programa-com-função-2",
    "href": "slides/07-funcoes1/07-funcoes1.html#programa-com-função-2",
    "title": "Funções I",
    "section": "Programa com Função",
    "text": "Programa com Função\nExercício: Solução\nbool eh_primo(int x);\nint main(){\n    int num;\n    cout << \"Insira um numero inteiro:\\n\";\n    cin >> num;\n\n    if(eh_primo(num) == true){\n        cout << num << \" eh primo\\n\";\n    }\n    else{\n        cout << num << \" nao eh primo\\n\";\n    }\n    return 0;\n}\nbool eh_primo(int x){\n    int i, cont = 0;\n\n    for(i = 1; i <= x; i++){\n        if(x % i == 0){\n            cont++;\n        }\n    }\n    return (cont == 2);\n}"
  },
  {
    "objectID": "slides/07-funcoes1/07-funcoes1.html#sumário",
    "href": "slides/07-funcoes1/07-funcoes1.html#sumário",
    "title": "Funções I",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nChamada de funções\nAssinatura de funções\nDefinição de funções\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#aula-anterior",
    "href": "slides/08-funcoes2/08-funcoes2.html#aula-anterior",
    "title": "Funções II",
    "section": "Aula Anterior",
    "text": "Aula Anterior\nAula anterior: uso de funções em C++\n\nChamada a funções\nAssinatura de funções\nDefinição de funções"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções",
    "title": "Funções II",
    "section": "Funções",
    "text": "Funções\nRevisando a ideia de funções:\n\nParâmetros são a porta de entrada de funções\nO tipo de retorno é a sua saída\n\n\nEste mecanismo estabelece uma forma de uma função “conversar” com uma outra Por exemplo: função main que faz uma chamada à função sqrt"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-1",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-1",
    "title": "Funções II",
    "section": "Funções",
    "text": "Funções\nDevemos ter em mente que:\n\nNem sempre uma função deve retornar um resultado\nÉ possível que uma função modifique o valor dos parâmetros, de forma que esta modificação seja válida fora da função"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#objetivos-da-aula",
    "href": "slides/08-funcoes2/08-funcoes2.html#objetivos-da-aula",
    "title": "Funções II",
    "section": "Objetivos da Aula",
    "text": "Objetivos da Aula\n\nIntroduzir o conceito de função sem retorno\nIntroduzir o conceito de passagem de parâmetro por valor e passagem de parâmetro por referência"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#assinaturas-de-funções",
    "href": "slides/08-funcoes2/08-funcoes2.html#assinaturas-de-funções",
    "title": "Funções II",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\ntipo_da_funcao é o tipo do valor computado pela função: int, char, float, bool ou o novo tipo void"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nFunções sem retorno:\n\nTambém conhecidas como procedimentos\nÚtil para funções que devem escrever na tela\nEscrever na tela com comando cout não é retorno\nTipo da função deve ser void"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-1",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-1",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nFunções sem retorno:\n\nÚtil também para funções que devem modificar os seus parâmetros\nComando return não é obrigatório\n\nPode ser opcionalmente utilizado com a forma return; (sem nenhuma expressão) para encerrar a função"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-2",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-2",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nExercício\nEscrever assinaturas para as funções abaixo:\n\nFunção que imprime na tela o caractere correspondente a um número ASCII\nFunção que imprime na tela o menor dentre três números reais\nFunção que imprime na tela uma mensagem informando se o número é primo ou não"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#assinaturas-de-funções-1",
    "href": "slides/08-funcoes2/08-funcoes2.html#assinaturas-de-funções-1",
    "title": "Funções II",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nExercício: Solução\n1. void imprime_caractere(int cod);\n2. void imprime_menor(float x, float y, float z);\n3. void informa_primo(int x);"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-3",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-3",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nFunção que imprime na tela o caractere correspondente a um número:\nvoid imprime_caractere(int n);\n\nint main(){\n    int x;\n    cout << \"Insira um num. inteiro entre 0 e 255:\\n\";\n    cin >> x;\n    imprime_caractere(x); //observe a chamada à função\n    return 0;\n}\n\nvoid imprime_caractere(int n){\n    cout << \"Caractere: \" << char(n) << endl;\n}"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-4",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-4",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nÉ preciso estar claro a diferença entre:\n\nUma função que retorna um valor, ex:\n\nchar converte_numero(int cod);\n\nUma outra função que imprime o mesmo valor, ex:\n\nvoid imprime_caractere(int cod);"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-5",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-5",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nPara entender esta diferença, imagine o seguinte exemplo hipotético:\n\nUm programa no computador A faz uma chamada a uma função a ser executada no computador B\nA função no computador B é executada\n\nO resultado não é retornado: ele é exibido na tela\nEntretanto, o resultado será exibido na tela do computador B\n\nO programa no computador A não tem acesso ao resultado calculado pela função"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-6",
    "href": "slides/08-funcoes2/08-funcoes2.html#funções-sem-retorno-6",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#lista-de-presença",
    "href": "slides/08-funcoes2/08-funcoes2.html#lista-de-presença",
    "title": "Funções II",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230914"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#passagem-de-parâmetros",
    "href": "slides/08-funcoes2/08-funcoes2.html#passagem-de-parâmetros",
    "title": "Funções II",
    "section": "Passagem de Parâmetros",
    "text": "Passagem de Parâmetros\nDentro do corpo de funções, os parâmetros são variáveis locais. Observe então se o código a seguir está correto:\nvoid troca(int a, int b);\n\nint main(){\n    int n1, n2;\n    cout << \"Insira dois numeros inteiros:\\n\";\n    cin >> n1 >> n2;\n    troca(n1, n2);\n    cout << \"n1: \" << n1 << \" n2: \" << n2 << endl;\n    return 0;\n}\n\nvoid troca(int a, int b){\n    int aux = a;\n    a = b;\n    b = aux;\n}"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#passagem-de-parâmetros-1",
    "href": "slides/08-funcoes2/08-funcoes2.html#passagem-de-parâmetros-1",
    "title": "Funções II",
    "section": "Passagem de Parâmetros",
    "text": "Passagem de Parâmetros\n\nAté agora, utilizamos passagem de parâmetro por valor\n\nO valor da variável utilizada na chamada é copiado para o parâmetro da função\n\nAlternativa: passagem de parâmetro por referência\n\nA variável em si é passada como parâmetro\n\nMesma posição (referência) na memória\n\nUso do operador de referência: &\n\nDeve ser usado em cada parâmetro que deve ser modificado"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#passagem-de-parâmetros-2",
    "href": "slides/08-funcoes2/08-funcoes2.html#passagem-de-parâmetros-2",
    "title": "Funções II",
    "section": "Passagem de Parâmetros",
    "text": "Passagem de Parâmetros\nSolução correta (com passagem de parâmetro por referência):\nvoid troca(int& a, int& b);\n\nint main(){\n    int n1, n2;\n    cout << \"Insira dois numeros inteiros:\\n\";\n    cin >> n1 >> n2;\n    troca(n1, n2);\n    cout << \"n1: \" << n1 << \" n2: \" << n2 << endl;\n    return 0;\n}\n\nvoid troca(int& a, int& b){\n    int aux = a;\n    a = b;\n    b = aux;\n}"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#exercício-1",
    "href": "slides/08-funcoes2/08-funcoes2.html#exercício-1",
    "title": "Funções II",
    "section": "Exercício",
    "text": "Exercício\nImplemente uma função que receba como parâmetro três números inteiros e que armazene no primeiro parâmetro o menor dos números, no segundo o segundo menor e no terceiro o maior.\nEscreva a função main, para ler os três números do usuário, chamar a função e exibir na tela os números em ordem crescente e a média entre o menor e o maior.\nUtilize a função troca na sua implementação."
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#exercício-solução-1",
    "href": "slides/08-funcoes2/08-funcoes2.html#exercício-solução-1",
    "title": "Funções II",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\nvoid troca(int& x, int& y);\nvoid ordena_crescente(int& a, int& b, int& c);\n\nint main(){\n    int x, y, z;\n    cout << \"Insira tres nrs.\\n\";\n    cin >> x >> y >> z;\n\n    ordena_crescente(x,y,z);\n    cout << \"Menor: \" << x << endl;\n    cout << \"Meio: \" << y << endl;\n    cout << \"Maior: \" << z << endl;\n    cout << \"Media: \" << float(x + z)/2 << endl;\n    return 0;\n}\n\nvoid troca(int& x, int& y){\n    int aux = x;\n    x = y;\n    y = aux;\n}\n\nvoid ordena_crescente(int& a, int& b, int& c){\n    int aux;\n    if(a > c){\n        troca(a, c);\n    }\n    if(a > b){\n        troca(a, b);\n    }\n    if(b > c){\n        troca(b, c);\n    }\n}"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#exercício-solução-2",
    "href": "slides/08-funcoes2/08-funcoes2.html#exercício-solução-2",
    "title": "Funções II",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\nObserve que:\n\nA função ordena_crescente chama a função troca na sua solução\nA ordem das trocas é importante (a 1a. comparação precisa ser entre o 1o. e 3o. parâmetros)"
  },
  {
    "objectID": "slides/08-funcoes2/08-funcoes2.html#sumário",
    "href": "slides/08-funcoes2/08-funcoes2.html#sumário",
    "title": "Funções II",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nFunções sem retorno\nPassagem de parâmetro por valor e por referência\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#linguagem-de-programação",
    "href": "slides/09-funcoes3/09-funcoes3.html#linguagem-de-programação",
    "title": "Funções III",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nAulas anteriores:\n\nSintaxe em C++ para construção de funções (chamada, assinatura e definição)\nFunção com tipo void\nPassagem de parâmetro por valor e por referência"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#objetivo-da-aula",
    "href": "slides/09-funcoes3/09-funcoes3.html#objetivo-da-aula",
    "title": "Funções III",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nExplorar o conceito de entrada/saída nos parâmetros de funções"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência",
    "href": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\n\nUso de operador &\nÚtil quando:\n\nUma função deve modificar os seus parâmetros\nUma função deve retornar mais de um valor"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência-1",
    "href": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência-1",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\nPermite trabalhar com parâmetros:\n\nDe entrada: parâmetros necessários para computar a função\nDe entrada e saída: parâmetros necessários para computar a função e usados para armazenar os resultados da função\nDe saída: parâmetros usados apenas para armazenar os resultados da função"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência-2",
    "href": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência-2",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\nExemplo com Parâmetro de Saída\n\nParâmetro(s) pode(m) ser usado(s) para armazenar resultado(s) de uma função\nExemplo: função que converte temperatura em graus Celsius para Fahrenheit, armazenando o resultado em um parâmetro de saída\n\nvoid converte_temp(float c, float& f){\n    f = 1.8*c + 32;\n}"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência-3",
    "href": "slides/09-funcoes3/09-funcoes3.html#passagem-de-parâmetros-por-referência-3",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\nExemplo com Parâmetro de Saída\nChamada à função:\nint main(){\n    float ce, fa;\n    cin >> ce;\n    converte_temp(ce, fa);\n    cout << \"Temp. em Fahrenheit: \" << fa << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções",
    "href": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\n\nFunção que gera um número aleatório:\n\nint rand();\n\nFunção que computa o produto entre dois números inteiros:\n\nint produto(int x, int y);\nvoid produto(int x, int y, int& r);"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções-1",
    "href": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções-1",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\n\nFunção que gera um número aleatório:\n\nint rand(); \\rightarrow nenhum parâmetro\n\nFunção que computa o produto entre dois números inteiros:\n\nint produto(int x, int y); \\rightarrow 2 parâmetros de entrada\nvoid produto(int x, int y, int& r); \\rightarrow 2 parâmetros de entrada e 1 de saída"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções-2",
    "href": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções-2",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\n\nFunção que troca o valor de dois números inteiros:\n\nvoid troca(int& x, int& y);\n\nFunção que calcula o quociente e resto entre dois números inteiros:\n\nvoid quoc_resto(int& x, int& y);\nvoid quoc_resto(int x, int y, int& q, int& r);}"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções-3",
    "href": "slides/09-funcoes3/09-funcoes3.html#parâmetros-de-funções-3",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\n\nFunção que troca o valor de dois números inteiros:\n\nvoid troca(int& x, int& y); \\rightarrow 2 parâmetros de entrada e saída, ao mesmo tempo\n\nFunção que calcula o quociente e resto entre dois números inteiros:\n\nvoid quoc_resto(int& x, int& y); \\rightarrow 2 parâmetros de entrada e saída, ao mesmo tempo\nvoid quoc_resto(int x, int y, int& q, int& r);} \\rightarrow 2 entradas, 2 saídas"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#lista-de-presença",
    "href": "slides/09-funcoes3/09-funcoes3.html#lista-de-presença",
    "title": "Funções III",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230919"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#funções-com-múltiplas-saídas",
    "href": "slides/09-funcoes3/09-funcoes3.html#funções-com-múltiplas-saídas",
    "title": "Funções III",
    "section": "Funções com Múltiplas Saídas",
    "text": "Funções com Múltiplas Saídas\n\nFunções com múltiplas saídas são em geral mais complexas\nDica: dividir o problema\n\nIdentifique cada saída a ser computada pelo algoritmo\nVerifique se é melhor implementar uma função auxiliar para calcular cada saída\nChame as funções auxiliares dentro da função solicitada"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#exercício-1",
    "href": "slides/09-funcoes3/09-funcoes3.html#exercício-1",
    "title": "Funções III",
    "section": "Exercício 1",
    "text": "Exercício 1\nImplemente uma função que receba como parâmetros de entrada dois números inteiros x e y. A sua função deve armazenar em um primeiro parâmetro de saída o fatorial de x, o fatorial de y em um segundo parâmetro e x^y em um terceiro.\nA função main deve ler dois números inteiros entre 0 e 10 do usuário, passá-los como parâmetro para a função implementada e exibir as três saídas da função.\nNão utilize a função pow."
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#exercício-1-1",
    "href": "slides/09-funcoes3/09-funcoes3.html#exercício-1-1",
    "title": "Funções III",
    "section": "Exercício 1",
    "text": "Exercício 1\nImplemente uma função que receba como parâmetro de entrada um número inteiro positivo denotando o primeiro termo da sequência. A função a ser implementada deve armazenar em parâmetros de saída o maior número que faz parte da sequência e também o total de termos n que compõe a sequência.\nImplemente a função main para testar o seu programa."
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#exercício-1-solução",
    "href": "slides/09-funcoes3/09-funcoes3.html#exercício-1-solução",
    "title": "Funções III",
    "section": "Exercício 1: Solução",
    "text": "Exercício 1: Solução\nint fatorial(int n);\nint potencia(int b, int e);\nvoid fat_pot(int x, int y, int& f1, int& f2, int& p);\n\nint main(){\n    int n1, n2, r1, r2, r3;\n    cout << \"Insira dois numeros:\\n\";\n    cin >> n1 >> n2;\n    fat_pot(n1, n2, r1, r2, r3);\n    cout << \"Fatorial1: \" << r1 << endl;\n    cout << \"Fatorial2: \" << r2 << endl;\n    cout << \"Potencia: \" << r3 << endl;\n    return 0;\n}\nint fatorial(int n){\n    int i, r = 1;\n    for(i = 1; i <= n; i++){\n        r *= i;\n    }\n    return r;\n}\nint potencia(int b, int e){\n    int i, r = 1;\n    for(i = 1; i <= e; i++){\n        r *= b;\n    }\n    return r;\n}\nvoid fat_pot(int x, int y, int& f1, int& f2, int& p){\n    f1 = fatorial(x);\n    f2 = fatorial(y);\n    p = potencia(x, y);\n}"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#exercício-2",
    "href": "slides/09-funcoes3/09-funcoes3.html#exercício-2",
    "title": "Funções III",
    "section": "Exercício 2",
    "text": "Exercício 2\nA sequência de Collatz, é gerada pelas seguintes regras:\n\nO termo inicial é um número dado\nSe o termo atual for par, o próximo termo é igual ao atual dividido por dois\nSe o termo atual for ímpar, o próximo termo é igual a três vezes o atual mais um\nA sequência é encerrada quando o termo atual é igual a 1\n\nPor exemplo, para um termo inicial igual a 10, a sequência gerada é 10, 5, 16, 8, 4, 2, 1."
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#exercício-2-solução",
    "href": "slides/09-funcoes3/09-funcoes3.html#exercício-2-solução",
    "title": "Funções III",
    "section": "Exercício 2: Solução",
    "text": "Exercício 2: Solução\nvoid maior_total_collatz(int t_ini, int& maior,\n                         int& total);\n\nint main(){\n    int val_ini, val_maior, quant;\n    cout << \"Insira o valor inicial da sequencia:\\n\";\n    cin >> val_ini;\n    maior_total_collatz(val_ini, val_maior, quant);\n    cout << \"Maior valor: \" << val_maior << endl;\n    cout << \"Total de termos: \" << quant << endl;\n    return 0;\n}\nvoid maior_total_collatz(int t_ini, int& maior,\n                         int& total){\n    int termo = maior = t_ini;\n    total = 1;\n    while(termo != 1){\n        if(termo % 2 == 0){\n            termo = termo/2;\n        }\n        else{\n            termo = 3*termo + 1;\n        }\n        if(termo > maior){\n            maior = termo;\n        }\n        total++;\n    }\n}"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#sumário",
    "href": "slides/09-funcoes3/09-funcoes3.html#sumário",
    "title": "Funções III",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nParâmetros de entrada, saída e de entrada e saída\nFunções que chamam outras funções para simplificar a lógica de programas\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 1: Função pow\nImplemente uma função que opere de forma idêntica à função pow: receba como parâmetros a base (nr. real) e expoente (nr. inteiro) e retorne a potência resultante.\nImplemente também a função main, que deve ler do usuário a base e expoente exibir o resultado de uma chamada à função solicitada."
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-1",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-1",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 1 - Solução\n#include <iostream>\n\nusing namespace std;\n\nint abs(int e);\nfloat pow(float b, int e);\n\nint main(){\n\n    float x;\n    int y;\n\n    cout << \"Insira a base e expoente: \";\n    cin >> x >> y;\n\n    cout << \"Resultado: \" << pow(x, y) << endl;\n\n    return 0;\n}\n\nint abs(int e){\n    if(e < 0){\n        return -e;\n    }\n    else{\n        return e;\n    }\n}\n\nfloat pow(float b, int e){\n    float r = 1;\n    int i;\n\n    for(i = 0; i < abs(e); i++){\n        r = r*b;\n    }\n\n    if(e < 0){\n        return 1/r;\n    }\n    else{\n        return r;\n    }\n}"
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-2",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-2",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 2: Número Perfeito\nChama-se número perfeito um número que é igual à soma dos seus divisores próprios (todos os divisores exceto ele mesmo).\nPor exemplo, 6 é um número perfeito, já que 6 = 1 + 2 + 3."
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-3",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-3",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 2: Número Perfeito\nImplemente uma função que receba como parâmetro um número inteiro e retorne verdadeiro se o número for perfeito ou falso caso contrário.\nImplemente também a função main, que deve ler do usuário um número inteiro e exibir uma mensagem de acordo com o resultado de uma chamada à função solicitada.\nExemplo:\nEntrada: 6\nSaída: 6 e um numero perfeito"
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-4",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-4",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 2 - Solução\nbool eh_perfeito(int x);\nint main(){\n\n    int num;\n\n    cout << \"Insira um numero inteiro:\\n\";\n    cin >> num;\n\n    if(eh_perfeito(num) == true){\n        cout << num << \" e um numero perfeito\\n\";\n    }\n    else{\n        cout << num << \" nao e um numero perfeito\\n\";\n    }\n\n    return 0;\n}\n\nbool eh_perfeito(int x){\n    int i, soma = 0;\n\n    for(i = 1; i < x; i++){\n        if(x % i == 0){\n            soma += i;\n        }\n    }\n\n    if(soma == x){\n        return true;\n    }\n    else{\n        return false;\n    }\n}"
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-5",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-5",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 3: Sequência de Fibonacci\nImplemente uma função que receba como parâmetro um número n e retorne o n-ésimo termo da sequência de Fibonacci. A sequência de Fibonacci tem o termo 0 e 1 iguais a a 0 e 1 respectivamente, e todos os demais calculados como a soma dos dois anteriores.\nA função main deve ler do usuário um nr. inteiro n e imprimir do termo 0 ao termo n da sequência de acordo com chamadas à função solicitada."
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#lista-de-presença",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#lista-de-presença",
    "title": "Funções - Exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230912"
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#linguagem-de-programação",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#linguagem-de-programação",
    "title": "Funções - Exercícios",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nExercício 3\nImplemente uma função que receba como parâmetro um número inteiro.\nA função deve retornar a soma dos dígitos do parâmetro informado.\nImplemente a função main, de forma que ela leia do usuário um número inteiro positivo, chame a função e exiba uma mensagem informando a soma dos dígitos do número lido."
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-6",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-6",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 3 - Solução\n\n#include <iostream>\n\nusing namespace std;\n\nint fib(int n);\n\nint main(){\n\n    int i, x;\n\n    cout << \"Insira o ultimo indice dos termos: \";\n    cin >> x;\n\n    for(i = 0; i <= x; i++){\n        cout << fib(i) << endl;\n    }\n\n    return 0;\n}\nint fib(int n){\n    int i, an, an_1 = 1, an_2 = 0;\n\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    for(i = 2; i <= n; i++){\n        an = an_1 + an_2;\n        an_2 = an_1;\n        an_1 = an;\n    }\n\n    return an;\n}\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-7",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-7",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 3\nExemplo:\nEntrada: 10543\nSaída: 10543 tem soma igual a 13"
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#linguagem-de-programação-1",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#linguagem-de-programação-1",
    "title": "Funções - Exercícios",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nExercício 4\nImplemente uma função que receba como parâmetros dois números inteiros.\nA função deve retornar qual o MDC (Máximo Divisor Comum) entre os dois parâmetros informados.\nImplemente a função main, de forma que ela leia do usuário dois números inteiros positivos, chame a função e exiba uma mensagem informando o MDC entre os dois números lidos."
  },
  {
    "objectID": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-8",
    "href": "slides/exercicios_funcoes/exercicios_funcoes.html#funções-i---exercícios-8",
    "title": "Funções - Exercícios",
    "section": "Funções I - Exercícios",
    "text": "Funções I - Exercícios\nExercício 3 - Solução\nint soma_digitos(int x);\nint main(){\n    int num, r;\n    cout << \"Insira um numero inteiro:\\n\";\n    cin >> num;\n\n    r = soma_digitos(x);\n    cout << num << \" tem soma igual a \" << r << endl;\n\n    return 0;\n}\nint soma_digitos(int x){\n    int d, soma = 0;\n\n    while(x > 0){\n        d = x % 10;\n        soma += d;\n        x = x/10;\n    }\n\n    return soma;\n}"
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii",
    "title": "Funções - Exercícios II",
    "section": "Funções - Exercícios II",
    "text": "Funções - Exercícios II\nExercício 1: Primos e não-primos em intervalo\nImplemente uma função que armazene em 2 parâmetros de saída a quantidade de nrs. primos e não-primos presentes em um intervalo fechado dado por dois parâmetros de entrada \\(a\\) e \\(b\\).\nImplemente também a função main, que deve ler do usuário dois números inteiros correspondentes a um intervalo \\([a,b]\\) e exibir o resultado de uma chamada à função solicitada.\nExemplo:\nEntrada: 10 20\nSaída: 4 nrs primos e 7 nao-primos"
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-1",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-1",
    "title": "Funções - Exercícios II",
    "section": "Funções - Exercícios II",
    "text": "Funções - Exercícios II\nExercício 1 - Solução\n\nbool eh_primo(int x);\nvoid conta_no_intervalo(int a, int b, int &p, int &np);\n\nint main(){\n\n    int n1, n2, primos, n_primos;\n\n    cout << \"Insira o intervalo:\\n\";\n    cin >> n1 >> n2;\n\n    conta_no_intervalo(n1, n2, primos, n_primos);\n\n    cout << primos << \" nrs primos e \" << n_primos << \" nao-primos\\n\";\n\n    return 0;\n}\n\nbool eh_primo(int x){\n    int i;\n\n    for(i = 2; i <= x/2; i++){\n        if(x % i == 0){\n            return false;\n        }\n    }\n\n    return x != 1;\n}\nvoid conta_no_intervalo(int a, int b, int &p, int &np){\n    int n;\n\n    p = 0;\n    np = 0;\n\n    for(n = a; n <= b; n++){\n        if(eh_primo(n) == true){\n            p++;\n            cout << n << endl;\n        }\n        else{\n            np++;\n        }\n    }\n}"
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#lista-de-presença",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#lista-de-presença",
    "title": "Funções - Exercícios II",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230425"
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-2",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-2",
    "title": "Funções - Exercícios II",
    "section": "Funções - Exercícios II",
    "text": "Funções - Exercícios II\nExercício 2: Decomposição em fatores primos\nA decomposição em fatores primos do número 120 é dada por\n120 | 2\n 60 | 2\n 30 | 2\n 15 | 3\n  5 | 5\n  1"
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-3",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-3",
    "title": "Funções - Exercícios II",
    "section": "Funções - Exercícios II",
    "text": "Funções - Exercícios II\nExercício 2: Decomposição em fatores primos\nImplemente uma função para imprimir na tela a decomposição em fatores primos de um parâmetro de entrada.\nImplemente também a função main, que deve ler do usuário um número inteiro e exibir a decomposição em fatores primos deste número."
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-4",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-4",
    "title": "Funções - Exercícios II",
    "section": "Funções - Exercícios II",
    "text": "Funções - Exercícios II\nExercício 2 - Solução\nvoid imprime_fatores_primos(int x);\n\nint main(){\n\n    int num;\n\n    cout << \"Insira um numero inteiro:\\n\";\n    cin >> num;\n\n    cout << \"Fatores primos de \" << num << \":\\n\";\n    imprime_fatores_primos(num);\n\n    return 0;\n}\n\nvoid imprime_fatores_primos(int x){\n    int i = 2;\n\n    while(x > 1){\n        if(x % i == 0){\n            cout << i << endl;\n            x = x/i;\n        }\n        else{\n            i++;\n        }\n    }\n}"
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-5",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-5",
    "title": "Funções - Exercícios II",
    "section": "Funções - Exercícios II",
    "text": "Funções - Exercícios II\nExercício 3: Dígitos pares e ímpares de um número\nImplemente uma função que armazene em 2 parâmetros de saída a quantidade de dígitos pares e ímpares de um número dado por um parâmetro de entrada.\nImplemente também a função main, que deve ler do usuário um número inteiro e exibir uma mensagem de acordo com o resultado de uma chamada à função solicitada.\nExemplo:\nEntrada: 10734\nSaída: 2 digitos pares e 3 digitos impares"
  },
  {
    "objectID": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-6",
    "href": "slides/exercicios_funcoes2/exercicios_funcoes2.html#funções---exercícios-ii-6",
    "title": "Funções - Exercícios II",
    "section": "Funções - Exercícios II",
    "text": "Funções - Exercícios II\nExercício 3 - Solução\nvoid conta_digitos(int x, int &pares, int &impares);\n\nint main(){\n\n    int num, pares, impares;\n\n    cout << \"Insira o numero:\\n\";\n    cin >> num;\n\n    conta_digitos(num, pares, impares);\n\n    cout << pares << \" digitos pares e \" << impares << \" digitos impares\\n\";\n\n    return 0;\n}\n\nvoid conta_digitos(int x, int &pares, int &impares){\n    int d;\n\n    pares = 0;\n    impares = 0;\n\n    while(x > 0){\n        d = x % 10;\n\n        if(d % 2 == 0){\n            pares++;\n        }\n        else{\n            impares++;\n        }\n\n        x = x/10;\n    }\n}\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/revisao_unidade1/revisao_unidade1.html#revisão---unidade-i",
    "href": "slides/revisao_unidade1/revisao_unidade1.html#revisão---unidade-i",
    "title": "Revisão - Unidade I",
    "section": "Revisão - Unidade I",
    "text": "Revisão - Unidade I\nLista de Presença\n\n\n\n\n\n\n\nhttps://bit.ly/lip_20230926\n\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções",
    "title": "Funções Recursivas",
    "section": "Funções",
    "text": "Funções\nFunções e Abstração"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#linguagem-de-programação",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#linguagem-de-programação",
    "title": "Funções Recursivas",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nNas aulas anteriores (funções em C++):\n\nChamada, assinatura e definição\nPassagem de parâmetro por valor e por referência\nParâmetros de entrada, saída e entrada/saída"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#objetivo-da-aula",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#objetivo-da-aula",
    "title": "Funções Recursivas",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o conceito e uso de funções recursivas"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\n\n\n\n\n\n\nEstrutura Recursiva:\n\n\nQualquer coisa que, de forma abstrata, é formada por partes menores dela mesma"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade-1",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade-1",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\nExemplos de estruturas recursivas:"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade-2",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade-2",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\n\n\n\n\n\n\nRecursividade em Programação:\n\n\nCom o uso de recursividade (ou recursão), a solução de um problema depende das soluções de partes menores do mesmo problema."
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\n\n\n\n\n\n\nFunção que possui chamadas diretas ou indiretas à ela mesma.\n\n\n\nExemplo:\nint funcao(int x){\n    if(x == 0){\n        return 1;\n    }\n    else{\n        cout << x << endl;\n        return funcao(x-1);\n    }\n}"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-1",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-1",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\n\n\n\n\n\n\nIdeia de uma função recursiva:\n\n\nPara implementar uma função recursiva, você deve programá-la para que ela realize chamadas a ela mesma até que uma condição seja alcançada, evitando assim recursividade infinita."
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-2",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-2",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\nFatorial: exemplo de função recursiva\nO fatorial de um número pode ser calculado a partir do fatorial do número anterior\nEste processo é repetido até que o fatorial do primeiro número para o qual o fatorial está definido seja calculado\n\nLembre-se que f(0) = f(1) = 1"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-3",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-3",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = 1 \\times 2 \\times 3 \\times ... \\times (n-2) \\times (n-1) \\times n"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-4",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-4",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{1\n                                         \\times 2\n                                         \\times 3\n                                         \\times ... \\times (n-2)\n                                         \\times (n-1)}_\\text{f(n-1)}\n                                         \\times n\n\n\n\nO fatorial de n, dado por f(n), pode ser obtido a partir do fatorial de n-1, que é f(n-1)\nEm outras palavras, f(n-1) “está dentro” de f(n)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-5",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-5",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{1\n                                         \\times 2\n                                         \\times 3\n                                         \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                         \\times (n-1)}_\\text{f(n-1)}\n                                         \\times n\n\n\n\nf(n-2) “está dentro” de f(n-1)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-6",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-6",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{\n                             \\underbrace{1\n                                           \\times 2\n                                           \\times 3}_\\text{f(3)}\n                                           \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                           \\times (n-1)}_\\text{f(n-1)}\n                                           \\times n\n\n\n\nf(2) “está dentro” de f(3)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-7",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-7",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{\n                             \\underbrace{\n                             \\underbrace{1\n                                           \\times 2}_\\text{f(2)}\n                                           \\times 3}_\\text{f(3)}\n                                           \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                           \\times (n-1)}_\\text{f(n-1)}\n                                           \\times n\n\n\n\nf(1) “está dentro” de f(2)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-8",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-8",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{\n                             \\underbrace{\n                             \\underbrace{\n                             \\underbrace{1         }_\\text{f(1) = 1}\n                                           \\times 2}_\\text{f(2)}\n                                           \\times 3}_\\text{f(3)}\n                                           \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                           \\times (n-1)}_\\text{f(n-1)}\n                                           \\times n\n\n\n\nFinalmente, f(1) é um valor conhecido: f(1) = 1"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-9",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-9",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\nIsto torna possível calcular f(2) (que depende de f(1)), f(3) (que depende de f(2)) e assim sucessivamente até f(n), que depende de f(n-1)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-10",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-10",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\nDefinição matemática:\n\nf(n)=\\begin{cases}\n    1, & \\text{se } n = 0 \\text{, ou } n = 1\\\\\n    n*f(n-1), & \\text{se } n > 0\\\\\n\\end{cases}"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-11",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-11",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\nFunção em C++:\nint fat(int n){\n    if(n == 0 || n == 1){\n        return 1;\n    }\n    else{\n        return n*fat(n-1);\n    }\n}"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-12",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-12",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPasso Base e Passo Recursivo\nToda função recursiva possui:\n\nUm (ou mais) passo base\n\nResultado é conhecido sem chamadas à própria função\nPor exemplo: fat(0) e fat(1), que são iguais a 1"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-13",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-13",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPasso Base e Passo Recursivo\nToda função recursiva possui:\n\nUm (ou mais) passo recursivo\n\nEnvolve chamadas à própria função variando-se os parâmetros\nPasso em que se tenta resolver um sub-problema do problema inicial\nPor exemplo: fat(n), que é igual a n*fat(n-1)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-14",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-14",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPasso Base e Passo Recursivo\n\nDefinir funções de forma recursiva se resume a encontrar os dois passos\nTradução para linguagem de programação pode ser obtida facilmente da notação matemática"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-15",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-15",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\nChamada à função para calcular o fatorial de 6:\n1a. chamada: fat(6)\n2a. chamada: 6 * fat(5)\n3a. chamada: 6 * 5 * fat(4)\n4a. chamada: 6 * 5 * 4 * fat(3)\n5a. chamada: 6 * 5 * 4 * 3 * fat(2)\n6a. chamada: 6 * 5 * 4 * 3 * 2 * fat(1)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-16",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-16",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\n1o. retorno: 6 * 5 * 4 * 3 * 2 * 1, fat(1) se tornou 1\n2o. retorno: 6 * 5 * 4 * 3 * 2, fat(2) se tornou 2 * 1\n3o. retorno: 6 * 5 * 4 * 6, fat(3) se tornou 3 * 2\n4o. retorno: 6 * 5 * 24, fat(4) se tornou 4 * 6\n5o. retorno: 6 * 120, fat(5) se tornou 5 * 24\n6o. retorno: 720, fat(6) se tornou 6 * 120"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-17",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-17",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\nComo este mecanismo funciona?\n\nInternamente, o computador gerencia uma estrutura em forma de pilha, com todas as chamadas a funções de um programa\n\n“Pilha”: região na memória que funciona de forma similar a uma pilha de papeis sobre uma mesa (um papel é colocado sobre o outro)\n\nAo ser chamada, diz-se que uma função foi empilhada"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#lista-de-presença",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#lista-de-presença",
    "title": "Funções Recursivas",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230921"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-18",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-18",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\n\nEm funções recursivas, ocorre o empilhamento de várias chamadas a uma mesma função\nTão logo um passo base é alcançado, a chamada atualmente no topo da pilha é desempilhada\nIsto provoca o desempilhamento das chamadas anteriores, até que a chamada original também seja desempilhada"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-19",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-19",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(6)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-20",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-20",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(5)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-21",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-21",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(4)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-22",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-22",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(3)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-23",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-23",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(2)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-24",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-24",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(1)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-25",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-25",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(1): passo base"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-26",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-26",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(2)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-27",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-27",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(3)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-28",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-28",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(4)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-29",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-29",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(5)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-30",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-30",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(6)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-31",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-31",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Soma dos n Primeiros Números Inteiros\nSoma de 1 até n, onde n é um número inteiro maior que 0:\n\nQual a definição matemática?\nQual o código correspondente à função?"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-32",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-32",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Soma dos n Primeiros Números Inteiros\nDefinição matemática:\n\n\n\n\ns(n)=\\begin{cases}\n    1, & \\text{se } n = 1\\\\\n    n+s(n-1), & \\text{se } n > 1\\\\\n\\end{cases}\n\n\n\nFunção:\nint soma_n(int n){\n    if(n == 1){\n        return 1;\n    }\n    else{\n        return n+soma_n(n-1);\n    }\n}"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-33",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-33",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\n\n  f(n) = \\sum_{i=1}^{n} 3i^{2} = 3 + 12 + 27 + 48 + ... + 3(n-1)^{2} + 3n^{2}\n\nÉ possível obter facilmente o código em C++ para computar fórmulas matemáticas baseadas em somatório/produtório:\n\nA primeira etapa envolve identificar o passo base\nA segunda etapa envolve identificar o passo recursivo"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-34",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-34",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\n\nPasso base:\n\nPara n=1, o somatório f(n) tem apenas um termo, igual a 3\\times(1)^{2}=3\n\nPasso recursivo:\n\nPara um n qualquer, f(n) = f(n-1) + 3 n^{2} (verifique expandindo o somatório)"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-35",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-35",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\nDaí, é possível deduzir a seguinte definição matemática:\n\nf(n)=\\begin{cases}\n    3, & \\text{se } n = 1\\\\\n    3n^2 + f(n-1), & \\text{se } n > 1\\\\\n\\end{cases}"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#sequências-definidas-recursivamente",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#sequências-definidas-recursivamente",
    "title": "Funções Recursivas",
    "section": "Sequências Definidas Recursivamente",
    "text": "Sequências Definidas Recursivamente\nFunções recursivas podem ser úteis para definir sequências numéricas:\n\nCada termo é gerado em função de termos anteriores\nExemplo: sequência de Fibonacci\n\nOs dois primeiros termos são iguais a 1\nCada termo é a soma dos dois termos anteriores\nSequência resultante: 1, 1, 2, 3, 5, 8, 13, 21, 34, …"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#sequências-definidas-recursivamente-1",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#sequências-definidas-recursivamente-1",
    "title": "Funções Recursivas",
    "section": "Sequências Definidas Recursivamente",
    "text": "Sequências Definidas Recursivamente\n\nQual a definição matemática?\n\nO enésimo termo é dado por f(n)\nO primeiro termo é o termo com n=0\n\nQual o código correspondente à função?"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#exemplo-de-sequência-recursiva",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#exemplo-de-sequência-recursiva",
    "title": "Funções Recursivas",
    "section": "Exemplo de Sequência Recursiva",
    "text": "Exemplo de Sequência Recursiva\nSequência de Fibonacci\n\n\nDefinição matemática:\n\n\nf(n)=\\begin{cases}\n    1, & \\text{se } n = 0\\\\\n    1, & \\text{se } n = 1\\\\\n    f(n-1)+f(n-2), & \\text{se } n > 1\\\\\n\\end{cases}\n\n\n\nFunção:\nint fib(int n){\n    if(n <= 1){\n        return 1;\n    }\n    else{\n        return fib(n-1)+fib(n-2);\n    }\n}"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-36",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-36",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\nA partir da def. matemática, é possível definir a seguinte função em C++:\nint formula(int n){\n    if(n == 1){\n        return 3;\n    }\n    else{\n        return 3*n*n + formula(n-1);\n    }\n}"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade-3",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#recursividade-3",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\nFunções e Abstração"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#sumário",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#sumário",
    "title": "Funções Recursivas",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nFunções recursivas\nPasso base e passo recursivo\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-37",
    "href": "slides/10-funcoes_rec/10-funcoes_rec.html#funções-recursivas-37",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nVantagens e Desvantagens\n\nVantagem: facilidade de implementação\nDesvantagem: execução mais lenta em relação à versão iterativa"
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-1",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-1",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nFunção Recursiva: MDC\nO Máximo Divisor Comum (MDC) entre 2 números x e y pode ser calculado da seguinte maneira:\n\nRepetir até que y seja 0:\n\nFaça x receber o valor de y\nFaça y receber o valor do resto da divisão de x por y\n\nAo encerrar, o MDC será x"
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-1-1",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-1-1",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nFunção Recursiva: MDC\nImplemente uma função recursiva que receba como parâmetros de entrada dois números inteiros e retorne o MDC entre os dois números.\nImplemente a função main para testar o seu programa, lendo dois números inteiros do usuário e mostrando o resultado na tela."
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#lista-de-presença",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#lista-de-presença",
    "title": "Funções Recursivas - Exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230928"
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-2",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-2",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nFunção Recursiva: Quantidade de Dígitos de um Número\nCada dígito que compõe um número inteiro pode ser acesso, da direita para a esquerda, por sucessivas tomadas do resto do número por 10 e divisões do número por 10."
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-2-1",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-2-1",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nFunção Recursiva: Quantidade de Dígitos de um Número\nImplemente uma função recursiva que receba como parâmetros de entrada um número inteiro e retorne a quantidade de dígitos deste número.\nImplemente a função main para testar o seu programa, lendo um número inteiro do usuário e mostrando o resultado na tela."
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-3",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-3",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nFunção Recursiva: Produto entre Dois Números\nO produto entre dois números x e y pode ser obtido através de várias somas sucessivas. Por exemplo:\n\n\\begin{align*}\n2 \\times 3 &= 2 + 2 \\times 2 \\\\\n2 \\times 2 &= 2 + 2 \\times 1 \\\\\n2 \\times 1 &= 2 + 2 \\times 0 \\\\\n2 \\times 0 &= 0\n\\end{align*}"
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-3-1",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-3-1",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nFunção Recursiva: Produto entre Dois Números\nImplemente uma função recursiva que receba como parâmetros de entrada dois números inteiros e retorne o produto entre os dois números.\nImplemente a função main para testar o seu programa, lendo dois números inteiros do usuário e mostrando o resultado na tela."
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-4",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-4",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 4",
    "text": "Exercício 4\nFunção Recursiva: Divisores de um Número\nImplemente uma função recursiva que retorne a quantidade de divisores de um número.\nA função deve ter um único parâmetro de entrada.\nImplemente a função main para testar o seu programa."
  },
  {
    "objectID": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-4-1",
    "href": "slides/exercicios_funcoes_rec/exercicios_funcoes_rec.html#exercício-4-1",
    "title": "Funções Recursivas - Exercícios",
    "section": "Exercício 4",
    "text": "Exercício 4\nFunção Recursiva: Divisores de um Número\nPara que esta função contenha apenas um parâmetro de entrada, utilize uma função auxiliar com dois parâmetros, que realiza de fato o cálculo da quantidade de divisores:\n//Função auxiliar: \n//calcula a quantidade de divisores.\n//Esta função é realmente recursiva\nint conta_div(int n, int i){\n    //Deixado como exercício :)\n}\n\n//Função com apenas um parâmetro:\n//serve de fachada para a função\n//auxiliar, que é realmente recursiva\nint conta_divisores(int x){\n    return conta_div(x, 1);\n}\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#nas-aulas-anteriores",
    "href": "slides/11-vetores/11-vetores.html#nas-aulas-anteriores",
    "title": "Vetores",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nConstruções de funções em C++\nFunções recursivas em C++"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#objetivo-da-aula",
    "href": "slides/11-vetores/11-vetores.html#objetivo-da-aula",
    "title": "Vetores",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de vetores:\n\nRepresentação em memória\nDeclaração de vetores\nInicialização de vetores\nExercícios"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#motivação",
    "href": "slides/11-vetores/11-vetores.html#motivação",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nExercício\nImplemente um programa que leia as notas de 3 alunos e mostre quantas notas são maiores do que a média entre elas."
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#motivação-1",
    "href": "slides/11-vetores/11-vetores.html#motivação-1",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nint main(){\n    float n1, n2, n3, media = 0.0;\n    int cont = 0;\n\n    cin >> n1 >> n2 >> n3;\n    media = (n1 + n2 + n3)/3;\n    \n    if(n1 > media){\n        cont++;\n    }\n    if(n2 > media){\n        cont++;\n    }\n    if(n3 > media){\n        cont++;\n    }\n\n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#motivação-2",
    "href": "slides/11-vetores/11-vetores.html#motivação-2",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nE se desejarmos mudar para 6 notas?\nint main(){\n    float n1, n2, n3, n4, n5, n6, media = 0.0;\n    int cont = 0;\n\n    cin >> n1 >> n2 >> n3 >> n4 >> n5 >> n6;\n    media = (n1 + n2 + n3 + n4 + n5 + n6)/6;\n    \n    if(n1 > media){\n        cont++;\n    }\n    if(n2 > media){\n        cont++;\n    }\n    if(n3 > media){\n        cont++;\n    }\n    if(n4 > media){\n        cont++;\n    }\n    if(n5 > media){\n        cont++;\n    }\n    if(n6 > media){\n        cont++;\n    }\n\n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#motivação-3",
    "href": "slides/11-vetores/11-vetores.html#motivação-3",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nE se desejarmos mudar para 100 notas?\n\nUso de vetores\nTambém funciona para um tamanho n qualquer"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#vetor",
    "href": "slides/11-vetores/11-vetores.html#vetor",
    "title": "Vetores",
    "section": "Vetor",
    "text": "Vetor\n\nMecanismo disponibilizado por linguagens de programação\nArmazena dados de um mesmo tipo em memória\nTorna possível o uso de novos tipos de variáveis:\n\nVetor de char\nVetor de int\nVetor de float\nVetor de bool"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#vetor-1",
    "href": "slides/11-vetores/11-vetores.html#vetor-1",
    "title": "Vetores",
    "section": "Vetor",
    "text": "Vetor\nRepresentação em Memória\n\n\n\n\n\n\n\n\n\nVariável: uma posição na memória para guardar um valor\nVetor: várias posições na memória para guardar vários valores"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nSintaxe\ntipo_do_vetor nome_do_vetor[tamanho_do_vetor];\n\ntipo_do_vetor são os tipos de variáveis conhecidos: int, char, float, bool\nnome_do_vetor segue as mesmas regras que usamos para variáveis\nO tamanho_do_vetor é uma expressão cujo tipo deve ser int"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor-1",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor-1",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExercício\nEscrever declaração de vetor:\n\nDo tipo inteiro, com 30 posições, chamado idades\nDo tipo caractere, com 5 posições, chamado vogais\nPara armazenar n valores do tipo float"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor-2",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor-2",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExercício: Solução\n1. int idades[30];\n2. char vogais[5];\n3. float v[n];"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor-3",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor-3",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nTamanho de um Vetor em C++\n\nEm C++, o tamanho do vetor é o seu tamanho máximo\nOu seja, a declaração int v[50]; diz que:\n\nO vetor v pode conter no máximo 50 valores"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor-4",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor-4",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExpressão Utilizada como Tamanho do Vetor\nPor causa de uma extensão da linguagem, é possível utilizar int v[n], com n sendo uma variável ou até expressões como int v[n1+n2], desde que a expressão resulte em um inteiro"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor-5",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor-5",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExpressão Utilizada como Tamanho do Vetor\nOpção 1:\nconst int MAXV = 100; //antes das funções do programa\n...\nint v[MAXV]; //na declaração do vetor"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor-6",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor-6",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExpressão Utilizada como Tamanho do Vetor\nOpção 2:\n#define MAXV 100 //antes da função main\n...\nint v[MAXV]; //na declaração do vetor"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#declarando-um-vetor-7",
    "href": "slides/11-vetores/11-vetores.html#declarando-um-vetor-7",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExpressão Utilizada como Tamanho do Vetor\nPor causa de uma extensão da linguagem, é possível utilizar int v[n], com n sendo uma variável ou até expressões como int v[n1+n2], desde que a expressão resulte em um inteiro"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#posições-de-um-vetor",
    "href": "slides/11-vetores/11-vetores.html#posições-de-um-vetor",
    "title": "Vetores",
    "section": "Posições de um Vetor",
    "text": "Posições de um Vetor\n\n\n\n\n\n\n\n\n\nUm vetor com n posições tem posições válidas que vão de 0 até n-1\nUm vetor v não pode ser usado diretamente em expressões\nCada elemento v[0], …, v[n-1] é que deve ser usado"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#posições-de-um-vetor-1",
    "href": "slides/11-vetores/11-vetores.html#posições-de-um-vetor-1",
    "title": "Vetores",
    "section": "Posições de um Vetor",
    "text": "Posições de um Vetor\n\n\n\n\n\n\n\n\n\nPara o vetor mostrado, qual o valor de cada expressão a seguir, sendo x = 2?\n\nv[6]\nv[0] + v[7]\nv[x]\nv[2*x + 3]\nv[v[x]]\nv[10 - v[-v[4]]]\nv[-1]\nv[8]\nv[1000]"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#lista-de-presença",
    "href": "slides/11-vetores/11-vetores.html#lista-de-presença",
    "title": "Vetores",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231005"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#inicialização-de-vetores",
    "href": "slides/11-vetores/11-vetores.html#inicialização-de-vetores",
    "title": "Vetores",
    "section": "Inicialização de Vetores",
    "text": "Inicialização de Vetores\nSintaxe\n\nint v[5]; \\rightarrow inicializa cada valor com lixo\nint v[5] = {10, 20, 30, 40, 50}; \\rightarrow inicializa com valores indicados\nint v[] = {10, 20, 30, 40, 50}; \\rightarrow inicializa com valores indicados (tamanho do vetor é deduzido a partir dos valores)"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#inicialização-de-vetores-1",
    "href": "slides/11-vetores/11-vetores.html#inicialização-de-vetores-1",
    "title": "Vetores",
    "section": "Inicialização de Vetores",
    "text": "Inicialização de Vetores\nSintaxe\n\nint v[5] = {}; \\rightarrow inicializa todos os valores com 0\nint v[5] = {5, 10}; \\rightarrow inicializa posições 0 e 1 com os valores indicados, todos os outros com 0"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#motivação-4",
    "href": "slides/11-vetores/11-vetores.html#motivação-4",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nVoltando ao exercício inicial: e se desejarmos mudar para 100 notas?\n\nUso de vetores"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-inicial",
    "href": "slides/11-vetores/11-vetores.html#exercício-inicial",
    "title": "Vetores",
    "section": "Exercício Inicial",
    "text": "Exercício Inicial\nExercício: Solução\nint main(){\n    float notas[100], media = 0.0;\n    int i, cont = 0;\n    for(i = 0; i < 100; i++){\n        cin >> notas[i];\n        media += notas[i];\n    }\n    media /= 100;\n\n    for(i = 0; i < 100; i++){\n        if(notas[i] > media) cont++;\n    }\n    \n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-inicial-1",
    "href": "slides/11-vetores/11-vetores.html#exercício-inicial-1",
    "title": "Vetores",
    "section": "Exercício Inicial",
    "text": "Exercício Inicial\nE se fosse pedido um número n (informado pelo usuário) de notas?"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-inicial-2",
    "href": "slides/11-vetores/11-vetores.html#exercício-inicial-2",
    "title": "Vetores",
    "section": "Exercício Inicial",
    "text": "Exercício Inicial\nExercício: Solução\nint main(){\n    int n, i, cont = 0;\n    cout << \"Insira a quantidade de notas:\\n\";\n    cin >> n;\n    float notas[n], media = 0;\n    for(i = 0; i < n; i++){\n        cin >> notas[i];\n        media += notas[i];\n    }\n    media /= n;\n\n    for(i = 0; i < n; i++){\n        if(notas[i] > media) cont++;\n    }\n\n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-1-1",
    "href": "slides/11-vetores/11-vetores.html#exercício-1-1",
    "title": "Vetores",
    "section": "Exercício 1",
    "text": "Exercício 1\nLer um número n do usuário e em seguida, armazenar n notas em um vetor. O seu programa deve imprimir a maior das notas armazenadas."
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-1-solução",
    "href": "slides/11-vetores/11-vetores.html#exercício-1-solução",
    "title": "Vetores",
    "section": "Exercício 1: Solução",
    "text": "Exercício 1: Solução\nint main(){\n    int n, i;\n    cout << \"Insira a quantidade de notas:\\n\";\n    cin >> n;\n    float notas[n], maior;\n\n    //Leitura das notas\n    for(i = 0; i < n; i++){\n        cin >> notas[i];\n    }\n\n    //Processamento da maior nota\n    for(i = 0; i < n; i++){\n        if(i == 0){\n            maior = notas[i];\n        }\n        else{\n            if(notas[i] > maior){\n                maior = notas[i];\n            }\n        }\n    }\n    cout << \"Maior nota: \" << maior << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-2",
    "href": "slides/11-vetores/11-vetores.html#exercício-2",
    "title": "Vetores",
    "section": "Exercício 2",
    "text": "Exercício 2\nLer um número n do usuário e em seguida, armazenar n notas em um vetor. O seu programa deve imprimir a posição da maior nota armazenada."
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-2-solução",
    "href": "slides/11-vetores/11-vetores.html#exercício-2-solução",
    "title": "Vetores",
    "section": "Exercício 2: Solução",
    "text": "Exercício 2: Solução\nint main(){\n    int n, i, maiorpos;\n    cout << \"Insira a quantidade de notas:\\n\";\n    cin >> n;\n    float notas[n];\n\n    //Leitura das notas\n    for(i = 0; i < n; i++){\n        cin >> notas[i];\n    }\n    \n    //Processamento da posição da maior nota\n    for(i = 0; i < n; i++){\n        if(i == 0){\n            maiorpos = i;\n        }\n        else{\n            if(notas[i] > notas[maiorpos]){\n                maiorpos = i;\n            }\n        }\n    }\n    cout << \"Pos. da maior nota: \" << maiorpos << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-3",
    "href": "slides/11-vetores/11-vetores.html#exercício-3",
    "title": "Vetores",
    "section": "Exercício 3",
    "text": "Exercício 3\nLer um número n do usuário e em seguida, ler os elementos de dois vetores de números reais de tamanho n. O seu programa deve calcular e exibir na tela o vetor correspondente à soma vetorial dos dois vetores.\n\nVetor u = u[0],...,u[n-1]\nVetor v = v[0],...,v[n-1]\nVetor soma: u[0]+v[0],u[1]+v[1],...,u[n-1]+v[n-1]"
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#exercício-4",
    "href": "slides/11-vetores/11-vetores.html#exercício-4",
    "title": "Vetores",
    "section": "Exercício 4",
    "text": "Exercício 4\nLer um número inteiro n do usuário. O seu programa deve armazenar em um vetor os dígitos que compõem o número n na ordem inversa. Por exemplo, para n = 2134, o vetor resultante v deve ser igual a [4,3,1,2]."
  },
  {
    "objectID": "slides/11-vetores/11-vetores.html#sumário",
    "href": "slides/11-vetores/11-vetores.html#sumário",
    "title": "Vetores",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje: vetores\n\nSintaxe de declaração\nAcesso às posições\nInicialização\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#na-aula-anterior",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#na-aula-anterior",
    "title": "Funções e Vetores",
    "section": "Na Aula Anterior",
    "text": "Na Aula Anterior\nVetores em C++:\n\nDeclaração\nAcesso aos elementos\nInicialização\nExercícios"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#objetivo-da-aula",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#objetivo-da-aula",
    "title": "Funções e Vetores",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de funções que operam sobre vetores:\n\nSintaxe\nExercícios"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-e-vetores",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-e-vetores",
    "title": "Funções e Vetores",
    "section": "Funções e Vetores",
    "text": "Funções e Vetores\n\nÉ possível passar vetores como parâmetro de funções\nAlém do vetor a ser passado como parâmetro, é necessário um parâmetro adicional \\rightarrow o tamanho do vetor"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\nExemplo com um vetor como parâmetro:\ntipo_func nome_func(tipo_vetor nome_vetor[], int tam_vetor){\n    corpo da funcao\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-1",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-1",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\n\ntipo_vetor é o tipo do vetor passado como parâmetro: int, char, float, bool\nnome_vetor é o nome do vetor passado como parâmetro. Observe que o [] é vazio\ntam_vetor é o tamanho do vetor passado como parâmetro"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-2",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-2",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\nCaso haja mais de um vetor:\n\nSe tiverem tamanhos diferentes, é necessário incluir um parâmetro para o tamanho de cada um\nSe tiverem um mesmo tamanho, basta utilizar um único parâmetro para o tamanho"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-3",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-3",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\nExemplo com dois vetores como parâmetros:\ntipo_func nome_func(tipo_vetor nome_vetor1[], int tam_vetor1,\n                    tipo_vetor nome_vetor2[], int tam_vetor2){\n    corpo da funcao\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-4",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-função-com-vetores-4",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nExercícios\nEscrever assinatura da função:\n\nQue imprime um vetor de inteiros na tela\nQue recebe um vetor de caracteres e retorna quantos dos elementos no vetor são iguais a um caractere passado como parâmetro\nQue recebe dois vetores de inteiros e retorna o maior valor dentre todos, seja ele do primeiro ou do segundo vetor"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-funções-com-vetores",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#declaração-de-funções-com-vetores",
    "title": "Funções e Vetores",
    "section": "Declaração de Funções com Vetores",
    "text": "Declaração de Funções com Vetores\nExercícios: Solução\n1. void imprime_vetor(int v[], int tam);\n2. int conta_ocorrencias(char v[], int tam, char c);\n3. int computa_maior(int v1[], int tam1,\n                     int v2[], int tam2);"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#lista-de-presença",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#lista-de-presença",
    "title": "Funções e Vetores",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231010"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nChamada de Funções\n\nNas chamadas às funções, variáveis do tipo vetor são passadas como parâmetros utilizando apenas o seu nome\nExemplo:\n\nvoid imprime_vet(int vet[], int n);\nint main(){\n        int n;\n        cin >> n;\n        int v[n], i;\n        for(i = 0; i < n; i++){\n            v[i] = 2*n+i;\n        }\n        imprime_vet(v, n); //chama função\n        return 0;\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-1",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-1",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nPassagem de Parâmetros\nO que faz o código a seguir?\nvoid func(int vet[], int n){\n    int i;\n    for(i = 0; i < n; i++){\n        vet[i] = 1;\n    }\n}\nint main(){\n        int n;\n        cin >> n;\n        int v[n], i;\n        func(v, n);\n        for(i = 0; i < n; i++){\n            cout << v[i] << \" \";\n        }\n        cout << endl;\n        return 0;\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-2",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-2",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nPassagem de Parâmetros\n\nTodo vetor passado para funções como parâmetro é passado por referência\nIsto significa dizer que as alterações realizadas nos vetores dentro da função permanecem após a função ser finalizada"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-3",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-3",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nFunção com Vetores como Resultados\n\nEm C++, não é possível retornar um vetor com o comando return\nEm outras palavras, a assinatura seguinte não é permitida:\n\nint[] soma_vetores(int v1[], int v2[], int n);\n\nCaso a função calcule um ou mais vetores, ela deve armazenar o resultado nos parâmetros da função"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#exercícios-1",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#exercícios-1",
    "title": "Funções e Vetores",
    "section": "Exercícios:",
    "text": "Exercícios:\n\nImplemente uma função chamada le_vet, para ler os elementos de um vetor de números inteiros de tamanho n\nImplemente uma função que recebe como parâmetros de entrada um vetor de caracteres e um caractere. A função deve retornar quantos dos caracteres no vetor são iguais ao caractere passado como parâmetro"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-4",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-4",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nFunções Recursivas\nFunções recursivas também podem ser utilizadas com vetores"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-1",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-1",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nFunção recursiva para a soma de todos os valores de um vetor:"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-2",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-2",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nFunção recursiva para a soma de todos os valores de um vetor:"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-3",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-3",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nA primeira chamada à função soma divide o vetor em duas partes: um nr. inteiro igual ao último valor e um vetor contendo os demais valores. A função deve ser chamada novamente para o novo vetor"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-4",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-4",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nO mesmo acontece para todas as demais chamadas:"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-5",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-5",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-6",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-6",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-7",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-7",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nQuando o vetor possui apenas um valor, o passo base é alcançado"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-8",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-8",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nApós isto, as chamadas que estão empilhadas utilizam os resultados calculados para serem desempilhadas e calcular a soma de todos os valores do vetor:\n\ns([2,3]) = 5\ns([2,3,6]) = 11\ns([2,3,6,8]) = 19\ns([2,3,6,8,4]) = 23"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#exercícios-2",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#exercícios-2",
    "title": "Funções e Vetores",
    "section": "Exercícios:",
    "text": "Exercícios:\n\nImplemente uma função recursiva chamada imprime_vet, para imprimir os elementos de um vetor de números inteiros de tamanho n na tela\n\nCaso os valores tenham sido impressos na ordem inversa dos valores digitados, modifique a função para imprimir os valores na mesma ordem\n\nImplemente a questão 2 anterior (contar quantos caracteres de um vetor são iguais a um caractere passado como parâmetro) de forma recursiva"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#sumário",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#sumário",
    "title": "Funções e Vetores",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nSintaxe de implementação de funções com vetores\nFunções recursivas com vetores\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-5",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-com-vetores-5",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nFunções Recursivas\n\nA recursividade é alcançada pela divisão do vetor em partes menores:\n\nPrimeira chamada considera todos as n posições de um vetor\nSegunda chamada considera as n-1 primeiras posições\nTerceira chamada considera as n-2 primeiras posições\nPasso base: alcançado quando não é possível dividir o vetor, ou seja, o seu tamanho é igual a 1"
  },
  {
    "objectID": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-9",
    "href": "slides/12-funcoes_e_vetores/12-funcoes_e_vetores.html#funções-recursivas-9",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nFunção resultante:\nint soma(int v[], int n){\n    if(n == 1){\n        return v[0];\n    }\n    else{\n        return soma(v, n-1) + v[n-1];\n    }\n}"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#nas-aulas-anteriores",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#nas-aulas-anteriores",
    "title": "Geração de Números Aleatórios",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\nVetores em C++\n\nDeclaração\nAcesso aos elementos\nInicialização\nUso de funções"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#objetivo-da-aula",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#objetivo-da-aula",
    "title": "Geração de Números Aleatórios",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\n\nApresentar os mecanismos oferecidos pela linguagem C++ para geração de números aleatórios\nUtilizar funções que geram números aleatórios com vetores"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#motivação",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#motivação",
    "title": "Geração de Números Aleatórios",
    "section": "Motivação",
    "text": "Motivação\nEm diversas aplicações, é desejável que o computador gere um número aleatório. Exemplos:\n\nPreencher um vetor/matriz com números aleatórios\nSortear um elemento de um vetor/matriz aleatoriamente"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nBibliotecas Necessárias\n\nA linguagem C++ oferece funções para geração de números aleatórios disponíveis na biblioteca cstdlib\nComo a geração de números aleatórios depende de um número inicial (semente), a biblioteca ctime também deve ser utilizada"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-1",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-1",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nFunções\nPara se trabalhar com números aleatórios, são necessárias chamadas a duas funções:\n1. void srand(int semente); //biblioteca cstdlib\n2. int rand(); //biblioteca cstdlib"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-2",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-2",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nFunções\nA função srand inicializa o gerador de números aleatórios com uma semente:\n\nEx.: srand(5);\nBasta ser chamada uma única vez no programa"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-3",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-3",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nFunções\nA segunda função gera efetivamente um número aleatório:\n\nEx.: int n = rand();\nDeve ser chamada para cada número a ser gerado aleatoriamente"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-4",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-4",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nSemente do Gerador de Números Aleatórios\nObserve que, em relação à semente do gerador de números aleatórios:\n\nA chamada à função srand não é obrigatória para o programa funcionar\nEntretanto, com ela, é possível impedir que o programa gere os mesmos números em diferentes execuções do programa"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-5",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-5",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nSemente do Gerador de Números Aleatórios\nPara isto, basta utilizar a hora atual do sistema como semente:\n\nObter hora do sistema: utilizar função time da biblioteca ctime\nInicializar semente como a hora atual: srand(time(0));"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-6",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-6",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nExemplo\nPrograma gera n números inteiros aleatórios e os exibe na tela\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nint main(){\n    srand(time(0)); //inicializa semente\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << rand() << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-7",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-7",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nFunção rand\nProblemas:\n\nGera sempre um número inteiro\nNrs. gerados estão em intervalo [0, \\text{RAND\\_MAX}]\nComo fazer para:\n\nGerar números dentro de um intervalo específico?\nGerar números reais?\nGerar caracteres?"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-8",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-8",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Aleatórios dentro de um Intervalo Específico\nPara gerar números aleatórios em um intervalo de interesse:\n\nUtilizar a função rand\nUsar o operador % para limitar a quantidade de valores gerados\nSomar o resultado com um valor constante para “deslocar” o intervalo de valores gerados"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-9",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-9",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Aleatórios dentro de um Intervalo Específico\nExemplos de uso:\n\nGera números inteiros aleatórios no intervalo [0,\\text{RAND\\_MAX}]:\nint x = rand();"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-10",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-10",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Aleatórios dentro de um Intervalo Específico\nExemplos de uso:\n\nGera números inteiros aleatórios no intervalo [0,q-1]:\nint x = rand() % q;"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-11",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-11",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Aleatórios dentro de um Intervalo Específico\nExemplos de uso:\n\nGera números inteiros aleatórios no intervalo [p,q]:\nint x = (rand() % (q-p+1)) + p;"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nImplemente uma função que gere números inteiros aleatórios em um intervalo qualquer delimitado por [p,q]"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-1",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-1",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nSolução\nint gera_valor_inteiro(int p, int q){\n    return (rand() % (q-p+1)) + p;\n}"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#lista-de-presença",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#lista-de-presença",
    "title": "Geração de Números Aleatórios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230518"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-12",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-12",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Reais Aleatórios\nE números reais? Como podemos gerá-los?\n\nA função rand é a única disponível e retorna um inteiro"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-13",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-13",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Reais Aleatórios\nPara gerar números reais aleatórios:\n\nUtilizar a função rand dividida pelo valor RAND_MAX\nMultiplicar o resultado por um fator de escala\nSomar o resultado com um valor constante para “deslocar” o intervalo de valores gerados"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-14",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-14",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Reais Aleatórios\nExemplos de uso:\n\nGera números reais aleatórios no intervalo [0.0,1.0]:\nfloat x = rand()/float(RAND_MAX);"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-15",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-15",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Reais Aleatórios\nExemplos de uso:\n\nGera números reais aleatórios no intervalo [0.0,q]:\nfloat x = q*(rand()/float(RAND_MAX));"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-16",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-16",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Números Reais Aleatórios\nExemplos de uso:\n\nGera números reais aleatórios no intervalo [p,q]:\nfloat x = (q-p)*(rand()/float(RAND_MAX)) + p;"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-2",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-2",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nImplemente uma função que gere números reais aleatórios em um intervalo qualquer delimitado por [p,q]"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-3",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-3",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nSolução\nfloat gera_valor_real(float p, float q){\n    return (q-p)*(rand()/float(RAND_MAX)) + p;\n}"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-17",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-17",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Caracteres Aleatórios\nE caracteres? Como podemos gerá-los?\n\nLembre-se que um caractere possui um número inteiro associado, de acordo com a tabela ASCII"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-18",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-18",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Caracteres Aleatórios\nEntão, basta gerar um número no intervalo [0,255] e convertê-lo para char"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-19",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#números-aleatórios-19",
    "title": "Geração de Números Aleatórios",
    "section": "Números Aleatórios",
    "text": "Números Aleatórios\nGeração de Caracteres Aleatórios\n\nVários destes caracteres não são visíveis\n\n\\0, que tem código igual a 0\n\\t, que tem código igual a 9\n\\n, que tem código igual a 10\n\nCarateres visíveis: estão no intervalo [33,126]"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercícios",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercícios",
    "title": "Geração de Números Aleatórios",
    "section": "Exercícios",
    "text": "Exercícios\nUso em Vetores\nUtilizando as funções anteriores:\nImplemente uma função que preencha um vetor de tamanho n com números inteiros aleatórios no intervalo [-5,5]"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-4",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-4",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nSolução\nvoid insere_aleatorios_vetor(int v[], int n){\n    int i;\n    for(i = 0; i < n; i++){\n        v[i] = gera_valor_inteiro(-5,5);\n    }\n}"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-5",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-5",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nUso em Vetores\nUtilizando as funções anteriores:\nImplemente uma função que preencha um vetor de tamanho n com números reais aleatórios no intervalo [1.0,10.0]"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-6",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-6",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nSolução\nvoid insere_aleatorios_vetor(float v[], int n){\n    int i;\n    for(i = 0; i < n; i++){\n        v[i] = gera_valor_real(1,10);\n    }\n}"
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-7",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-7",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nUso em Vetores\nImplemente uma função que receba como parâmetro de entrada um número n e como parâmetro de saída dois vetores de números inteiros com tamanhos que devem ser calculados pela função.\nInicialmente, a sua função deve zerar os vetores e após isto, gerar n números inteiros aleatórios no intervalo [1,50].\nA função deve inserir os números gerados que forem primos no primeiro vetor e os números não primos no segundo."
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-8",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#exercício-8",
    "title": "Geração de Números Aleatórios",
    "section": "Exercício",
    "text": "Exercício\nUso em Vetores\nA função main do seu programa deve ler do usuário o valor de n e exibir na tela os dois vetores computados pela função solicitada."
  },
  {
    "objectID": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#sumário",
    "href": "slides/13-numeros_aleatorios/13-numeros_aleatorios.html#sumário",
    "title": "Geração de Números Aleatórios",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nMecanismos oferecidos pela linguagem C++ para geração de números aleatórios\nDefinição de funções para números aleatórios em intervalos de interesse\nUso em vetores\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-1",
    "href": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-1",
    "title": "Funções e vetores: exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nProduto Interno\nO produto interno entre dois vetores \\mathbf{u} e \\mathbf{v} é dado por:\n\n\\mathbf{u}.\\mathbf{v} = \\sum_{i=0}^{n-1} u_i.v_i = u_0.v_0 + u_1.v_1 + ... + u_{n-1}.v_{n-1},\n com\n\\mathbf{u} = [u_0, u_1, ... , u_{n-1}]^t\\quad e\n\\mathbf{v} = [v_0, v_1, ... , v_{n-1}]^t."
  },
  {
    "objectID": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-1-1",
    "href": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-1-1",
    "title": "Funções e vetores: exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nFunção Produto Interno\nImplemente uma função que receba como parâmetros de entrada dois vetores de números reais. A função a ser implementada deve retornar o produto interno entre os dois vetores.\nA função main deve ler o tamanho dos vetores, cada um dos seus elementos e exibir na tela uma mensagem informando o produto interno entre os dois vetores."
  },
  {
    "objectID": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#lista-de-presença",
    "href": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#lista-de-presença",
    "title": "Funções e vetores: exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230516"
  },
  {
    "objectID": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-2",
    "href": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-2",
    "title": "Funções e vetores: exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nFunção Pertence\nImplemente a função pertence:\n\nRetorna verdadeiro se um valor K está dentro de um vetor v ou falso caso contrário\nO vetor v, o seu tamanho n e o valor K são parâmetros de entrada\n\nImplemente também a função main para testar o seu programa."
  },
  {
    "objectID": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-3",
    "href": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-3",
    "title": "Funções e vetores: exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nFunção para Separar Vetor em um Vetor de Pares e outro de Ímpares\nImplemente uma função que receba como parâmetro de entrada um vetor de números inteiros.\nA função deve armazenar em um primeiro vetor de saída todos os números pares e em um segundo, todos os números ímpares.\nImplemente também a função main."
  },
  {
    "objectID": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-4",
    "href": "slides/exercicios_funcoes_e_vetores/exercicios_funcoes_e_vetores.html#exercício-4",
    "title": "Funções e vetores: exercícios",
    "section": "Exercício 4",
    "text": "Exercício 4\nFunção para Informar se Vetor é Conjunto\nUm vetor é considerado um conjunto se nenhum dos valores do vetor se repetem.\nImplemente uma função que receba como parâmetro um vetor e retorne verdadeiro caso ele seja um conjunto ou falso caso contrário.\nImplemente também a função main.\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#nas-aulas-anteriores",
    "href": "slides/14-matrizes/14-matrizes.html#nas-aulas-anteriores",
    "title": "Matrizes",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nVetores\nFunções com vetores"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#objetivo-da-aula",
    "href": "slides/14-matrizes/14-matrizes.html#objetivo-da-aula",
    "title": "Matrizes",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de matrizes:\n\nRepresentação em memória\nDeclaração de matrizes\nInicialização de matrizes\nExercícios"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#motivação",
    "href": "slides/14-matrizes/14-matrizes.html#motivação",
    "title": "Matrizes",
    "section": "Motivação",
    "text": "Motivação\nExercício\nImplemente um programa que leia dois números inteiros M e N e em seguida, leia as N notas de M turmas. O programa deve apresentar todas as turmas onde encontra-se a maior nota.\nTemos o que é necessário para implementar uma solução para este problema?"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#matriz",
    "href": "slides/14-matrizes/14-matrizes.html#matriz",
    "title": "Matrizes",
    "section": "Matriz",
    "text": "Matriz\n\nArmazena dados em formato de tabela\nEstrutura bidimensional:\n\nnl linhas\nnc colunas\nnl x nc elementos (de um mesmo tipo)"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#matriz-1",
    "href": "slides/14-matrizes/14-matrizes.html#matriz-1",
    "title": "Matrizes",
    "section": "Matriz",
    "text": "Matriz\nAlém das matrizes conhecidas da matemática, matrizes em C++ podem armazenar outros tipos de dados:\n\nNotas de alunos por sala\nDistâncias entre cidades\nRelações entre pessoas\nEtc."
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#declarando-uma-matriz",
    "href": "slides/14-matrizes/14-matrizes.html#declarando-uma-matriz",
    "title": "Matrizes",
    "section": "Declarando uma Matriz",
    "text": "Declarando uma Matriz\nSintaxe\ntipo_da_matriz nome_da_matriz[n_linhas][n_colunas];\n\ntipo_da_matriz são os tipos de variáveis conhecidos: int, char, float, bool.\nnome_da_matriz segue as mesmas regras que usamos para variáveis\nn_linhas é uma expressão para o número de linhas da matriz cujo tipo deve ser int\nn_colunas é uma expressão para o número de colunas da matriz cujo tipo deve ser int"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#declarando-uma-matriz-1",
    "href": "slides/14-matrizes/14-matrizes.html#declarando-uma-matriz-1",
    "title": "Matrizes",
    "section": "Declarando uma Matriz",
    "text": "Declarando uma Matriz\nExercício\nEscrever declaração de matriz:\n\nDo tipo real e tamanho 2 x 2, chamada A\nDo tipo caractere e tamanho 10 x 10, chamada img\nDo tipo inteiro e tamanho nl x nc, chamada mat"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#declarando-uma-matriz-2",
    "href": "slides/14-matrizes/14-matrizes.html#declarando-uma-matriz-2",
    "title": "Matrizes",
    "section": "Declarando uma Matriz",
    "text": "Declarando uma Matriz\nExercício: Solução\n1. float A[2][2];\n2. char img[10][10];\n3. int mat[nl][nc];"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#matriz-2",
    "href": "slides/14-matrizes/14-matrizes.html#matriz-2",
    "title": "Matrizes",
    "section": "Matriz",
    "text": "Matriz\nRepresentação em Memória"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz",
    "href": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz",
    "title": "Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nAcesso a Elementos de Matrizes\n\nUma matriz com nl linhas e nc colunas:\n\nTem índices de linhas válidos que vão de 0 até nl-1\nTem índices de colunas válidos que vão de 0 até nc-1\n\nUma matriz m não pode ser usada diretamente em expressões\nCada elemento m[0][0],m[0][1], …, m[nl-1][nc-1] é que deve ser usado"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-1",
    "href": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-1",
    "title": "Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nAcesso a Elementos de Matrizes\nPara acessar cada elemento da matriz m:\n\nO primeiro índice acessa a linha da matriz\nO segundo índice acessa a coluna da matriz\nExemplo: m[2][0] acessa a terceira linha e primeira coluna"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-2",
    "href": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-2",
    "title": "Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nExercício\n\n\n\n\n\n\n\n\n\nQual o valor de cada expressão a seguir, sendo x = 1?\n\nm[0][0] + m[0][1]\nm[0][3*x-1]\nm[m[2][1]][x+1]\nm[0][-1]\nm[3][3]\nm[3][1000]"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-3",
    "href": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-3",
    "title": "Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nPercorrendo uma Matriz\nPara acessar cada elemento de uma matriz de forma automática, é necessário iterar todas as colunas de todas as linhas da matriz. Ou seja:\n\nUm for para variar o índice da linha\nUm for para variar o índice da coluna\nOs laços devem estar aninhados\nA ordem dos laços pode ou não influenciar no resultado, dependendo do uso final do laço no algoritmo"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-4",
    "href": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-4",
    "title": "Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nExercício: Leitura de Dados\nImplemente um programa que leia do usuário as dimensões de uma matriz de inteiros e que leia também cada um de seus elementos.\nImprima a matriz no formato adequado na tela."
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-5",
    "href": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-5",
    "title": "Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nExercício: Solução\nint main(){\n    int nl, nc;\n    cin >> nl >> nc;\n    int m[nl][nc], i, j;\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cin >> m[i][j];\n        }\n    }\n\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cout << m[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#lista-de-presença",
    "href": "slides/14-matrizes/14-matrizes.html#lista-de-presença",
    "title": "Matrizes",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231017"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-6",
    "href": "slides/14-matrizes/14-matrizes.html#posições-de-uma-matriz-6",
    "title": "Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nExercício: Impressão de Dados\nO que faz o seguinte programa?\nint main(){\n    int m[3][4], i, j;\n    for(i = 0; i < 3; i++){\n        for(j = 0; j < 4; j++){\n            m[i][j] = 4*i+j+1;\n        }\n    }\n    for(i = 0; i < 3; i++){\n        for(j = 0; j < 4; j++){\n            cout << m[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#inicialização-de-matrizes",
    "href": "slides/14-matrizes/14-matrizes.html#inicialização-de-matrizes",
    "title": "Matrizes",
    "section": "Inicialização de Matrizes",
    "text": "Inicialização de Matrizes\nForma 1:\nint m[3][4] = { {1,2,3,4},\n                {5,6,7,8},\n                {9,10,11,12} };\nForma 2:\nint m[][4] = { {1,2,3,4},\n               {5,6,7,8},\n               {9,10,11,12} };"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#inicialização-de-matrizes-1",
    "href": "slides/14-matrizes/14-matrizes.html#inicialização-de-matrizes-1",
    "title": "Matrizes",
    "section": "Inicialização de Matrizes",
    "text": "Inicialização de Matrizes\nForma 3:\nint m[3][4] = {1,2,3,4,\n               5,6,7,8,\n               9,10,11,12};\nForma 4:\nint m[][4] = {1,2,3,4,\n              5,6,7,8,\n              9,10,11,12};"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#motivação-1",
    "href": "slides/14-matrizes/14-matrizes.html#motivação-1",
    "title": "Matrizes",
    "section": "Motivação",
    "text": "Motivação\nVoltando ao exercício inicial:\nImplemente um programa que leia dois números inteiros M e N e em seguida, leia as N notas de M turmas. O programa deve apresentar todas as turmas onde encontra-se a maior nota.\nComo implementá-lo?"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#exercício-inicial",
    "href": "slides/14-matrizes/14-matrizes.html#exercício-inicial",
    "title": "Matrizes",
    "section": "Exercício Inicial",
    "text": "Exercício Inicial\nSolução\nint main(){\n    int M, N, i, j, lm, cm;\n    cout << \"Informe a quantidade de turmas:\\n\";\n    cin >> M;\n    cout << \"Informe a quantidade de alunos:\\n\";\n    cin >> N;\n    float notas[M][N], maior;\n    cout << \"Informe as notas:\\n\";\n    for(i = 0; i < M; i++){\n        for(j = 0; j < N; j++){\n            cin >> notas[i][j];\n        }\n    }\n    maior = notas[0][0];\n    lm = 0;\n    cm = 0;\n    for(i = 0; i < M; i++){\n        for(j = 0; j < N; j++){\n            if(notas[i][j] > maior){\n                maior = notas[i][j];\n                lm = i;\n                cm = j;\n            }\n        }\n    }\n    for(i = 0; i < M; i++){\n        for(j = 0; j < N; j++){\n            if(notas[i][j] == maior){\n                cout << \"Turma \" << i\n                     << \" tem a maior nota\\n\";\n            }\n        }\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#matrizes-com-mais-de-2-dimensões",
    "href": "slides/14-matrizes/14-matrizes.html#matrizes-com-mais-de-2-dimensões",
    "title": "Matrizes",
    "section": "Matrizes com mais de 2 Dimensões",
    "text": "Matrizes com mais de 2 Dimensões\n\nC++ permite o uso de matrizes com mais do que 2 dimensões\nPor exemplo:\n\nint mat[3][3][3];\n\nNúmero máximo de dimensões depende do compilador"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#exercícios",
    "href": "slides/14-matrizes/14-matrizes.html#exercícios",
    "title": "Matrizes",
    "section": "Exercícios",
    "text": "Exercícios\n\nArmazenar em uma matriz 3 x 3 os 9 primeiros números pares e em seguida, exibir a matriz.\nLer do usuário um número n e em seguida, armazenar em uma matriz de números inteiros a matriz identidade de tamanho n x n. Exiba também a matriz na tela."
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#exercícios-1",
    "href": "slides/14-matrizes/14-matrizes.html#exercícios-1",
    "title": "Matrizes",
    "section": "Exercícios",
    "text": "Exercícios\n\nLer do usuário os elementos de uma matriz de números inteiros com tamanho 3 x 3 e em seguida, exibir na tela a soma dos elementos da diagonal principal\nLer do usuário um número n e em seguida, armazenar os elementos de uma matriz de números inteiros de tamanho n x n. Em seguida, exibir na tela a soma dos elementos da diagonal secundária"
  },
  {
    "objectID": "slides/14-matrizes/14-matrizes.html#sumário",
    "href": "slides/14-matrizes/14-matrizes.html#sumário",
    "title": "Matrizes",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje: matrizes\n\nSintaxe de declaração\nAcesso às posições\nInicialização\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#na-aula-anterior",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#na-aula-anterior",
    "title": "Funções e Matrizes",
    "section": "Na Aula Anterior",
    "text": "Na Aula Anterior\nMatrizes em C++:\n\nDeclaração\nAcesso aos elementos\nInicialização\nExercícios"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#objetivo-da-aula",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#objetivo-da-aula",
    "title": "Funções e Matrizes",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de funções que operam sobre matrizes:\n\nSintaxe\nExercícios"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-e-matrizes",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-e-matrizes",
    "title": "Funções e Matrizes",
    "section": "Funções e Matrizes",
    "text": "Funções e Matrizes\n\nÉ possível passar matrizes como parâmetro de funções\nÉ necessário passar também outros dois parâmetros, relativos ao número de linhas e colunas da matriz"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nMatrizes para Uso em Funções\nPara passar matrizes como parâmetros de funções em C++, é preciso:\n\nA declaração de uma constante global com o número máximo de linhas/colunas de uma matriz (constante MAX, inicializada com um número grande)\nQue todas as matrizes do programa sejam declaradas com esta constante no número de linhas e colunas\nInformar na assinatura da função que cada matriz passada como parâmetro tem MAX colunas"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes-1",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes-1",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nMatrizes para Uso em Funções\n\nIsto acontece por causa de uma limitação da linguagem C++, que exige que o número de colunas de uma matriz passada como parâmetro seja constante\nOs programas implementados podem não usar todas as MAX linhas e MAX colunas das matrizes"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes-2",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes-2",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nMatrizes para Uso em Funções - Função main\nO programa declara matriz com tamanho máximo 100 x 100, mas usa nl x nc elementos\nconst int MAX = 100;\nint main(){\n    int mat[MAX][MAX], nl, nc, i, j;\n    cin >> nl >> nc;\n\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cin >> mat[i][j];\n        }\n    }\n\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cout << mat[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes-3",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#função-com-matrizes-3",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nA linha\nconst int MAX = 100;\né equivalente a\n#define MAX 100"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nSintaxe\nExemplo com uma matriz como parâmetro:\ntipo_func nome_func(tipo_matriz nome_matriz[][MAX],\n                    int n_linhas, int n_cols){\n    corpo da funcao\n}"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-1",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-1",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nSintaxe\n\ntipo_matriz é o tipo da matriz passada como parâmetro: int, char, float, bool.\nnome_matriz é o nome da matriz passada como parâmetro. Observe que o primeiro [] é em branco e o segundo [] deve ter obrigatoriamente o nr. máximo de colunas (no caso, MAX)\nn_linhas é número de linhas da matriz\nn_cols é número de colunas da matriz"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-2",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-2",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nCaso haja mais de uma matriz, é necessário utilizar parâmetros que indiquem o número de linhas e colunas de cada uma delas"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-3",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-3",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nExercícios\nEscrever assinatura da função:\n\nQue imprime uma matriz de inteiros na tela\nQue recebe uma matriz de caracteres e retorna quantos dos elementos na matriz são iguais a um caractere passado como parâmetro\nQue recebe duas matrizes de inteiros de mesmo tamanho e retorna o maior valor dentre todos, seja ele da primeira ou da segunda matriz"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-funções-com-matrizes",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#declaração-de-funções-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Declaração de Funções com Matrizes",
    "text": "Declaração de Funções com Matrizes\nExercícios: Solução\nvoid imprime_matriz(int mat[][MAX], int nl, int nc);\nint conta_ocorrencias(char mat[][MAX], int nl, int nc,\n                      char c);\nint computa_maior(int mat1[][MAX], int mat2[][MAX],\n                  int nl, int nc);"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#lista-de-presença",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#lista-de-presença",
    "title": "Funções e Matrizes",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231019"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-com-matrizes",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Funções com Matrizes",
    "text": "Funções com Matrizes\nChamada de Funções\nNas chamadas às funções, matrizes são passadas como parâmetros utilizando apenas o seu nome (sem colchetes).\nExemplo:\nconst int MAX = 100;\nvoid imprime_mat(int mat[][MAX], int nl, int nc);\nint main(){\n    int m[MAX][MAX], i, j, nl = 2, nc = 4;\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n        m[i][j] = nc*i+j+1;\n        }\n    }\n    imprime_mat(m, nl, nc);\n    return 0;\n}"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-com-matrizes-1",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-com-matrizes-1",
    "title": "Funções e Matrizes",
    "section": "Funções com Matrizes",
    "text": "Funções com Matrizes\nPassagem de Parâmetros\n\nToda matriz passada para funções como parâmetro é passada por referência\nIsto significa que as alterações realizadas nas matrizes se tornam visíveis fora do corpo da função"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-com-matrizes-2",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#funções-com-matrizes-2",
    "title": "Funções e Matrizes",
    "section": "Funções com Matrizes",
    "text": "Funções com Matrizes\nLinhas de uma Matriz como Vetores\nFunções que aceitam um vetor como parâmetro aceitam que uma linha da matriz seja passada na sua chamada. Exemplo:\nvoid imprime_vet(int v[], int n);\n...\nvoid imprime_mat(int mat[][MAX], int nl, int nc){\n    int i = 0;\n    for(i = 0; i < nl; i++){\n        imprime_vet(mat[i], nc);\n    }\n}"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#exercícios-1",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#exercícios-1",
    "title": "Funções e Matrizes",
    "section": "Exercícios",
    "text": "Exercícios\nImplemente as definições das funções:\n\nQue imprime uma matriz de inteiros na tela\nQue recebe uma matriz de caracteres e retorna quantos dos elementos na matriz são iguais a um caractere passado como parâmetro\nQue recebe duas matrizes de inteiros de mesmo tamanho e retorna o maior valor dentre todos, seja ele da primeira ou da segunda matriz"
  },
  {
    "objectID": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#sumário",
    "href": "slides/15-funcoes_e_matrizes/15-funcoes_e_matrizes.html#sumário",
    "title": "Funções e Matrizes",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nSintaxe de implementação de funções com matrizes\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-1",
    "href": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-1",
    "title": "Funções e matrizes: exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nSoma de duas matrizes\nSabendo-se que a soma de duas matrizes de mesmo tamanho é calculada elemento a elemento, implemente uma função que receba como parâmetros de entrada duas matrizes e armazene em um parâmetro de saída a matriz soma.\nA função main deve ler as dimensões das matrizes, os elementos das duas matrizes e exibir o resultado de uma chamada à função solicitada."
  },
  {
    "objectID": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-2",
    "href": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-2",
    "title": "Funções e matrizes: exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nMatriz transposta\nA transposta de uma matriz é obtida transformando-se cada linha da matriz original em uma coluna na nova matriz.\nImplemente uma função que receba como parâmetro de entrada uma matriz e armazene em um parâmetro de saída a sua transposta.\nA função main deve ler as dimensões de uma matriz, cada um dos seus elementos e exibir o resultado de uma chamada à função solicitada."
  },
  {
    "objectID": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#lista-de-presença",
    "href": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#lista-de-presença",
    "title": "Funções e matrizes: exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230530"
  },
  {
    "objectID": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-3",
    "href": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-3",
    "title": "Funções e matrizes: exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nConstruir matriz identidade\nImplemente uma função que receba como parâmetro de entrada um número n e armazene em um parâmetro de saída a matriz identidade de ordem n.\nA função main deve ler do usuário a ordem da matriz identidade desejada e exibir o resultado de uma chamada à função solicitada."
  },
  {
    "objectID": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-4",
    "href": "slides/exercicios_funcoes_e_matrizes/exercicios_funcoes_e_matrizes.html#exercício-4",
    "title": "Funções e matrizes: exercícios",
    "section": "Exercício 4",
    "text": "Exercício 4\nFunção para informar se matriz é de permutação\nUma matriz é uma matriz de permutação se atende aos seguintes requisitos:\n\nÉ formada apenas por 0s e 1s\nPossui apenas um 1 por coluna\nPossui apenas um 1 por linha\n\nImplemente uma função que retorne verdadeiro caso uma matriz seja de permutação ou falso caso contrário.\nImplemente também a função main.\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nUma operação importante em programação, que geralmente é parte da solução de problemas computacionais mais complexos, é a de multiplicar matrizes:\n\n    R = A.B"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-1",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-1",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nDimensões das Matrizes\nLembre-se que, para R = A.B ser possível:\n\nA precisa ter n colunas\nB precisa ter n linhas"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-2",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-2",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nDimensões das Matrizes\nAlém disso:\n\nO número de linhas de A será o número de linhas da matriz resultante R\nO número de colunas de B será o número de colunas da matriz resultante R"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-3",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-3",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nDimensões das Matrizes\nEm outras palavras:\n\nSendo A uma matriz M \\times N\nSendo B uma matriz N \\times O\n\nA matriz resultante R terá tamanho M \\times O"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-4",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-4",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nCálculo do Produto\nPodemos relembrar como se calcula R = A.B através do seguinte exemplo:\n\n    \\begin{bmatrix}\n    0 & 1 & -1 & 0\\\\\n    2 & 3 &  1 & 1\n    \\end{bmatrix}\n    \\begin{bmatrix}\n    1 & 1 & 0\\\\\n    0 & 1 & 1\\\\\n    0 & 0 & 2\\\\\n    0 & 0 & 3\n    \\end{bmatrix}\n    =\n    \\begin{bmatrix}\n    0 & 1 & -1\\\\\n    0 & 9 &  8\n    \\end{bmatrix}"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-5",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-5",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nCálculo do Produto\nEspecificamente, observe que a 1a. linha de R é dada por:\n\n\\begin{align*}\nR_{0,0} & = A_{0,0}.B_{0,0} + A_{0,1}.B_{1,0} + A_{0,2}.B_{2,0} + A_{0,3}.B_{3,0}\\\\\nR_{0,1} & = A_{0,0}.B_{0,1} + A_{0,1}.B_{1,1} + A_{0,2}.B_{2,1} + A_{0,3}.B_{3,1}\\\\\nR_{0,2} & = A_{0,0}.B_{0,2} + A_{0,1}.B_{1,2} + A_{0,2}.B_{2,2} + A_{0,3}.B_{3,2}\\\\\n\\end{align*}"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-6",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-6",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nCálculo do Produto\nE a 2a. linha de R é dada por:\n\n\\begin{align*}\nR_{1,0} & = A_{1,0}.B_{0,0} + A_{1,1}.B_{1,0} + A_{1,2}.B_{2,0} + A_{1,3}.B_{3,0}\\\\\nR_{1,1} & = A_{1,0}.B_{0,1} + A_{1,1}.B_{1,1} + A_{1,2}.B_{2,1} + A_{1,3}.B_{3,1}\\\\\nR_{1,2} & = A_{1,0}.B_{0,2} + A_{1,1}.B_{1,2} + A_{1,2}.B_{2,2} + A_{1,3}.B_{3,2}\\\\\n\\end{align*}"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#lista-de-presença",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#lista-de-presença",
    "title": "Multiplicação de Matrizes",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231026"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-7",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-7",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nCálculo do Produto\nOu seja, podemos dizer que um valor R_{i,j} pode ser calculado pelo seguinte somatório:\n\n    R_{i,j} = \\sum_{k=0}^{n-1}A_{i,k}B_{k,j},\n onde n é o número de colunas de A (e de linhas de B)"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-8",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-8",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nCálculo do Produto\nAlternativamente, observe que cada valor R_{i,j} é igual ao produto interno entre:\n\nO vetor linha i da matriz A\nO vetor coluna j da matriz B"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-9",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-9",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nImplementação de Função\nA implementação da função para calcular o produto entre duas matrizes deve:\n\nConter duas matrizes como parâmetros de entrada (e as suas dimensões)\nConter uma matriz como parâmetro de saída (e as suas dimensões)"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-10",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-10",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nImplementação de Função\nEntão, você pode escolher entre duas estratégias:\n\nComputar cada valor R_{i,j} individualmente, utilizando o somatório\nPara cada valor R_{i,j}, calcular o produto interno entre o vetor linha i de A e o vetor coluna j de B"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-11",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-11",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nImplementação de Função\n\nAs duas formas requerem dois laços para percorrer todas as posições R_{i,j} da matriz resultante\nPara cada R_{i,j} sendo calculado, você precisará:\n\nDe outro laço para calcular o somatório (estratégia 1) ou\nDe uma chamada a uma função que calcula o produto interno entre dois vetores (estatégia 2)"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-12",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-12",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nAcessando Vetores de uma Matriz\nUm truque pode ser usado para a estratégia 2, tornando a implementação bem mais fácil:\n\nEm C++, dada uma matriz M, você pode utilizar M[i] para passar a linha i da matriz para funções que aceitam vetores como parâmetro"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-13",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-13",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nAcessando Vetores de uma Matriz\nOu seja, cada linha de uma matriz pode ser passada para a função:\nint produto_interno(int v1[], int v2[], int n);"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-14",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-14",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nAcessando Vetores de uma Matriz\n\nComo somente é possível passar vetores linha, para passar os vetores coluna da segunda matriz, você pode passar os vetores linha da matriz transposta\n\nEntão:\n\nCalcule a transposta da matriz B\nPara cada R_{i,j}, chame a função produto_interno passando a linha i de A e a linha j de B^t"
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-15",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-15",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nExercício 1. Função para Produto de Matrizes\nImplemente uma função que receba como parâmetros de entrada duas matrizes de números inteiros. A função a ser implementada deve armazenar em um parâmetro de saída a matriz resultante da multiplicação entre as duas matrizes.\nA função main deve ler o tamanho de cada matrizes, cada um dos seus elementos e exibir na tela a matriz computada pela função."
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-16",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-16",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nExercício 2. Modificação na Função\nAo invés de assumir sempre que a multiplicação matricial será possível (ou seja, que o nr. de colunas de A será igual ao nr. de linhas de B), modifique a função, de modo que ela cheque esta condição e retorne verdadeiro caso a multiplicação possa ser realizada ou falso caso contrário."
  },
  {
    "objectID": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-17",
    "href": "slides/multiplicacao_matricial/multiplicacao_matricial.html#multiplicação-de-matrizes-17",
    "title": "Multiplicação de Matrizes",
    "section": "Multiplicação de Matrizes",
    "text": "Multiplicação de Matrizes\nExercício 3. Informar se Matriz é Ortogonal\nDiz-se que uma matriz quadrada A é ortogonal se a condição A^t.A = I, com I sendo a matriz identidade, for satisfeita.\nUtilizando a função implementada no exercício anterior, implemente um programa que leia uma matriz quadrada de números inteiros e informe se tal matriz é ou não ortogonal.\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/revisao_unidade2/revisao_unidade2.html#revisão---unidade-ii",
    "href": "slides/revisao_unidade2/revisao_unidade2.html#revisão---unidade-ii",
    "title": "Revisão - Unidade II",
    "section": "Revisão - Unidade II",
    "text": "Revisão - Unidade II\nLista de Presença\n\n\n\n\n\n\n\nhttps://bit.ly/lip_20231107\n\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#nas-aulas-anteriores",
    "href": "slides/16-strings1/16-strings1.html#nas-aulas-anteriores",
    "title": "Strings I",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nFunções\nVetores e matrizes\nFunções com vetores e matrizes"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#objetivo-da-aula",
    "href": "slides/16-strings1/16-strings1.html#objetivo-da-aula",
    "title": "Strings I",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de strings:\n\nConceito\nEntrada e saída\nFunções de manipulação de strings"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings",
    "href": "slides/16-strings1/16-strings1.html#strings",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\n\n\n\n\n\n\nString:\n\n\nCadeia de caracteres envolvida por aspas duplas \\rightarrow \"\n\n\n\nExemplos:\n\n\"ect\"\n\"linguagem de programacao\""
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-1",
    "href": "slides/16-strings1/16-strings1.html#strings-1",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nAo longo do curso, já utilizamos:\n\nVariáveis para armazenar um único caractere:\nchar carac;\nStrings constantes:\ncout << \"Informe o nr. de linhas\";\n\nE quanto a variáveis para armazenar strings?"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-2",
    "href": "slides/16-strings1/16-strings1.html#strings-2",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nEm C++, strings são vetores de char com um último caractere especial\n\nNão iremos utilizar o tipo string (disponível em C++)\nToda string em C++ termina com o caractere \\0:\n\nCaractere especial delimitador de final de string\nUsado pelos algoritmos/funções que processam strings\nNão é visível e tem código ASCII igual a 0"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-3",
    "href": "slides/16-strings1/16-strings1.html#strings-3",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nDeclaração de uma string em C++:\nchar s[50];"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-4",
    "href": "slides/16-strings1/16-strings1.html#strings-4",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nRepresentação em Memória\n\n\n\n\n\nDada a string acima:\n\nQual o caractere na terceira posição?\nQual o caractere s[5]?"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-5",
    "href": "slides/16-strings1/16-strings1.html#strings-5",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nRepresentação em Memória\n\n\n\n\n\nDada a string acima:\n\nComo poderíamos mudar a string para \"ola mundo\"?\nQual o tamanho da string?"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-6",
    "href": "slides/16-strings1/16-strings1.html#strings-6",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nInicialização\n\nForma 1:\n\nchar s[4] = {'e','c','t','\\0'};\n\nForma 2:\n\nchar s[] = {'e','c','t','\\0'};\n\nForma 3 ('\\0' é inserido automaticamente):\n\nchar s[] = \"ect\";"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-7",
    "href": "slides/16-strings1/16-strings1.html#strings-7",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nStrings vs. Vetor de Caracteres\nUma string é um vetor de caracteres, mas não o contrário\n\nString:\n\nchar s[] = {'e','c','t', '\\0'};\n\nVetor de caracteres (não delimitado com \\0):\n\nchar s[] = {'e','c','t'};\n\nAs regras que valem para vetores valem para strings\nEntretanto, strings oferecem algumas vantagens, como mostradas a seguir"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#lista-de-presença",
    "href": "slides/16-strings1/16-strings1.html#lista-de-presença",
    "title": "Strings I",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231109"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-8",
    "href": "slides/16-strings1/16-strings1.html#strings-8",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nComando de Saída\nPara imprimir uma string, pode-se usar o comando cout, diretamente na variável do tipo string:\nint main(){\n    char str[4] = {'e','c','t','\\0'};\n    cout << str << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-9",
    "href": "slides/16-strings1/16-strings1.html#strings-9",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nComando de Saída\n\nOu seja, não é necessário utilizar um laço como no caso de vetores\nIsto só funciona para strings bem formadas (terminadas com \\0)\n\nCaso contrário, serão impressos vários caracteres a mais (lixo de memória)"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-10",
    "href": "slides/16-strings1/16-strings1.html#strings-10",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nComando de Entrada\n\nPara ler uma string do usuário, pode-se usar o comando cin, diretamente na variável do tipo string:\n\nint main(){\n    char str[10];\n    cin >> str;\n    cout << str << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-11",
    "href": "slides/16-strings1/16-strings1.html#strings-11",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nComando de Entrada\n\nOu seja, também não é necessário um laço\nCom cin, o caractere especial \\0 é inserido automaticamente\nCaso a string possua espaços em branco (' '), ela deve ser lida com um outro comando (próxima aula)"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-12",
    "href": "slides/16-strings1/16-strings1.html#strings-12",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nTamanho Máximo da Variável String\nSobre o tamanho da variável string na declaração:\n\nNo exemplo anterior, a variável str tem tamanho máximo 10\n\nLembre-se que nem todos os espaços reservados para a string serão necessariamente usados\n\nPortanto, o tamanho máximo do texto que cabe na string é 9\n\nIsto por causa do espaço destinado ao caractere especial \\0"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-13",
    "href": "slides/16-strings1/16-strings1.html#strings-13",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nBiblioteca cstring \\rightarrow possui algumas funções úteis:\n\nstrlen: computa o tamanho da string\nstrcpy: computa uma cópia da string\nstrcat: concatena duas strings\nstrcmp: compara duas strings\n\nEstas funções podem ser usadas na resolução de exercícios"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-14",
    "href": "slides/16-strings1/16-strings1.html#strings-14",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nint strlen(char s[]): retorna o tamanho da string s\nvoid strcpy(char dest[], char orig[]): copia o conteúdo de orig para dest"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-15",
    "href": "slides/16-strings1/16-strings1.html#strings-15",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nvoid strcat(char s1[], char s2[]): concatena o conteúdo de s2 na string s1"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-16",
    "href": "slides/16-strings1/16-strings1.html#strings-16",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nint strcmp(char s1[], char s2[]): compara a string s1 com s2 \n\nRetorna 0 se elas forem iguais\nRetorna um número negativo se s1 for “menor” do que s2\nRetorna um número positivo se s1 for “maior” do que s2"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#strings-17",
    "href": "slides/16-strings1/16-strings1.html#strings-17",
    "title": "Strings I",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\nNa função strcmp, “menor”/“maior” não depende dos tamanhos das strings:\n\nA string \"bala\" é “menor” do que \"bola\"\nIsto porque 'a' tem valor ASCII menor do que 'o' (primeiro caractere que difere entre as strings)"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#exercícios",
    "href": "slides/16-strings1/16-strings1.html#exercícios",
    "title": "Strings I",
    "section": "Exercícios",
    "text": "Exercícios\nImplementar cada uma das funções da biblioteca cstring:\n\nint strlen(char s[])\nvoid strcpy(char dest[], char orig[])\nvoid strcat(char s1[], char s2[])\nint strcmp(char s1[], char s2[])"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#exercício",
    "href": "slides/16-strings1/16-strings1.html#exercício",
    "title": "Strings I",
    "section": "Exercício",
    "text": "Exercício\nImplementar programa utilizando funções da biblioteca cstring para:\n\nLer uma string do usuário\nCopiar a string lida para uma segunda string\nChecar se a cópia da string é igual à palavra \"ect\", imprimindo uma mensagem conforme o caso"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#exercício-1",
    "href": "slides/16-strings1/16-strings1.html#exercício-1",
    "title": "Strings I",
    "section": "Exercício",
    "text": "Exercício\nSolução\n#include <cstring>\n\nint main(){\n    char str[10], copia[10], palavra[10] = \"ect\";\n    cin >> str;\n    strcpy(copia, str);\n    if(strcmp(copia, palavra) == 0){\n        cout << \"Iguais\\n\";\n    }\n    else{\n        cout << \"Diferentes\\n\";\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/16-strings1/16-strings1.html#sumário",
    "href": "slides/16-strings1/16-strings1.html#sumário",
    "title": "Strings I",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nStrings\n\nCaractere delimitador \\0\nInicialização\nEntrada/saída\n\nFunções de manipulação de strings\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#na-aula-anterior",
    "href": "slides/17-strings2/17-strings2.html#na-aula-anterior",
    "title": "Strings II",
    "section": "Na Aula Anterior",
    "text": "Na Aula Anterior\nStrings:\n\nEntrada e saída\nAlgoritmos da biblioteca cstring"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#objetivo-da-aula",
    "href": "slides/17-strings2/17-strings2.html#objetivo-da-aula",
    "title": "Strings II",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\n\nIntroduzir comando para leitura de strings com espaços em branco ' '\nExercícios"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings",
    "href": "slides/17-strings2/17-strings2.html#strings",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nRelembrando\n\nVetor de caracteres:\nchar s[] = {'e', 'c', 't'};\nString \\rightarrow vetor de caracteres terminados com \\0:\nchar s[] = {'e', 'c', 't', '\\0'}; char s[] = \"ect\";"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-1",
    "href": "slides/17-strings2/17-strings2.html#strings-1",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nRelembrando\n\nComando de entrada cin insere \\0 automaticamente\nComando de saída cout imprime variável do tipo string diretamente\n\n  int main(){\n        char s[51];\n        cin >> s;\n        cout << s << endl;\n        return 0;\n  }"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-2",
    "href": "slides/17-strings2/17-strings2.html#strings-2",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nEntretanto, com o comando cin, não é possível ler strings com espaços:\n\nNa entrada, espaços em branco ou quebras de linha (tecla enter) informam o final da string digitada pelo usuário\nÉ necessário algum comando que permita a leitura de strings com espaços em branco"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-3",
    "href": "slides/17-strings2/17-strings2.html#strings-3",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\n\nPara ler strings com espaços em branco, a função cin.getline deve ser utilizada\nA entrada do teclado é lida até que uma quebra de linha (tecla enter) seja digitada"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-4",
    "href": "slides/17-strings2/17-strings2.html#strings-4",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\ncin.getline - recebe dois parâmetros:\n\nvariável do tipo string onde o texto deve ser armazenado\nnúmero máximo de caracteres a serem lidos contando com o \\0"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-5",
    "href": "slides/17-strings2/17-strings2.html#strings-5",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\nExemplo:\nint main(){\n    char s[51];\n    cin.getline(s, 51); //le 50 caracteres\n    cout << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#lista-de-presença",
    "href": "slides/17-strings2/17-strings2.html#lista-de-presença",
    "title": "Strings II",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231114"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-6",
    "href": "slides/17-strings2/17-strings2.html#strings-6",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\nProblemas acontecem quando o cin.getline é executado após o comando cin:\nconst int STRMAX = 31;\nint main(){\n    char s[STRMAX];\n    int x;\n    cout << \"Informe um inteiro:\\n\";\n    cin >> x;\n    cout << \"Inteiro informado: \" << x << endl;\n    cout << \"Informe uma string:\\n\";\n    cin.getline(s, STRMAX);\n    cout << \"String informada: \" << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-7",
    "href": "slides/17-strings2/17-strings2.html#strings-7",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\nOu seja, a entrada para a string é ignorada\nInforme um inteiro:\n5\nInteiro informado: 5\nInforme uma string:\nString:"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-8",
    "href": "slides/17-strings2/17-strings2.html#strings-8",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\nPortanto, se for usar cin.getline após o cin:\n\nUsar função cin.ignore() logo após o cin\nIsto evita que o \\n seja considerado como a string digitada"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#strings-9",
    "href": "slides/17-strings2/17-strings2.html#strings-9",
    "title": "Strings II",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\nCódigo correto:\nconst int STRMAX = 31;\nint main(){\n    char s[STRMAX];\n    int x;\n    cout << \"Informe um inteiro:\\n\";\n    cin >> x;\n    cin.ignore();\n    cout << \"Inteiro informado: \" << x << endl;\n    cout << \"Informe uma string:\\n\";\n    cin.getline(s, STRMAX);\n    cout << \"String informada: \" << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#exercícios",
    "href": "slides/17-strings2/17-strings2.html#exercícios",
    "title": "Strings II",
    "section": "Exercícios",
    "text": "Exercícios\nImplemente uma função que remova os espaços em branco de uma string:\n\nEntrada:\nEstudos␣de␣LIP\nSaída:\nEstudosdeLIP\n\nArmazene o resultado em um parâmetro de saída.\nImplemente também a função main para testar a função solicitada."
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#exercícios-1",
    "href": "slides/17-strings2/17-strings2.html#exercícios-1",
    "title": "Strings II",
    "section": "Exercícios",
    "text": "Exercícios\nUm palíndromo é uma palavra/frase que pode ser lida tanto da esquerda para a direita quanto da direita para a esquerda.\nExemplos:\n\nosso\nradar\name o poema\nsubi no onibus"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#exercícios-2",
    "href": "slides/17-strings2/17-strings2.html#exercícios-2",
    "title": "Strings II",
    "section": "Exercícios",
    "text": "Exercícios\nExistem duas versões para o problema:\n\nConsiderando espaços em branco como parte da string:\n\n\nosso é palíndromo\no␣s␣s␣o é palíndromo\nsubi␣no␣onibus não é palíndromo"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#exercícios-3",
    "href": "slides/17-strings2/17-strings2.html#exercícios-3",
    "title": "Strings II",
    "section": "Exercícios",
    "text": "Exercícios\nExistem duas versões para o problema:\n\nDesconsiderando espaços em branco como parte da string:\n\n\nsubi␣no␣onibus é palíndromo\nsubi␣␣␣␣␣no␣␣onibus é palíndromo"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#sumário",
    "href": "slides/17-strings2/17-strings2.html#sumário",
    "title": "Strings II",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nStrings: leitura de strings com espaços\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/17-strings2/17-strings2.html#exercícios-4",
    "href": "slides/17-strings2/17-strings2.html#exercícios-4",
    "title": "Strings II",
    "section": "Exercícios",
    "text": "Exercícios\nImplemente uma função que receba como parâmetro uma string e retorne verdadeiro caso ela seja um palíndromo ou falso caso contrário."
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#nas-aulas-anteriores",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#nas-aulas-anteriores",
    "title": "Tipos Estruturados I",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nStrings"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#objetivo-da-aula",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#objetivo-da-aula",
    "title": "Tipos Estruturados I",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de tipos estruturados:\n\nConceito\nSintaxe de definição e uso em programas"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação",
    "title": "Tipos Estruturados I",
    "section": "Motivação",
    "text": "Motivação\nExercício\nConsidere o seguinte problema:\n\nLer do usuário o nome e a nota de 5 alunos\nImprimir o nome dos alunos com nota inferior à média de todas as notas"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação-1",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação-1",
    "title": "Tipos Estruturados I",
    "section": "Motivação",
    "text": "Motivação\nExercício - Solução I\nconst int STRMAX = 21;\n\nint main(){\n  int n = 5, i;\n  char nomes[n][STRMAX]; //vetor de vetores\n  float notas[n], media = 0.0;\n  for(i = 0; i < n; i++){\n    cout << \"Insira o nome do aluno: \";\n    cin.getline(nomes[i], STRMAX);\n    cout << \"Insira a nota do aluno: \";\n    cin >> notas[i];\n    cin.ignore();\n    media += notas[i];\n  }\n  media /= n;\n  for(i = 0; i < n; i++){\n    if(notas[i] < media){\n      cout << nomes[i]\n           << \" esta abaixo da media\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação-2",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação-2",
    "title": "Tipos Estruturados I",
    "section": "Motivação",
    "text": "Motivação\nRepresentação em Memória - Solução com Par de Vetores\n\n\n\n\n\n\n\n\n\nNa solução utilizada:\n\nDois vetores, um para os nomes e outro para as notas\nNome/nota de um aluno em uma mesma posição\nProgramas sujeitos a falhas"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação-3",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#motivação-3",
    "title": "Tipos Estruturados I",
    "section": "Motivação",
    "text": "Motivação\nE se fossem solicitados dados adicionais para um aluno?\n\nNome\nNota\nMatrícula\nCPF\n\nExiste alguma alternativa a utilizar vários vetores, sendo um para cada dado?"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#tipos-estruturados",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#tipos-estruturados",
    "title": "Tipos Estruturados I",
    "section": "Tipos Estruturados",
    "text": "Tipos Estruturados\n\nMecanismo disponibilizado pela linguagem C++\n\nTambém conhecido como registros ou estruturas\n\nPermite ao programador definir um novo tipo de variável\nAgrupa dados de diferentes tipos\nDados possuem campos, também chamados de membros, atributos ou propriedades"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado",
    "title": "Tipos Estruturados I",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\n\nTipos estruturados são usados para permitir que um programa possua variáveis que representam “coisas” do mundo real"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-1",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-1",
    "title": "Tipos Estruturados I",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nEntão, pense no que você quer representar e que características dela devem estar no programa:\n\nAluno, com nome e nota\nConta bancária, com número, saldo e nome do titular\nCidade, com nome e população\netc."
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-2",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-2",
    "title": "Tipos Estruturados I",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nA definição de tipos estruturados deve vir antes das funções e possui a seguinte sintaxe:\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\nNote o ; (ponto e vírgula) após a última chave"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-3",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-3",
    "title": "Tipos Estruturados I",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\n\nnome_tipo é o nome do tipo estruturado. É uma boa prática definir um tipo com a primeira letra maiúscula"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-4",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-4",
    "title": "Tipos Estruturados I",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\n\ntipo_campo é o tipo (char, int, float…) do campo do tipo estruturado"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-5",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-5",
    "title": "Tipos Estruturados I",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\n\nnome_campo é o nome do campo do tipo estruturado e obedece às mesmas regras de nomear variáveis"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercícios",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercícios",
    "title": "Tipos Estruturados I",
    "section": "Exercícios",
    "text": "Exercícios\nDefinir cada um dos tipos estruturados a seguir:\n\nTipo estruturado para um ponto no plano 2D\nTipo estruturado para conta bancária, com número da agência, número da conta e nome do titular\nTipo estruturado para data, com dia, mês e ano\nTipo estruturado para funcionário, com nome, matrícula, salário, data de nascimento e data de admissão"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução",
    "title": "Tipos Estruturados I",
    "section": "Solução",
    "text": "Solução\n1 - Ponto no Plano 2D\nstruct Ponto2D{\n  float x;\n  float y;\n};"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-1",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-1",
    "title": "Tipos Estruturados I",
    "section": "Solução",
    "text": "Solução\n2 - Conta Bancária\nstruct Conta{\n  int agencia;\n  int numero;\n  char titular[STRMAX];\n};"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-2",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-2",
    "title": "Tipos Estruturados I",
    "section": "Solução",
    "text": "Solução\n3 - Data\nstruct Data{\n  int dia;\n  int mes;\n  int ano;\n};"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-3",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-3",
    "title": "Tipos Estruturados I",
    "section": "Solução",
    "text": "Solução\n4 - Funcionário\nAssumindo que o tipo Data também tenha sido definido:\nstruct Funcionario{\n  char nome[STRMAX];\n  int matricula;\n  float salario;\n  Data data_nascimento;\n  Data data_admissao;\n};\nOu seja, é possível utilizar tipos estruturados como campos de outro tipo estruturado"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-6",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#definindo-um-tipo-estruturado-6",
    "title": "Tipos Estruturados I",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nExemplo - Aluno\nPara o exemplo que motivou a aula, um tipo estruturado chamado Aluno deve ser definido, contendo os campos nome e nota:\nstruct Aluno{\n  char nome[STRMAX];\n  float nota;\n};"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#lista-de-presença",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#lista-de-presença",
    "title": "Tipos Estruturados I",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231116"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAtenção: um tipo estruturado não é uma função"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-1",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-1",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nDeclaração de Variáveis\nApós um tipo estruturado ter sido definido, é possível declarar variáveis do tipo estruturado:\nAluno a1, a2; //declara duas variáveis do tipo Aluno\nToda variável do tipo Aluno possui campos nome e nota que devem ser acessados nos programas"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-2",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-2",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAcesso aos Campos de Variáveis\nApós serem declaradas, variáveis de um tipo estruturado podem ter seus campos acessados por meio do operador . (ponto):\nAluno a;\n...\n\ncin.getline(a.nome, SMAX); //acessa o nome\ncin >> a.nota; //acessa a nota"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-3",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-3",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nDeclaração de Variáveis\nOs campos do tipo Aluno funcionam como variáveis do tipo declarado no campo:\n\nnome funciona como string\nnota funciona como float"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-4",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-4",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAcesso aos Campos de Variáveis\nNo exemplo abaixo, os campos são acessados para serem impressos na tela:\nAluno a;\n...\n\ncout << \"Nome: \" << a.nome << endl; //imprime nome de um aluno\ncout << \"Nota: \" << a.nota << endl; //imprime nota de um aluno"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-5",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-5",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nDeclaração de Variáveis\nAs variáveis do tipo estruturado possuem seus campos inicializados com lixo. Para evitar isto:\nAluno a; //declara variável do tipo Aluno\nstrcpy(a.nome, \"\"); //atribui string vazia ao nome\na.nota = 0.0; //atribui zero à nota"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-6",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-6",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAtribuição de Variáveis do Tipo Estruturado\nÉ possível fazer uma variável de um tipo estruturado receber uma outra do mesmo tipo:\nAluno a1, a2;\na1 = a2; //atribuição funciona como esperado (atribui o valor de cada campo)\n\n//Equivalente a :\na1.nota = a2.nota;\nstrcpy(a1.nome, a2.nome);\nObserve como seria trabalhoso copiar uma variável para outra desta última forma se ela contivesse muitos campos"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-7",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-7",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nVetores de Tipo Estruturado\nTambém é possível declarar vetores do tipo estruturado definido:\nAluno vet_alunos[10]; //vetor com capacidade\n                      //para armazenar 10 variáveis do tipo Aluno"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-8",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-8",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nMatrizes de Tipo Estruturado\nAssim como também é possível declarar matrizes do tipo estruturado definido:\nAluno mat_alunos[10][10]; //matriz com capacidade\n                          //para armazenar 10x10 variáveis do tipo Aluno"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-9",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#utilizando-variáveis-do-tipo-estruturado-9",
    "title": "Tipos Estruturados I",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAcesso aos Campos de Vetores de Tipo Estruturado\n\nPara acessar um campo de uma variável presente em um vetor de um tipo estruturado:\n\nUtilize um número inteiro para acessar uma posição do vetor\nUtilize o operador . para acessar o campo da variável que está nesta posição\n\n\nAluno vet_alunos[10];\n...\ncout << \"Nome: \" <<  vet_alunos[i].nome << endl; //imprime nome do Aluno na posição i\ncout << \"Nota: \" <<  vet_alunos[i].nota << endl; //imprime nota do Aluno na posição i"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-1",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-1",
    "title": "Tipos Estruturados I",
    "section": "Exercício",
    "text": "Exercício\nConsiderando o problema apresentado no início da aula:\n\nLer do usuário o nome e a nota de 5 alunos\nImprimir o nome dos alunos com nota inferior à média de todas as notas\n\nComo ficaria o mesmo com o uso de tipos estruturados?"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-4",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-4",
    "title": "Tipos Estruturados I",
    "section": "Solução",
    "text": "Solução\nUso de Tipos Estruturados\nconst int STRMAX = 21;\n\nstruct Aluno{\n  char nome[STRMAX];\n  float nota;\n};\n\nint main(){\n  int n = 5, i;\n  Aluno alunos[n];\n  float media = 0.0;\n\n  for(i = 0; i < n; i++){\n    cout << \"Insira o nome do aluno: \";\n    cin.getline(alunos[i].nome, STRMAX);\n    cout << \"Insira a nota do aluno: \";\n    cin >> alunos[i].nota;\n    cin.ignore();\n    media += alunos[i].nota;\n  }\n  media /= n;\n\n  for(i = 0; i < n; i++){\n    if(alunos[i].nota < media){\n      cout << alunos[i].nome\n           << \" esta abaixo da media\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-5",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#solução-5",
    "title": "Tipos Estruturados I",
    "section": "Solução",
    "text": "Solução\nRepresentação em Memória - Solução com Uso de Tipos Estruturados\n\n\n\n\n\n\n\n\n\nCom tipos estruturados:\n\nÚnico índice utilizado para todos os dados de um aluno\nTodos os campos de um aluno em uma mesma variável\nProgramas menos sujeitos a falhas"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-1-1",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-1-1",
    "title": "Tipos Estruturados I",
    "section": "Exercício 1",
    "text": "Exercício 1\nDefina um tipo estruturado Data, com os campos dia, mes e ano. Em seguida, implemente um programa que leia do usuário o dia, mês e ano de duas datas e armazene estes valores em variáveis do tipo Data.\nO programa deve imprimir qual das duas datas é cronologicamente maior. Por exemplo 12/12/2007 é maior do que 09/03/2000."
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-1-2",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-1-2",
    "title": "Tipos Estruturados I",
    "section": "Exercício 1",
    "text": "Exercício 1\nSolução\nstruct Data{\n  int dia;\n  int mes;\n  int ano;\n};\n\nint main(){\n  Data d1, d2, maior;\n\n  cout << \"Insira a 1a. data:\\n\";\n  cin >> d1.dia >> d1.mes >> d1.ano;\n  cout << \"Insira a 2a. data:\\n\";\n  cin >> d2.dia >> d2.mes >> d2.ano;\n\n  if(d1.ano > d2.ano){\n    maior = d1;\n  }\n  else if(d2.ano > d1.ano){\n    maior = d2;\n  }\n  else{\n    if(d1.mes > d2.mes){\n      maior = d1;\n    }\n    else if(d2.mes > d1.mes){\n      maior = d2;\n    }\n    else{\n      if(d1.dia > d2.dia){\n        maior = d1;\n      }\n      else{\n        maior = d2;\n      }\n    }\n  }\n  cout << \"Maior data: \" << maior.dia << \"/\"\n                         << maior.mes << \"/\"\n                         << maior.ano << endl;\n\n  return 0;\n}"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-2",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-2",
    "title": "Tipos Estruturados I",
    "section": "Exercício 2",
    "text": "Exercício 2\nDefina um tipo estruturado para representar um Ponto2D, isto é, um ponto com coordenadas x e y. Em seguida, implemente um programa que leia do usuário uma quantidade n e as coordenadas (x,y) de n Pontos2D.\nO programa deve imprimir o Ponto2D mais próximo da origem, sabendo-se que a distância de um ponto para a origem é calculada por d(p) = \\sqrt{p.x^2 + p.y^2}."
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-2-1",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#exercício-2-1",
    "title": "Tipos Estruturados I",
    "section": "Exercício 2",
    "text": "Exercício 2\nSolução\n#include <cmath> //para sqrt e pow\n\nusing namespace std;\n\nstruct Ponto2D{\n  float x;\n  float y;\n};\n\nint main(){\n  int n, i;\n  float dist, menor_dist;\n\n  cout << \"Insira a quantidade de pontos:\\n\";\n  cin >> n;\n  Ponto2D pts[n], mais_prox;\n\n  cout << \"Insira as coordenadas dos pontos:\\n\";\n  for(i = 0; i < n; i++){\n    cin >> pts[i].x >> pts[i].y;\n  }\n\n  mais_prox = pts[0];\n  float dist;\n  float menor_dist = sqrt(pow(pts[0].x,2) +\n                          pow(pts[0].y,2));\n  for(i = 1; i < n; i++){\n    dist = sqrt(pow(pts[i].x,2) + pow(pts[i].y,2));\n    if(dist < menor_dist){\n      dist = menor_dist;\n      mais_prox = pts[i];\n    }\n  }\n  \n  cout << \"Ponto mais proximo: \"\n       << mais_prox.x << \", \"\n       << mais_prox.y << endl;\n\n  return 0;\n}"
  },
  {
    "objectID": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#sumário",
    "href": "slides/18-tipos_estruturados1/18-tipos_estruturados1.html#sumário",
    "title": "Tipos Estruturados I",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nDefinição de tipos estruturados\nOperações com variáveis de tipos estruturados\nVetores de variáveis de tipos estruturados\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#na-aula-anterior",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#na-aula-anterior",
    "title": "Tipos Estruturados II",
    "section": "Na Aula Anterior",
    "text": "Na Aula Anterior\n\nTipos Estruturados"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#objetivo-da-aula",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#objetivo-da-aula",
    "title": "Tipos Estruturados II",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nMais usos de tipos estruturados, principalmente uso em funções"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício",
    "title": "Tipos Estruturados II",
    "section": "Exercício",
    "text": "Exercício\nRelembrando o problema apresentado na aula anterior:\n\nLer do usuário o nome e a nota de 5 alunos\nImprimir o nome dos alunos com nota inferior à média de todas as notas\n\nComo ficaria o mesmo com o uso de tipos estruturados?"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#solução",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#solução",
    "title": "Tipos Estruturados II",
    "section": "Solução",
    "text": "Solução\nUso de Tipos Estruturados\nconst int STRMAX = 21;\n\nstruct Aluno{\n  char nome[STRMAX];\n  float nota;\n};\n\nint main(){\n  int n = 5, i;\n  Aluno alunos[n];\n  float media = 0.0;\n\n  for(i = 0; i < n; i++){\n    cout << \"Insira o nome do aluno: \";\n    cin.getline(alunos[i].nome, STRMAX);\n    cout << \"Insira a nota do aluno: \";\n    cin >> alunos[i].nota;\n    cin.ignore();\n    media += alunos[i].nota;\n  }\n  media /= n;\n\n  for(i = 0; i < n; i++){\n    if(alunos[i].nota < media){\n      cout << alunos[i].nome\n           << \" esta abaixo da media\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#motivação",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#motivação",
    "title": "Tipos Estruturados II",
    "section": "Motivação",
    "text": "Motivação\nE se desejássemos implementar o mesmo programa com uma função, como poderíamos proceder?\n\nFunção imprime_alunos_abaixo_da_media: imprime todos os alunos que estão abaixo da média"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipos-estruturados-e-funções",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipos-estruturados-e-funções",
    "title": "Tipos Estruturados II",
    "section": "Tipos Estruturados e Funções",
    "text": "Tipos Estruturados e Funções\nAssinatura de Funções\nTipos estruturados em funções - mesmas regras de uma variável qualquer:\n\nFunção que retorna o aluno com maior nota em um vetor de alunos:\n\nAluno calcula_maior_nota(Aluno v[], int n);"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipos-estruturados-e-funções-1",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipos-estruturados-e-funções-1",
    "title": "Tipos Estruturados II",
    "section": "Tipos Estruturados e Funções",
    "text": "Tipos Estruturados e Funções\nAssinatura de Funções\nTipos estruturados em funções - mesmas regras de uma variável qualquer:\n\nFunção que armazena o aluno com a menor nota e o aluno com a maior nota em parâmetros de saída:\n\nvoid calcula_menor_maior_nota(Aluno v[], int n, \n                              Aluno& menor,\n                              Aluno& maior);"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipos-estruturados-e-funções-2",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipos-estruturados-e-funções-2",
    "title": "Tipos Estruturados II",
    "section": "Tipos Estruturados e Funções",
    "text": "Tipos Estruturados e Funções\nChamadas de Funções\nAssumindo variáveis declaradas como\nAluno a_menor, a_maior, alunos[MAX];\nPassagem de parâmetros nas chamadas de funções também não se alteram:\n//var. recebe o retorno\na_maior = calcula_maior_nota(alunos, n);\n\n//chamada armazena o resultado em parametros de saida\ncalcula_menor_maior_nota(alunos, n, a_menor, a_maior);"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#lista-de-presença",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#lista-de-presença",
    "title": "Tipos Estruturados II",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231123"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-1",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-1",
    "title": "Tipos Estruturados II",
    "section": "Exercício 1",
    "text": "Exercício 1\nReimplemente o exercício do início desta aula com uma função que imprime todos os alunos abaixo da média. Ou seja, a função deve receber como parâmetro de entrada um vetor do tipo Aluno (além do seu tamanho)."
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-1-1",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-1-1",
    "title": "Tipos Estruturados II",
    "section": "Exercício 1",
    "text": "Exercício 1\nSolução\nconst int STRMAX = 21;\n\nstruct Aluno{\n  char nome[STRMAX];\n  float nota;\n};\n\nvoid imprime_alunos_abaixo_media(Aluno v[], int n){\n  int i;\n  float media = 0.0;\n\n  //Calcula a média dos alunos\n  for(i = 0; i < n; i++){\n    media += v[i].nota;\n  }\n  media /= n;\n\n  //Imprime os alunos abaixo da média\n  for(i = 0; i < n; i++){\n    if(v[i].nota < media){\n      cout << v[i].nome\n           << \" esta abaixo da media\\n\";\n    }\n  }\n}\n\nint main(){\n  int n = 5, i;\n  Aluno alunos[n];\n\n  //Lê do usuário os dados dos alunos\n  for(i = 0; i < n; i++){\n    cout << \"Insira o nome do aluno: \";\n    cin.getline(alunos[i].nome, STRMAX);\n    cout << \"Insira a nota do aluno: \";\n    cin >> alunos[i].nota;\n    cin.ignore();\n  }\n\n  imprime_alunos_abaixo_media(alunos, n);\n\n  return 0;\n}"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipo-estruturado-para-uma-matriz",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipo-estruturado-para-uma-matriz",
    "title": "Tipos Estruturados II",
    "section": "Tipo Estruturado para uma Matriz",
    "text": "Tipo Estruturado para uma Matriz\n\nGrande vantagem de tipos estruturados: tipo estruturado Matriz reduz a quantidade de parâmetros das funções\nPara isto, o tipo Matriz deve ter como campos:\n\nO número de linhas da matriz\nO número de colunas da matriz\nUma matriz de números inteiros, caracteres ou números reais, conforme pede o problema, alocada com espaço suficiente"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipo-estruturado-para-uma-matriz-1",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#tipo-estruturado-para-uma-matriz-1",
    "title": "Tipos Estruturados II",
    "section": "Tipo Estruturado para uma Matriz",
    "text": "Tipo Estruturado para uma Matriz\nAssim, uma função que lê uma matriz de números inteiros, que tem como assinatura:\nvoid le_mat(int mat[][MAX], int nl, int nc);\nPassa a ter uma assinatura mais compacta dada por:\nvoid le_mat(Matriz& mat);\n(Note o parâmetro passado por referência)."
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-2",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-2",
    "title": "Tipos Estruturados II",
    "section": "Exercício 2",
    "text": "Exercício 2\nDefina um tipo estruturado Matriz, que deve armazenar uma matriz de números inteiros, o seu número de linhas e o seu número de colunas.\nEm seguida, implemente uma função que receba como parâmetro duas matrizes e retorne a soma matricial.\nImplemente também a função main, de modo que o usuário possa inserir os dados das matrizes e testar o programa."
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-2-1",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-2-1",
    "title": "Tipos Estruturados II",
    "section": "Exercício 2",
    "text": "Exercício 2\nSolução\nconst int MAX = 21;\n\nstruct Matriz{\n  int nl;\n  int nc;\n  int numeros[MAX][MAX];\n};\n\nvoid le_mat(Matriz& m){\n  int i, j;\n\n  cin >> m.nl;\n  cin >> m.nc;\n  for(i = 0; i < m.nl; i++){\n    for(j = 0; j < m.nc; j++){\n      cin >> m.numeros[i][j];\n    }\n  }\n}\n\nvoid imprime_mat(Matriz m){\n  int i, j;\n\n  for(i = 0; i < m.nl; i++){\n    for(j = 0; j < m.nc; j++){\n      cout << m.numeros[i][j] << \" \";\n    }\n    cout << endl;\n  }\n}\n\nMatriz soma_matrizes(Matriz m1, Matriz m2){\n  int i, j;\n  Matriz r;\n\n  r.nl = m1.nl;\n  r.nc = m1.nc;\n  for(i = 0; i < m1.nl; i++){\n    for(j = 0; j < m1.nc; j++){\n      r.numeros[i][j] = m1.numeros[i][j] + m2.numeros[i][j];\n    }\n  }\n\n  return r;\n}\n\nint main(){\n  Matriz mat1, mat2, mat_soma;\n\n  cout << \"Insira a matriz 1:\\n\";\n  le_mat(mat1);\n  cout << \"Insira a matriz 2:\\n\";\n  le_mat(mat2);\n\n  mat_soma = soma_matrizes(mat1, mat2);\n\n  imprime_mat(mat_soma);\n\n  return 0;\n}"
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-3",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#exercício-3",
    "title": "Tipos Estruturados II",
    "section": "Exercício 3",
    "text": "Exercício 3\nImplemente uma função que calcula o produto matricial. A função deve ter dois parâmetros de entrada do tipo Matriz e retornar uma Matriz como resultado."
  },
  {
    "objectID": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#sumário",
    "href": "slides/19-tipos_estruturados2/19-tipos_estruturados2.html#sumário",
    "title": "Tipos Estruturados II",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nUso de tipos estruturados em funções\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#nas-aulas-anteriores",
    "href": "slides/20-ordenacao/20-ordenacao.html#nas-aulas-anteriores",
    "title": "Ordenação",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nTipos estruturados"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#objetivo-da-aula",
    "href": "slides/20-ordenacao/20-ordenacao.html#objetivo-da-aula",
    "title": "Ordenação",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\n\nApresentar uma solução para ordenação de vetores"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\n\nO problema de ordenação possui diversas soluções\nOrdenação pode fazer parte de soluções de programas maiores"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-1",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-1",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nIdeia do Algoritmo\nOrdenar vetor de números inteiros acima em ordem crescente:\n\n\n\n\n\n\nPercorra cada elemento do vetor"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-2",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-2",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nIdeia do Algoritmo\nOrdenar vetor de números inteiros acima em ordem crescente:\n\n\n\n\n\n\nChame o elemento na posição atual de chave, e compare-o com todos"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-3",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-3",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nIdeia do Algoritmo\nOrdenar vetor de números inteiros acima em ordem crescente:\n\n\n\n\n\n\nRealize uma troca entre o elemento comparado e o elemento chave caso este último seja maior"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-4",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-4",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 1/11\n\n\n\n\n\n\nElemento chave: v[0] = 5\nElemento comparado: v[1] = 3\nv[0] > v[1] \\rightarrow verdadeiro, trocar v[0] com v[1]\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-5",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-5",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 2/11\n\n\n\n\n\n\nElemento chave: v[0] = 3\nElemento comparado: v[2] = -1\nv[0] > v[2] \\rightarrow verdadeiro, trocar v[0] com v[2]\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-6",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-6",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 3/11\n\n\n\n\n\n\nElemento chave: v[0] = -1\nElemento comparado: v[3] = 8\nv[0] > v[3] \\rightarrow falso,\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-7",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-7",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 4/11\n\n\n\n\n\n\nElemento chave: v[0] = -1\nElemento comparado: v[4] = 4\nv[0] > v[4] \\rightarrow falso,\nFim das comparações com o elemento chave atual: ir para o próximo elemento chave e recomeçar comparações com todos depois dele"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-8",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-8",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 5/11\n\n\n\n\n\n\nElemento chave: v[1] = 5\nElemento comparado: v[2] = 3\nv[1] > v[2] \\rightarrow verdadeiro, trocar v[1] com v[2]\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-9",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-9",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 6/11\n\n\n\n\n\n\nElemento chave: v[1] = 3\nElemento comparado: v[3] = 8\nv[1] > v[3] \\rightarrow falso,\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-10",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-10",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 7/11\n\n\n\n\n\n\nElemento chave: v[1] = 3\nElemento comparado: v[4] = 4\nv[1] > v[4] \\rightarrow falso,\nFim das comparações com o elemento chave atual: ir para o próximo elemento chave e recomeçar comparações com todos depois dele"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-11",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-11",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 8/11\n\n\n\n\n\n\nElemento chave: v[2] = 5\nElemento comparado: v[3] = 8\nv[2] > v[3] \\rightarrow falso,\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-12",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-12",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 9/11\n\n\n\n\n\n\nElemento chave: v[2] = 5\nElemento comparado: v[4] = 4\nv[2] > v[4] \\rightarrow verdadeiro, trocar v[2] com v[4]\nFim das comparações com o elemento chave atual: ir para o próximo elemento chave e recomeçar comparações com todos depois dele"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-13",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-13",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 10/11\n\n\n\n\n\n\nElemento chave: v[3] = 8\nElemento comparado: v[4] = 5\nv[3] > v[4] \\rightarrow verdadeiro, trocar v[3] com v[4]\nFim das comparações com o elemento chave atual. O último elemento chave não possui nenhum elemento após ele."
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-14",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-14",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 11/11\n\n\n\n\n\n\nTodas as comparações realizadas\nO vetor está ordenado"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-15",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-15",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nNa solução apresentada, o vetor é um parâmetro de entrada e saída"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-16",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-16",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nO elemento chave é v[i]\nO elemento comparado é v[j]\nÉ necessário um laço que percorra os índices 0,1,...,n-2, para cada chave: for(i = 0; i < n-1; i++)"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-17",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-17",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nÉ necessário um laço que passe por cada elemento a ser comparado que está depois da chave atual: for(j = i+1; j < n; j++)"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-18",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-18",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nElementos na parte ordenada do vetor não devem ser comparados: isto deixará o algoritmo incorreto"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-19",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-19",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nFora isso, basta incluir as operações de comparação e troca entre elementos"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#lista-de-presença",
    "href": "slides/20-ordenacao/20-ordenacao.html#lista-de-presença",
    "title": "Ordenação",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231130"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#exercício",
    "href": "slides/20-ordenacao/20-ordenacao.html#exercício",
    "title": "Ordenação",
    "section": "Exercício",
    "text": "Exercício\nUtilizando um tipo estruturado Aluno, que deve possuir nome, matrícula e nota, implemente uma função que ordene um vetor com n alunos por ordem crescente de nota.\nImplemente também a função main, de modo que o usuário possa inserir a quantidade de alunos n, o nome, matrícula e a nota para cada um dos n alunos e então visualizar na tela os dados de todos os alunos ordenados por nota."
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-20",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-20",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nCódigo da Função - Ordem Crescente\nvoid ordena_crescente(int v[], int n){\n    int i, j, aux;\n    for(i = 0; i < n-1; i++){\n        for(j = i+1; j < n; j++){\n            if(v[i] > v[j]){\n                aux = v[i];\n                v[i] = v[j];\n                v[j] = aux;\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-21",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-21",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nFunção main\nint main(){\n    int n, i;\n    cin >> n;\n    int v[n];\n    for(i = 0; i < n; i++){\n        cin >> v[i];\n    }\n    ordena_crescente(v, n);\n    for(i = 0; i < n; i++){\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#outros-exercícios",
    "href": "slides/20-ordenacao/20-ordenacao.html#outros-exercícios",
    "title": "Ordenação",
    "section": "Outros Exercícios",
    "text": "Outros Exercícios\n\nE quanto à ordenação por matrícula?\nE quanto à ordenação por ordem decrescente?\nE quanto à ordenação por ordem alfabética?"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-22",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-22",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nSolução - Ordem Crescente de Notas\nvoid ordena_crescente(Aluno v[], int n){\n    int i, j;\n    Aluno aux;\n    for(i = 0; i < n-1; i++){\n        for(j = i+1; j < n; j++){\n            if(v[i].nota > v[j].nota){\n                aux = v[i];\n                v[i] = v[j];\n                v[j] = aux;\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-23",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-23",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nSolução - Função main\nint main(){\n    int n, i;\n    cin >> n;\n    Aluno alunos[n];\n    for(i = 0; i < n; i++){\n        cin.ignore();\n        cin.getline(alunos[i].nome, MAXNOME);\n        cin >> alunos[i].matricula;\n        cin >> alunos[i].nota;\n    }\n    ordena_crescente(alunos, n);\n    for(i = 0; i < n; i++){\n        cout << alunos[i].nome << \" \"\n             << alunos[i].matricula << \" \"\n             << alunos[i].nota << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#sumário",
    "href": "slides/20-ordenacao/20-ordenacao.html#sumário",
    "title": "Ordenação",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nOrdenação\nOrdenação com tipos estruturados\n\nOrdem crescente/decrescente de campos numéricos\nOrdem alfabética de campos string\n\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch",
    "title": "Ordenação",
    "section": "Ordenação {.nostretch}",
    "text": "Ordenação {.nostretch}\nIdeia do Algoritmo\n\n\nOrdenar vetor de números inteiros acima em ordem crescente:\n\nChame o elemento na posição atual de chave, e compare-o com todos"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch-1",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch-1",
    "title": "Ordenação",
    "section": "Ordenação {.nostretch}",
    "text": "Ordenação {.nostretch}\nIdeia do Algoritmo\n\n\nOrdenar vetor de números inteiros acima em ordem crescente:\n\nRealize uma troca entre o elemento comparado e o elemento chave caso este último seja maior"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch-2",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch-2",
    "title": "Ordenação",
    "section": "Ordenação {.nostretch}",
    "text": "Ordenação {.nostretch}\nIdeia do Algoritmo\n\n\nOrdenar vetor de números inteiros acima em ordem crescente:\n\nRealize uma troca entre o elemento comparado e o elemento chave caso este último seja maior"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch-auto-animatetrue",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-.nostretch-auto-animatetrue",
    "title": "Ordenação",
    "section": "Ordenação {.nostretch, auto-animate=true}",
    "text": "Ordenação {.nostretch, auto-animate=true}\nIdeia do Algoritmo\n\n\nOrdenar vetor de números inteiros acima em ordem crescente:\n\nPercorra cada elemento do vetor"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-24",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-24",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nOrdem Alfabética\nFunção strcmp - duas strings como parâmetros: - Retorna um número negativo se a string do primeiro parâmetros for “menor” - Retorna um número positivo se a string do primeiro parâmetros for “maior” - Retorna 0 se as strings são iguais"
  },
  {
    "objectID": "slides/20-ordenacao/20-ordenacao.html#ordenação-25",
    "href": "slides/20-ordenacao/20-ordenacao.html#ordenação-25",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nOrdem Alfabética\nEntão, para ordenar alfabeticamente:\n\nstrcmp(alunos[i].nome, alunos[j].nome) retorna um número positivo se o nome do aluno i for alfabeticamente maior do que o nome do aluno j"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#contexto-treinos-de-corrida",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#contexto-treinos-de-corrida",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Contexto: Treinos de Corrida",
    "text": "Contexto: Treinos de Corrida\nImagine um aplicativo que registra treinos de corrida, ou seja, o dia, distância, tempo e ritmo que uma pessoa correu."
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#contexto-treinos-de-corrida-1",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#contexto-treinos-de-corrida-1",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Contexto: Treinos de Corrida",
    "text": "Contexto: Treinos de Corrida"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nTreinos de Corrida\nConsidere um treino de corrida. Ele contém:\n\nUma data\nUma duração (horas, minutos e segundos)\nUma distância dada em quilômetros\nUm pace (ritmo por quilômetro), dado em minutos e segundos\n\nTendo em mente que você vai precisar ordenar por data, duração e pace…"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1-1",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1-1",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nTreinos de Corrida\nImplemente os tipos estruturados:\n\nData, com os campos dia, mes e ano\nDuracao, com os campos hor, min e seg\nPace, com os campos min e seg\nCorrida, com os campos data, duracao, pace e distancia"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-2",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-2",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nOrdenando Datas\nAgora, divida o seu programa, se concentrando em implementar uma função para ordenar um vetor de Data, da mais antiga para a mais recente.\nComo você pode implementar esta função?\nObserve que é para ordenar um vetor de Data e não de Corrida"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#lista-de-presença",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#lista-de-presença",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230629"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-3",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-3",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nOrdenando Datas - Função Main\nImplemente a função main para testar a função do exercício anterior:\n\nDeve ler uma quantidade n de datas\nDeve ler o dia, mês e ano de n datas\nChamar a função de ordenar por datas\nExibir o resultado na tela"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-4",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-4",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício 4",
    "text": "Exercício 4\nLendo Dados de Corrida\nImplemente um função que receba uma Corrida como parâmetro de entrada e saída.\nA função deve ler, na ordem:\n\nA data da corrida (dia, mês e ano)\nA duração da corrida (hora, min. e seg.)\nA distância da corrida (em Km)\n\nFaça a função main exibir os dados lidos em um formato adequado."
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-5",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-5",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício 5",
    "text": "Exercício 5\nCalculando o Pace\n\nO pace é dado na quantidade de minutos e segundos que uma pessoa leva para percorrer 1 Km\n\nEx: se uma pessoa corre 10Km em 1h 03 min e 35 seg, o pace desta pessoa foi de 6:22/Km (arredondando para cima)."
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-5-1",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-5-1",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício 5",
    "text": "Exercício 5\nCalculando o Pace\nImplemente um programa que calcule o pace dada uma duração.\nO pace é calculado por:\n\nTransformando a duração em segundos/Km\nO quociente da divisão da transformação por 60 é a quantidade de minutos do pace\nO resto da divisão da transformação por 60 é a quantidade de segundos do pace"
  },
  {
    "objectID": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-completo",
    "href": "slides_antigos/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-completo",
    "title": "Tipos Estruturados e Ordenação - Exercícios",
    "section": "Exercício Completo",
    "text": "Exercício Completo\nImplemente funções para:\n\nOrdenar um vetor de Corrida por duração\nOrdenar um vetor de Corrida por pace\n\nNa função main, implemente um menu, a partir do qual o usuário pode escolher como quer visualizar suas corridas (opção 0 ordena por data, 1 por duração e 2 por pace).\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#nas-aulas-anteriores",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#nas-aulas-anteriores",
    "title": "Aplicações com Matriz de Relações",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\nTudo :)\n\nFunções\nVetores e matrizes\nStrings\nTipos estruturados"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#objetivo-da-aula",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#objetivo-da-aula",
    "title": "Aplicações com Matriz de Relações",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\n\nMostrar aplicações do conteúdo da disciplina em problemas contendo matrizes de relações"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações",
    "title": "Aplicações com Matriz de Relações",
    "section": "Matriz de Relações",
    "text": "Matriz de Relações\nMatriz que armazena as relações entre coisas do mundo real:\n\nAmizades entre pessoas (redes sociais)\nDistâncias entre cidades\nPartidas entre times de futebol\netc."
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações-1",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações-1",
    "title": "Aplicações com Matriz de Relações",
    "section": "Matriz de Relações",
    "text": "Matriz de Relações\nExemplo: Voos entre Cidades"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações-2",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações-2",
    "title": "Aplicações com Matriz de Relações",
    "section": "Matriz de Relações",
    "text": "Matriz de Relações\nExemplo: Voos entre Cidades\nA matriz armazena quantos voos diários diretos saem de uma cidade para outra:"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações-3",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#matriz-de-relações-3",
    "title": "Aplicações com Matriz de Relações",
    "section": "Matriz de Relações",
    "text": "Matriz de Relações\nExemplo: Voos entre Cidades\nPara a relação na linha i e coluna j:\n\nOrigem é a cidade no vetor na posição i\nDestino é a cidade no vetor na posição j\nEx.: na posição [0][2]: voos que saem de Natal para o São Paulo"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações",
    "title": "Aplicações com Matriz de Relações",
    "section": "Aplicações Matriz de Relações",
    "text": "Aplicações Matriz de Relações\nExemplo: Voos entre Cidades\nPossíveis perguntas:\n\nExiste voo entre cidade_a e cidade_b?\nDe qual cidade saem mais voos?\nQual cidade recebe mais voos?\nExiste voo entre cidade_a e cidade_b, com apenas uma conexão?\nÉ possível partir da cidade_a e chegar na cidade_b, independentemente do número de voos?"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-1",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-1",
    "title": "Aplicações com Matriz de Relações",
    "section": "Aplicações Matriz de Relações",
    "text": "Aplicações Matriz de Relações\nExemplo: Voos entre Cidades\nPara começar a responder a estas perguntas, o programa deve ler os dados das cidades no seguinte formato:\n6\nNatal\n90000\nCampo Grande\n916000\nSao Paulo\n12400000\nRio de Janeiro\n6750000\nPorto Alegre\n1500000\nManaus\n2000000"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-2",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-2",
    "title": "Aplicações com Matriz de Relações",
    "section": "Aplicações Matriz de Relações",
    "text": "Aplicações Matriz de Relações\nExemplo: Voos entre Cidades\nApós ler os dados das cidades, os dados da matriz de relações devem ser lidos:\n-1  0  2  2  1  1\n 0 -1  3  2  1  0\n 3  2 -1  5  4  4\n 2  1  3 -1  3  2\n 1  0  3  3 -1  0\n 1  0  2  2  0 -1"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#lista-de-presença",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#lista-de-presença",
    "title": "Aplicações com Matriz de Relações",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231207"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-3",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-3",
    "title": "Aplicações com Matriz de Relações",
    "section": "Aplicações Matriz de Relações",
    "text": "Aplicações Matriz de Relações\nExemplo: Voos entre Cidades\n\nExiste voo entre cidade_a e cidade_b?\n\nPrograma:\n\nLer os nomes das duas cidades\nObter a posição no vetor i da cidade_a e j da cidade_b\nObter valor na matriz na posição [i][j]: existe voo se este valor for > 0"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-4",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-4",
    "title": "Aplicações com Matriz de Relações",
    "section": "Aplicações Matriz de Relações",
    "text": "Aplicações Matriz de Relações\nExemplo: Voos entre Cidades\n\n\n\n\n\n\nNeste ponto do curso, você deve ser capaz de pensar por conta própria em:\n\nQue tipos estruturados o seu programa deve ter\nQue funções o seu programa deve ter"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-5",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-5",
    "title": "Aplicações com Matriz de Relações",
    "section": "Aplicações Matriz de Relações",
    "text": "Aplicações Matriz de Relações\nSolução: Voos entre Cidades\n#include <iostream>\n#include <cstring>\n\nusing namespace std;\n\nconst int MAX = 100;\nconst int SMAX = 31;\n\nstruct Cidade{\n    char nome[SMAX];\n    int populacao;\n};\n\nstruct Matriz{\n    int nl;\n    int nc;\n    int dados[MAX][MAX];\n};\n\nvoid le_cidades(Cidade v[], int &n, Matriz &m){\n    int i, j;\n\n    cin >> n;\n\n    for(i = 0; i < n; i++){\n        cin.ignore();\n        cin.getline(v[i].nome, SMAX);\n        cin >> v[i].populacao;\n    }\n\n    m.nl = n;\n    m.nc = n;\n    for(i = 0; i < m.nl; i++){\n        for(j = 0; j < m.nc; j++){\n            cin >> m.dados[i][j];\n        }\n    }\n}\n\nvoid imprime_cidades(Cidade v[], int n){\n    int i;\n\n    for(i = 0; i < n; i++){\n        cout << v[i].nome << endl;\n        cout << v[i].populacao << endl;\n    }\n}\n\nvoid imprime_relacoes(Matriz m){\n    int i, j;\n\n    for(i = 0; i < m.nl; i++){\n        for(j = 0; j < m.nc; j++){\n            cout << m.dados[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nint acha_indice(Cidade v[], int n, char nome[]){\n    int i;\n\n    for(i = 0; i < n; i++){\n        if(strcmp(v[i].nome, nome) == 0){\n            return i;\n        }\n    }\n    return -1;\n}\n\nint voos_diretos(Cidade v[], int n, Matriz relacoes,\n                 Cidade orig, Cidade dest){\n    int i, j;\n\n    i = acha_indice(v, n, orig.nome);\n    j = acha_indice(v, n, dest.nome);\n\n    return relacoes.dados[i][j];\n}\n\nint main(){\n\n    Cidade v[MAX], p, q;\n    Matriz cidades;\n    int i, n;\n\n    le_cidades(v, n, cidades);\n\n    imprime_cidades(v, n);\n    imprime_relacoes(cidades);\n\n    cin.ignore(); //cin foi usado em le_cidades\n    cout << \"Insira a cidade de origem:\\n\";\n    cin.getline(p.nome, SMAX);\n    cout << \"Insira a cidade de destino:\\n\";\n    cin.getline(q.nome, SMAX);\n\n    cout << \"Voos diretos entre \" << p.nome\n         << \" e \" << q.nome << \": \"\n         << voos_diretos(v, n, cidades, p, q)\n         << endl; \n\n    return 0;\n}"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-6",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#aplicações-matriz-de-relações-6",
    "title": "Aplicações com Matriz de Relações",
    "section": "Aplicações Matriz de Relações",
    "text": "Aplicações Matriz de Relações\nExercícios\nImplementar programas para responder:\n\nDe qual cidade saem mais voos?\nQual cidade recebe mais voos?\nExiste voo entre cidade_a e cidade_b, com apenas uma conexão?\nÉ possível partir da cidade_a e chegar na cidade_b, independentemente do número de voos? \\rightarrow problema estudado em Estrutura de Dados :)"
  },
  {
    "objectID": "slides/21-aplicacoes/21-aplicacoes.html#sumário",
    "href": "slides/21-aplicacoes/21-aplicacoes.html#sumário",
    "title": "Aplicações com Matriz de Relações",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nAplicações com matrizes de relações\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_relacoes/exercicios_relacoes.html#contexto-rede-social",
    "href": "slides/exercicios_relacoes/exercicios_relacoes.html#contexto-rede-social",
    "title": "Aplicações - Exercícios",
    "section": "Contexto: Rede Social",
    "text": "Contexto: Rede Social\nEm uma rede social, cada Pessoa possui:\n\nNome\nCidade\nIdade"
  },
  {
    "objectID": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-1",
    "href": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-1",
    "title": "Aplicações - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nLer e imprimir todos os dados de n pessoas:\n6\nmaria helena\nrio de janeiro\n20\ncecilia ramos\nnatal\n25\nricardo maia\nsao paulo\n20\njose marins\nsao paulo\n20\nmarta peres\nnatal\n40\njoaquim silva\nrio de janeiro\n33"
  },
  {
    "objectID": "slides/exercicios_relacoes/exercicios_relacoes.html#matriz-de-relações",
    "href": "slides/exercicios_relacoes/exercicios_relacoes.html#matriz-de-relações",
    "title": "Aplicações - Exercícios",
    "section": "Matriz de Relações",
    "text": "Matriz de Relações\nA relação entre as pessoas da rede social é dada pela matriz abaixo:\n\n\n\n\n\n\nNa posição i,j da matriz, encontra-se a quantidade de likes que a pessoa i do vetor deu em postagens da pessoa j.\nSe a posição i,j é igual a -1, as duas pessoas não são amigas"
  },
  {
    "objectID": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-2",
    "href": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-2",
    "title": "Aplicações - Exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nLer e imprimir a matriz de relações:\n 2  0  1  5  -1  8\n 5  4  3 -1   0  9\n 0 10  0  4  -1  7\n 8 -1  8  9   9 10\n-1  2 -1 10   0 -1\n 7  8  3  4  -1  1"
  },
  {
    "objectID": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-3",
    "href": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-3",
    "title": "Aplicações - Exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nExibir o nome de todas as pessoas que curtem muito as próprias postagens. Uma pessoa curte muito suas próprias postagens quando o número de likes nela mesma é maior ou igual a 7."
  },
  {
    "objectID": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-4",
    "href": "slides/exercicios_relacoes/exercicios_relacoes.html#exercício-4",
    "title": "Aplicações - Exercícios",
    "section": "Exercício 4",
    "text": "Exercício 4\nLer o nome de uma pessoa e exibir o total de curtidas que esta pessoa deu em amigos de mesma idade."
  },
  {
    "objectID": "slides/exercicios_relacoes/exercicios_relacoes.html#exemplo-de-execução-do-programa",
    "href": "slides/exercicios_relacoes/exercicios_relacoes.html#exemplo-de-execução-do-programa",
    "title": "Aplicações - Exercícios",
    "section": "Exemplo de Execução do Programa",
    "text": "Exemplo de Execução do Programa\nPessoa 0\n  Nome: maria helena\n  Cidade: rio de janeiro\n  Idade: 20\nPessoa 1\n  Nome: cecilia ramos\n  Cidade: natal\n  Idade: 25\nPessoa 2\n  Nome: ricardo maia\n  Cidade: sao paulo\n  Idade: 20\nPessoa 3\n  Nome: jose marins\n  Cidade: sao paulo\n  Idade: 20\nPessoa 4\n  Nome: marta peres\n  Cidade: natal\n  Idade: 40\nPessoa 5\n  Nome: joaquim silva\n  Cidade: rio de janeiro\n  Idade: 33\nInsira o nome da primeira pessoa: maria helena\njose marins curte muito os proprios posts\nmaria helena deu 6 curtidas em amigos da mesma idade\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/09-funcoes3/09-funcoes3.html#exercício-2-1",
    "href": "slides/09-funcoes3/09-funcoes3.html#exercício-2-1",
    "title": "Funções III",
    "section": "Exercício 2",
    "text": "Exercício 2\nImplemente uma função que receba como parâmetro de entrada um número inteiro positivo denotando o primeiro termo da sequência. A função a ser implementada deve armazenar em parâmetros de saída o maior número que faz parte da sequência e também o total de termos n que compõe a sequência.\nImplemente a função main para testar o seu programa."
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#unidade-ii---simulado",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#unidade-ii---simulado",
    "title": "Unidade 2 - Simulado",
    "section": "Unidade II - Simulado",
    "text": "Unidade II - Simulado\nExercício 1\nImplemente uma função recursiva que receba como parâmetro de entrada um vetor de números inteiros e o seu tamanho. A função deve retornar verdadeiro caso o vetor esteja em ordem crescente ou falso caso contrário.\nA função main deve ler o tamanho do vetor, cada um dos seus elementos e chamar a função solicitada."
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#unidade-ii---simulado-1",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#unidade-ii---simulado-1",
    "title": "Unidade 2 - Simulado",
    "section": "Unidade II - Simulado",
    "text": "Unidade II - Simulado\nExercício 2\nImplemente uma função que recebe um vetor de inteiros como parâmetro de entrada e armazena em um segundo vetor todos os valores do primeiro, na mesma ordem, sem repetições.\nA função main do seu programa deve ler do usuário o tamanho e elementos de um vetor de entrada e exibir o resultado calculado pela função solicitada."
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#lista-de-presença",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#lista-de-presença",
    "title": "Unidade 2: exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250618"
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#unidade-ii---simulado-2",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#unidade-ii---simulado-2",
    "title": "Unidade 2 - Simulado",
    "section": "Unidade II - Simulado",
    "text": "Unidade II - Simulado\nExercício 3\nImplemente uma função que receba como parâmetro de entrada uma matriz quadrada de números inteiros de ordem N. A função deve retornar verdadeiro caso a matriz seja simétrica ou falso caso contrário. Uma matriz é simétrica se ela for igual a sua transposta.\nA função main deve ler a ordem N de uma matriz quadrada de números inteiros, cada um dos seus elementos e imprimir uma mensagem informando se a matriz é simétrica ou não, de acordo com o resultado da função solicitada.\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1",
    "href": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1",
    "title": "Tipos Estruturados - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nFuncionários\nConsidere um Funcionario, que deve conter:\n\nNome completo\nNome do cargo\nSalário"
  },
  {
    "objectID": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1-1",
    "href": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-1-1",
    "title": "Tipos Estruturados - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nFuncionários\nImplemente uma função que receba como parâmetro um vetor de funcionários. A função deve retornar o funcionário com o menor salário.\nA função main deve ler do usuário a quantidade de funcionários, todos os seus dados e exibir o resultado de uma chamada à função solicitada."
  },
  {
    "objectID": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-2",
    "href": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-2",
    "title": "Tipos Estruturados - Exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nFuncionários\nImplemente uma função que receba como parâmetro de entrada um vetor de funcionários e o nome de um cargo.\nA função deve armazenar em um vetor de saída todos os funcionários que possuem o cargo informado.\nImplemente também a função main."
  },
  {
    "objectID": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#lista-de-presença",
    "href": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#lista-de-presença",
    "title": "Tipos Estruturados - Exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231128"
  },
  {
    "objectID": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-3",
    "href": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-3",
    "title": "Tipos Estruturados - Exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nPontos 2D\nConsidere um Ponto2D, que deve conter:\n\nCoordenadas x e y (nrs. reais)\nCor (string)\n\nImplemente uma função que receba como parâmetro de entrada um vetor de Ponto2D e um número real \\tau. A função deve atribuir a cor \"verde\" para todos os pontos que têm distância para a origem menor do que \\tau ou a cor \"vermelho\" caso contrário."
  },
  {
    "objectID": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-3-1",
    "href": "slides/exercicios_tipos_estruturados/exercicios_tipos_estruturados.html#exercício-3-1",
    "title": "Tipos Estruturados - Exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nPontos 2D\nA distância de um ponto p para a origem é dada por \nd(p) = \\sqrt{p.x^2 + p.y^2}\n\nImplemente a função main, que deve realizar a leitura das coordenadas dos pontos e do valor para \\tau, chamar a função e imprimir as coordenadas e cores dos pontos,\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#contexto-treinos-de-corrida",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#contexto-treinos-de-corrida",
    "title": "Ordenação - Exercícios",
    "section": "Contexto: Treinos de Corrida",
    "text": "Contexto: Treinos de Corrida\nImagine um aplicativo que registra treinos de corrida, ou seja, o dia, distância, tempo e ritmo que uma pessoa correu."
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#contexto-treinos-de-corrida-1",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#contexto-treinos-de-corrida-1",
    "title": "Ordenação - Exercícios",
    "section": "Contexto: Treinos de Corrida",
    "text": "Contexto: Treinos de Corrida"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-1",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-1",
    "title": "Ordenação - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nTreinos de Corrida\nConsidere um treino de corrida. Ele contém:\n\nUma data\nUma duração (horas, minutos e segundos)\nUma distância dada em quilômetros\nUm pace (ritmo por quilômetro), dado em minutos e segundos\n\nTendo em mente que você vai precisar ordenar por data, duração e pace…"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-1-1",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-1-1",
    "title": "Ordenação - Exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nTreinos de Corrida\nImplemente os tipos estruturados:\n\nData, com os campos dia, mes e ano\nDuracao, com os campos hor, min e seg\nPace, com os campos min e seg\nCorrida, com os campos data, duracao, pace e distancia"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-2",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-2",
    "title": "Ordenação - Exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nOrdenando Datas\nAgora, divida o seu programa, se concentrando em implementar uma função para ordenar um vetor de Data, da mais antiga para a mais recente.\nComo você pode implementar esta função?\nObserve que é para ordenar um vetor de Data e não de Corrida"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#lista-de-presença",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#lista-de-presença",
    "title": "Ordenação - Exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231205"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-3",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-3",
    "title": "Ordenação - Exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nOrdenando Datas - Função Main\nImplemente a função main para testar a função do exercício anterior:\n\nDeve ler uma quantidade n de datas\nDeve ler o dia, mês e ano de n datas\nChamar a função de ordenar por datas\nExibir o resultado na tela"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-4",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-4",
    "title": "Ordenação - Exercícios",
    "section": "Exercício 4",
    "text": "Exercício 4\nLendo Dados de Corrida\nImplemente um função que receba uma Corrida como parâmetro de entrada e saída.\nA função deve ler, na ordem:\n\nA data da corrida (dia, mês e ano)\nA duração da corrida (hora, min. e seg.)\nA distância da corrida (em Km)\n\nFaça a função main exibir os dados lidos em um formato adequado."
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-5",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-5",
    "title": "Ordenação - Exercícios",
    "section": "Exercício 5",
    "text": "Exercício 5\nCalculando o Pace\n\nO pace é dado na quantidade de minutos e segundos que uma pessoa leva para percorrer 1 Km\n\nEx: se uma pessoa corre 10Km em 1h 03 min e 35 seg, o pace desta pessoa foi de 6:22/Km (arredondando para cima)."
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-5-1",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-5-1",
    "title": "Ordenação - Exercícios",
    "section": "Exercício 5",
    "text": "Exercício 5\nCalculando o Pace\nImplemente um programa que calcule o pace dada uma duração.\nO pace é calculado por:\n\nTransformando a duração em segundos/Km\nO quociente da divisão da transformação por 60 é a quantidade de minutos do pace\nO resto da divisão da transformação por 60 é a quantidade de segundos do pace"
  },
  {
    "objectID": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-completo",
    "href": "slides/exercicios_ordenacao/exercicios_ordenacao.html#exercício-completo",
    "title": "Ordenação - Exercícios",
    "section": "Exercício Completo",
    "text": "Exercício Completo\nImplemente funções para:\n\nOrdenar um vetor de Corrida por duração\nOrdenar um vetor de Corrida por pace\n\nNa função main, implemente um menu, a partir do qual o usuário pode escolher como quer visualizar suas corridas (opção 0 ordena por data, 1 por duração e 2 por pace).\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-iii---simulado",
    "href": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-iii---simulado",
    "title": "Unidade 3 - Simulado",
    "section": "Unidade III - Simulado",
    "text": "Unidade III - Simulado\nExercício 1\nTipo estruturado Cor - campos:\n\nR (vermelho), G (verde) e B (azul)\n\nFunção: ordenar um vetor de cores, na ordem crescente de R, G e B\nImplemente também a função main para testar o programa."
  },
  {
    "objectID": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-ii---simulado",
    "href": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-ii---simulado",
    "title": "Unidade 3 - Simulado",
    "section": "Unidade II - Simulado",
    "text": "Unidade II - Simulado\nExercício 2\nTipo estruturado Matriz\nFunção: multiplicar duas matrizes de tamanhos quaisquer.\nImplemente também a função main para testar o programa."
  },
  {
    "objectID": "slides/exercicios_unidade3/exercicios_unidade3.html#lista-de-presença",
    "href": "slides/exercicios_unidade3/exercicios_unidade3.html#lista-de-presença",
    "title": "Unidade 3 - Simulado",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20231212"
  },
  {
    "objectID": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-ii---simulado-1",
    "href": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-ii---simulado-1",
    "title": "Unidade 3 - Simulado",
    "section": "Unidade II - Simulado",
    "text": "Unidade II - Simulado\nExercício 3\nTipo estruturado Musica - campos:\n\nartista: string\ntitulo: string\ngenero: string\n\nFunção: recebe vetor de músicas e o seu tamanho. Deve imprimir na tela o gênero musical com a maior quantidade de músicas.\nImplemente também a função main para testar o programa.\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-iii---simulado-1",
    "href": "slides/exercicios_unidade3/exercicios_unidade3.html#unidade-iii---simulado-1",
    "title": "Unidade 3 - Simulado",
    "section": "Unidade III - Simulado",
    "text": "Unidade III - Simulado\nExercício 1 - Exemplo\n\n\n  \n    \n      Entrada:\n      Saída:\n    \n  \n  \n    \n      \n      5\n      127 0 0\n      255 0 127\n      127 127 0\n      255 255 255\n      0 0 127\n      \n      \n      Cores ordenadas por RGB:\n      (0, 0, 127)\n      (127, 0, 0)\n      (127, 127, 0)\n      (255, 0, 127)\n      (255, 255, 255)"
  },
  {
    "objectID": "slides/revisao_unidade3/revisao_unidade3.html#revisão---unidade-iii",
    "href": "slides/revisao_unidade3/revisao_unidade3.html#revisão---unidade-iii",
    "title": "Revisão - Unidade III",
    "section": "Revisão - Unidade III",
    "text": "Revisão - Unidade III\nLista de Presença\n\n\n\n\n\n\n\nhttps://bit.ly/lip_20231214\n\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis-2",
    "href": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis-2",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Sintaxe de Declaração de Variáveis",
    "text": "C++: Sintaxe de Declaração de Variáveis\nUm programa C++ aceita variáveis declaradas fora do bloco main \\rightarrow variáveis globais. Entretanto:\n\n\n\n\n\n\nVariáveis globais não são aceitas no curso de LiP."
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#linguagem-de-programação",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#linguagem-de-programação",
    "title": "Comandos de Repetição",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComandos de seleção\n\nAula de hoje:\n\nComandos de repetição:\n\nfor\nwhile"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição-1",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado for: repete instruções por um determinado número de vezes\nComando de repetição condicional while: repete instruções enquanto uma condição é verdadeira"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nSintaxe:\nfor(inicializacao; condicao; incremento){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-1",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\n\nItera sobre uma variável, chamada de contador, variável de iteração ou variável de controle\nEsta variável tem o seu valor alterado conforme o programador deseja\nIsto faz o laço executar várias iterações"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-2",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-2",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nDividido em três expressões opcionais:\n\nInicialização: executada somente na primeira vez em que o for é executado\nCondição: avaliada no início de cada iteração\nIncremento: executado no final de cada iteração"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-3",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-3",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nOrdem de execução:\n\nA expressão de inicialização é executada\nA expressão de condição é avaliada:\n\nCaso seja verdadeira: o bloco de comandos é executado\nCaso seja falsa: o laço é encerrado\n\nA expressão de incremento é executada e volta para o passo 2"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-4",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-4",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExemplo\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"i: \" << i << endl;\n    }\n    return 0;\n}\nO que imprime este programa?"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-5",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-5",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\n\nDiferentes for podem ser usados se estivermos preocupados com a quantidade de execuções de um bloco de comandos\nO que não é o caso se desejarmos que a variável de iteração assuma uma sequência de valores específicos"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-6",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-6",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 1\nImplemente um programa que lê um número n e em seguida, lê as notas de n alunos. O programa deve exibir a média das notas na tela.\nAntes de programar: o que deve ser repetido?"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-7",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-7",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 1: Solução\nint main(){\n    int i, n;\n    float nota, media = 0;\n    cout << \"Insira a quantidade de notas\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"Insira a nota do \"\n             << i+1 << \"o. aluno\" << endl;\n        cin >> nota;\n        media += nota;\n    }\n    media /= n;\n    cout << \"media dos alunos: \" << media << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-8",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-8",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExemplos Atípicos\n\nQuantas vezes é executado o laço a seguir? n vezes?\n\nfor(i = 0; i <= n; i++){\n    ...\n}\n\nQuantas vezes é executado o laço a seguir?\n\nfor(i = n; i > 0; i++){\n    ...\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-9",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-9",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 2\nImplemente um programa que lê um número n e em seguida, imprime os n primeiros números pares na tela. Considere o número 0 como o primeiro par."
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#lista-de-presença",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#lista-de-presença",
    "title": "Comandos de Repetição",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20241008"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-10",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-10",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 2: Solução\nint main(){\n    int i, n;\n    cout << \"Digite n\\n\";\n    cin >> n;\n    for(i = 0; i < 2*n; i += 2){\n        cout << i << endl;\n    }\n    return 0;\n}\nObviamente, há outras formas de se implementar este programa"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-11",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-11",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 3\nImplemente um programa que imprime na tela em forma de tabela as seguintes contagens:\n\nDe 1 a 100\nDe 10 a 1000 (incrementando o contador de 10 em 10)\nDe 100 a 1 (em ordem decrescente)"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-12",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-12",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nSaída esperada para o exercício 3:\n\n\n\n1\n10\n100\n\n\n\n\n2\n20\n99\n\n\n3\n30\n98\n\n\n…\n…\n…\n\n\n100\n1000\n1"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-13",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-13",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 3: Solução\nint main(){\n    int i;\n    for(i = 1; i <= 100; i++){\n        cout << i << \" \"\n             << 10*i << \" \"\n             << 101-i << endl;\n    }\n    return 0;\n}\nÉ possível implementar o programa com o uso de variáveis adicionais"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-14",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-14",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 4\nImplemente um programa que lê um número n e em seguida, lê n caracteres. O programa deve exibir a quantidade de caracteres digitados que são letras minúsculas."
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-15",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-15",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 4: Solução\nint main(){\n    char car;\n    int n, cont = 0;\n    cout << \"Informe a quantidade de caracteres:\\n\";\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        cout << \"Informe um caractere\\n\";\n        cin >> car;\n        if(car >= 'a' && car <= 'z'){\n            cont++;\n        }\n    }\n    cout << cont << \" letras minusculas digitadas\\n\";\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-16",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-16",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 5\nFaça um programa que lê um número n e um número m. Em seguida, o seu programa deve exibir na tela as m primeiras potências positivas dos n primeiros números positivos. As potências devem estar separadas por linha."
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-17",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-17",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExemplo de execução:\nInforme a quantidade de numeros\n5\nInforme a quantidade de potencias\n4\nPotencias:\n1 1 1 1 \n2 4 8 16 \n3 9 27 81 \n4 16 64 256 \n5 25 125 625"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-18",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-18",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 5: Solução\nint main(){\n    int i, j, n, m;\n    cout << \"Informe a quantidade de numeros\\n\";\n    cin >> n;\n    cout << \"Informe a quantidade de potencias\\n\";\n    cin >> m;\n    for(i = 1; i <= n; i++){\n        for(j = 1; j <= m; j++){\n            cout << pow(i,j) << \" \"; \n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-19",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-for-19",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 5: Solução\nint main(){\n    int i, j, n, m;\n    cout << \"Informe a quantidade de numeros\\n\";\n    cin >> n;\n    cout << \"Informe a quantidade de potencias\\n\";\n    cin >> m;\n    for(i = 1; i <= n; i++){\n        for(j = 1; j <= m; j++){\n            cout << pow(i,j) << \" \"; \n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nSintaxe:\nwhile(condicao){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-1",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\n\nExecuta enquanto a condição é verdadeira\nCondição é qualquer expressão e é obrigatória (é convertida implicitamente em expressão lógica)\nA condição é testada antes de cada iteração"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-2",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-2",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nDevemos nos certificar de dois itens para garantir o seu funcionamento de forma correta:\n\nQue a condição tem a possibilidade de ser verdadeira ao ser testada pela primeira vez\nQue a condição vai se tornar falsa, em algum momento"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-3",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-3",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nExemplo\nint main(){\n    int i = 0, n;\n    cin >> n;\n    while(i < n){\n        cout << \"i: \" << i << endl;\n        i++;\n    }\n    return 0;\n}\n\nQual a saída deste programa?\nComo foram garantidos os dois itens necessários?"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição-2",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição-2",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDiferenças entre while e for\n\nO comando while é apropriado para repetição condicional\n\nÉ possível utilizá-lo para repetição contada, embora isto seja mais propenso a erros\n\nO comando for é apropriado para repetição contada\n\nÉ possível utilizá-lo para repetição condicional, embora o código resultante fique menos intuitivo"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição-3",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-de-repetição-3",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-4",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-4",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nExercício 6\nFaça um programa que lê vários números e informa se cada um deles é par ou ímpar. O programa deve se encerrar quando for digitado um número negativo."
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-5",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-5",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nAntes de programar, precisamos identificar:\n\nVariáveis do programa\nEntrada e saída do programa\nO que deve ser repetido\nExpressão lógica para repetição"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-6",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-6",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nExercício 6: Solução\nint main(){\n    int x;\n    cout << \"Informe um numero\\n\";\n    cin >> x;\n    while(x >= 0){\n        if(x % 2 == 0){\n            cout << x << \" e um numero par\\n\";\n        }\n        else{\n            cout << x << \" e um numero impar\\n\";\n        }\n        cout << \"Informe um numero\\n\";\n        cin >> x;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-do-while",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-do-while",
    "title": "Comandos de Repetição",
    "section": "Comando do-while",
    "text": "Comando do-while\n\nA linguagem C++ oferece também o comando do-while (faça-enquanto)\nSintaxe:\n\ndo{\n    comando1;\n    ...\n    comandoN;\n} while(condicao);"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-do-while-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-do-while-1",
    "title": "Comandos de Repetição",
    "section": "Comando do-while",
    "text": "Comando do-while\nDiferença para o while: a condição é testada após a execução do corpo\n\nNo comando while, o corpo pode não ser executado nenhuma vez\nNo comando do-while, o corpo é executado pelo menos uma vez"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-e-do-while",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-e-do-while",
    "title": "Comandos de Repetição",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nErros Comuns\n\nNão garantir que a condição pode ser verdadeira ao ser testada pela primeira vez (while)\nNão garantir que a condição vai se tornar falsa na lógica do algoritmo\nInverter condição: a expressão lógica deve ter valor verdadeiro para que o laço execute"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-while-e-do-while",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-while-e-do-while",
    "title": "Comandos de Repetição",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 7\nImplemente um programa com um menu de escolha, que deve ler do usuário uma entrada denotando uma opção. O programa deve imprimir:\n\n“opcao1 escolhida” quando o usuário inserir 1\n“opcao2 escolhida” quando o usuário inserir 2\n“opcao3 escolhida” quando o usuário inserir 3\n\nPara cada escolha acima, o programa deve voltar ao menu inicial. Caso o usuário insira s, o programa deve se encerrar."
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-while-e-do-while-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-while-e-do-while-1",
    "title": "Comandos de Repetição",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 7: Solução\nint main(){\n    char o;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> o;\n        if(o == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(o == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(o == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(o == 's'){\n            cout << \"Vc escolheu sair\\n\";\n        }\n    }while(o != 's');\n    return 0;"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-break-e-continue",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comandos-break-e-continue",
    "title": "Comandos de Repetição",
    "section": "Comandos break e continue",
    "text": "Comandos break e continue\n\nComandos que podem ser utilizados dentro de for, while e do-while:\n\nComando break: utilizado para encerrar o laço em que o comando break se encontra\nComando continue: utilizado para ignorar a iteração atual do laço e forçar a próxima iteração\n\nNo geral, há alternativas que tornam ambos os comandos opcionais"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-break",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-break",
    "title": "Comandos de Repetição",
    "section": "Comando break",
    "text": "Comando break\nMenu com break\nO comando break pode ser usado em menus:\nint main(){\n    char c1;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> c1;\n        if(c1 == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(c1 == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(c1 == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(c1 == 's'){\n            cout << \"Vc escolheu sair\\n\";\n            break;\n        }\n    }while(true);\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-break-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-break-1",
    "title": "Comandos de Repetição",
    "section": "Comando break",
    "text": "Comando break\nMenu sem break\nO mesmo menu pode ser implementado sem break:\nint main(){\n    char o;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> o;\n        if(o == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(o == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(o == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(o == 's'){\n            cout << \"Vc escolheu sair\\n\";\n        }\n    }while(o != 's');\n    return 0;"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-continue",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-continue",
    "title": "Comandos de Repetição",
    "section": "Comando continue",
    "text": "Comando continue\nExemplo de Uso\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 == 0){\n            continue;\n        }\n        s += i;\n    }\n    cout << s << endl;\n    return 0;\n}\nO que faz este programa?"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-continue-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-continue-1",
    "title": "Comandos de Repetição",
    "section": "Comando continue",
    "text": "Comando continue\nPrograma equivalente sem continue\nO mesmo programa pode ser implementado sem continue:\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 != 0){\n            s += i;\n        }\n    }\n    cout << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-e-do-while-1",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-e-do-while-1",
    "title": "Comandos de Repetição",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 8\nImplemente um programa que lê a população no ano corrente de dois países, A e B. O país A tem taxa de crescimento de 2% ao ano, enquanto o país B cresce 4% ao ano. Supondo que a população do país A é maior do que a do país B, o seu programa deve informar em quantos anos a população do país B ultrapassará a população do país A."
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-e-do-while-2",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#comando-while-e-do-while-2",
    "title": "Comandos de Repetição",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 8: Solução\nint main(){\n    int anos = 0;\n    int pop_a, pop_b;\n\n    cout << \"Insira as populacoes iniciais:\\n\";\n    cin >> pop_a >> pop_b;\n\n    while(pop_b <= pop_a){\n        pop_a *= 1.02;\n        pop_b *= 1.04;\n        anos++;\n    }\n    cout << \"A populacao do pais B ultrapassa\n             a do pais A em \"\n         << anos << \" anos.\\n\";\n    \n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comandos_repeticao/05-comandos_repeticao.html#sumário",
    "href": "slides/05-comandos_repeticao/05-comandos_repeticao.html#sumário",
    "title": "Comandos de Repetição",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição for\nComando de repetição while\nComandos break e continue\nExercícios\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#objetivo-da-aula",
    "href": "slides/06-funcoes1/06-funcoes1.html#objetivo-da-aula",
    "title": "Funções I",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\n\nMotivar o uso de funções\nApresentar as construções oferecidas em C++ para a implementação de programas com funções"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#função",
    "href": "slides/06-funcoes1/06-funcoes1.html#função",
    "title": "Funções I",
    "section": "Função",
    "text": "Função\n\nVariáveis guardam valores de diferentes tipos\n\nchar, int, float, bool\n\nE se pudéssemos atribuir não um valor, mas sim, um trecho de código a um nome, similar a uma variável?\nIsto é exatamente o que acontece com funções em linguagens de programação"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#função-1",
    "href": "slides/06-funcoes1/06-funcoes1.html#função-1",
    "title": "Funções I",
    "section": "Função",
    "text": "Função\n\nFunção: conjunto de comandos (trecho de código) que realizam uma tarefa em particular\nTambém chamada de subprograma\nCada função recebe um nome e através deste, pode ser executada\nUso de funções organiza, simplifica e reduz programas"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#função-2",
    "href": "slides/06-funcoes1/06-funcoes1.html#função-2",
    "title": "Funções I",
    "section": "Função",
    "text": "Função\nExemplos de funções conhecidas:\n\nsqrt\npow\nsin\ncos\ntan\nrand"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#chamadas-de-funções---exemplo-1",
    "href": "slides/06-funcoes1/06-funcoes1.html#chamadas-de-funções---exemplo-1",
    "title": "Funções I",
    "section": "Chamadas de Funções - Exemplo 1",
    "text": "Chamadas de Funções - Exemplo 1\nO que faz o seguinte programa?\nint main(){\n    int x, r;\n    cin >> x;\n    r = sqrt(x);\n    cout << x << \", \" << r << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#chamadas-de-funções---exemplo-2",
    "href": "slides/06-funcoes1/06-funcoes1.html#chamadas-de-funções---exemplo-2",
    "title": "Funções I",
    "section": "Chamadas de Funções - Exemplo 2",
    "text": "Chamadas de Funções - Exemplo 2\nO que faz o seguinte programa?\nint main(){\n    float x, y;\n    cin >> x >> y;\n    cout << sin(x)/cos(y) << endl; \n    return 0;\n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#programas-que-chamam-funções",
    "href": "slides/06-funcoes1/06-funcoes1.html#programas-que-chamam-funções",
    "title": "Funções I",
    "section": "Programas que Chamam Funções",
    "text": "Programas que Chamam Funções\n\nVocês já utilizaram funções em vários programas:\n\nVocê como programador foi usuário de funções\nO seu programa (programa usuário) continha chamadas de funções\nAs funções que você usou foram implementadas por outro programador"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#programas-que-chamam-funções-1",
    "href": "slides/06-funcoes1/06-funcoes1.html#programas-que-chamam-funções-1",
    "title": "Funções I",
    "section": "Programas que Chamam Funções",
    "text": "Programas que Chamam Funções\nA chamada de uma função funciona exatamente como uma variável:\n\nResulta em um valor que pode ser usado em expressões"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#programas-que-chamam-funções-2",
    "href": "slides/06-funcoes1/06-funcoes1.html#programas-que-chamam-funções-2",
    "title": "Funções I",
    "section": "Programas que Chamam Funções",
    "text": "Programas que Chamam Funções\n\nPrincipal vantagem de chamar funções: não é necessário saber como uma função está implementada para utilizá-la\nExemplo: função cos(x) computa o cosseno de x com o polinômio de MacLaurin:\n\n\ncos(x) = \\sum_{n=0}^{\\infty}\\frac{(-1)^{n}}{(2n)!}x^{2n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#implementação-de-funções",
    "href": "slides/06-funcoes1/06-funcoes1.html#implementação-de-funções",
    "title": "Funções I",
    "section": "Implementação de Funções",
    "text": "Implementação de Funções\nLinguagens de programação estruturadas oferecem uma sintaxe para implementação de funções\nAlém da sintaxe, é preciso saber:\n\nAs entradas do subprograma (parâmetros da função)\nComo o subprograma deve operar (código da função)\nO que o subprograma deve computar (saída da função)"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#implementação-de-funções-1",
    "href": "slides/06-funcoes1/06-funcoes1.html#implementação-de-funções-1",
    "title": "Funções I",
    "section": "Implementação de Funções",
    "text": "Implementação de Funções\n\n\n\n\n\n\nA implementação de uma função é dividida entre a sua assinatura e as instruções que compõem a sua definição"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\nTambém chamadas de cabeçalhos ou protótipos da função\nDevem estar fora e antes do bloco main"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-1",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-1",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\ntipo_da_funcao é o tipo do valor computado pela função: int, char, float, bool ou o novo tipo void"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-2",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-2",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\nnome_da_funcao segue as mesmas regras que usamos para nomear variáveis"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-3",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-3",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\nParâmetros (ou argumentos) são variáveis das quais a função depende para computar o seu retorno\nA lista de parametros contém pares tipo/nome para cada parâmetro, sendo cada par separado por vírgula"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-4",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-4",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nExercício\nEscrever assinaturas para as funções abaixo:\n\nsqrt: raíz quadrada de um número real\npow: eleva uma base a uma potência\nrand: gera um número aleatório\nFunção que converte um número ASCII num caractere\nFunção que retorna verdadeiro caso o número seja primo e falso caso contrário"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-5",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-5",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nExercício: solução\n1. float sqrt(float x);\n2. float pow(float b, float e);\n3. int rand();\n4. char converte_caractere(int cod);\n5. bool eh_primo(int num);"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-6",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-6",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nA assinatura de uma função define uma relação entre suas entradas e sua saída\n\nNos parâmetros da função estão as suas entradas\nNo tipo de retorno da função está a sua saída"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-7",
    "href": "slides/06-funcoes1/06-funcoes1.html#assinaturas-de-funções-7",
    "title": "Funções I",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nObserve que:\n\nAlgumas funções não têm entrada\nAlgumas funções não retornam nada\nAlgumas funções possuem mais de uma saída\n\nOs dois últimos pontos acima serão vistos nas próximas aulas"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#lista-de-presença",
    "href": "slides/06-funcoes1/06-funcoes1.html#lista-de-presença",
    "title": "Funções I",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250915"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros){\n    corpo da funcao\n}\n\nUma função é definida quando programamos o seu comportamento com instruções válidas\nA definição de uma função deve vir após o bloco main"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-1",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-1",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo: programa que converte temperatura em graus Celsius para Fahrenheit, sabendo-se que\n\nf(c) = 1,8c + 32\n\n\nSem usar função\nUtilizando função"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-2",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-2",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo: função que converte temperatura em Celsius para Fahrenheit\nfloat converte_temp(float c){\n    return 1.8*c + 32;\n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-3",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-3",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo: programa completo com função que converte temperatura em Celsius para Fahrenheit\nfloat converte_temp(float c);\nint main(){\n    float tc;\n\n    cout << \"Insira a temperatura em Celsius:\\n\";\n    cin >> tc;\n    cout << \"Temperatura em Fahrenheit: \" << converte_temp(tc) << endl;\n    return 0;\n}\nfloat converte_temp(float c){\n    return 1.8*c + 32;\n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-4",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-4",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\n\nA lista de parâmetros define variáveis locais (existentes somente dentro da função)\nQualquer instrução é permitida no corpo da função, inclusive chamadas a outras funções (ou a ela mesma)"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-5",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-5",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nComando return:\n\nUsado junto com qualquer expressão válida em C++\nConverte a expressão no tipo de retorno da função\nEncerra a função e retorna a execução do programa para a instrução seguinte à chamada a ela realizada"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-6",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-6",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nVariáveis locais de uma função:\n\nVariáveis que podem ser declaradas dentro da função\nNão são visíveis fora da função\nVariável local com mesmo nome de variável em outra função: não são as mesmas!\nCada parâmetro da função também é uma variável local"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-7",
    "href": "slides/06-funcoes1/06-funcoes1.html#definição-de-funções-7",
    "title": "Funções I",
    "section": "Definição de Funções",
    "text": "Definição de Funções\nExemplo anterior com variável local:\nfloat converte_temp(float c){\n    float f;\n    f = 1.8*c + 32;\n    return f;\n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#função-main",
    "href": "slides/06-funcoes1/06-funcoes1.html#função-main",
    "title": "Funções I",
    "section": "Função main",
    "text": "Função main\nMotivo pelo qual todo programa deve conter int main() e return 0:\n\n\n\n\n\n\nTodo programa em C++ deve obrigatoriamente conter uma função chamada main que retorna um número inteiro. Assim, o sistema operacional (Windows, Linux, etc.) sabe a função a ser chamada quando ele deseja executar um programa."
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#programa-com-função",
    "href": "slides/06-funcoes1/06-funcoes1.html#programa-com-função",
    "title": "Funções I",
    "section": "Programa com Função",
    "text": "Programa com Função\nExercício\nImplemente uma função chamada eh_primo, que receba como parâmetro um número inteiro. A função deve retornar verdadeiro caso o número seja primo ou falso caso contrário.\nA função main é dada e contém o código do programa usuário da função que você deve implementar (slide a seguir)."
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#programa-com-função-1",
    "href": "slides/06-funcoes1/06-funcoes1.html#programa-com-função-1",
    "title": "Funções I",
    "section": "Programa com Função",
    "text": "Programa com Função\nExercício: programa usuário da Função\nint main(){\n    int num;\n    cout << \"Insira um numero inteiro:\\n\";\n    cin >> num;\n\n    if(eh_primo(num) == true){\n        cout << num << \" eh primo\\n\";\n    }\n    else{\n        cout << num << \" nao eh primo\\n\";\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#programa-com-função-2",
    "href": "slides/06-funcoes1/06-funcoes1.html#programa-com-função-2",
    "title": "Funções I",
    "section": "Programa com Função",
    "text": "Programa com Função\nExercício: Solução\nbool eh_primo(int x);\nint main(){\n    int num;\n    cout << \"Insira um numero inteiro:\\n\";\n    cin >> num;\n\n    if(eh_primo(num) == true){\n        cout << num << \" eh primo\\n\";\n    }\n    else{\n        cout << num << \" nao eh primo\\n\";\n    }\n    return 0;\n}\nbool eh_primo(int x){\n    int i, cont = 0;\n\n    for(i = 1; i <= x; i++){\n        if(x % i == 0){\n            cont++;\n        }\n    }\n    return (cont == 2);\n}"
  },
  {
    "objectID": "slides/06-funcoes1/06-funcoes1.html#sumário",
    "href": "slides/06-funcoes1/06-funcoes1.html#sumário",
    "title": "Funções I",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nChamada de funções\nAssinatura de funções\nDefinição de funções\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#aula-anterior",
    "href": "slides/07-funcoes2/07-funcoes2.html#aula-anterior",
    "title": "Funções II",
    "section": "Aula Anterior",
    "text": "Aula Anterior\nAula anterior: uso de funções em C++\n\nChamada a funções\nAssinatura de funções\nDefinição de funções"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções",
    "title": "Funções II",
    "section": "Funções",
    "text": "Funções\nRevisando a ideia de funções:\n\nParâmetros são a porta de entrada de funções\nO tipo de retorno é a sua saída\n\n\nEste mecanismo estabelece uma forma de uma função “conversar” com uma outra Por exemplo: função main que faz uma chamada à função sqrt"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-1",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-1",
    "title": "Funções II",
    "section": "Funções",
    "text": "Funções\nDevemos ter em mente que:\n\nNem sempre uma função deve retornar um resultado\nÉ possível que uma função modifique o valor dos parâmetros, de forma que esta modificação seja válida fora da função"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#objetivos-da-aula",
    "href": "slides/07-funcoes2/07-funcoes2.html#objetivos-da-aula",
    "title": "Funções II",
    "section": "Objetivos da Aula",
    "text": "Objetivos da Aula\n\nIntroduzir o conceito de função sem retorno\nIntroduzir o conceito de passagem de parâmetro por valor e passagem de parâmetro por referência"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#assinaturas-de-funções",
    "href": "slides/07-funcoes2/07-funcoes2.html#assinaturas-de-funções",
    "title": "Funções II",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nSintaxe:\ntipo_da_funcao nome_da_funcao(lista de parametros);\n\ntipo_da_funcao é o tipo do valor computado pela função: int, char, float, bool ou o novo tipo void"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nFunções sem retorno:\n\nTambém conhecidas como procedimentos\nÚtil para funções que devem escrever na tela\nEscrever na tela com comando cout não é retorno\nTipo da função deve ser void"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-1",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-1",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nFunções sem retorno:\n\nÚtil também para funções que devem modificar os seus parâmetros\nComando return não é obrigatório\n\nPode ser opcionalmente utilizado com a forma return; (sem nenhuma expressão) para encerrar a função"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-2",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-2",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nExercício\nEscrever assinaturas para as funções abaixo:\n\nFunção que imprime na tela o caractere correspondente a um número ASCII\nFunção que imprime na tela o menor dentre três números reais\nFunção que imprime na tela uma mensagem informando se o número é primo ou não"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#assinaturas-de-funções-1",
    "href": "slides/07-funcoes2/07-funcoes2.html#assinaturas-de-funções-1",
    "title": "Funções II",
    "section": "Assinaturas de Funções",
    "text": "Assinaturas de Funções\nExercício: Solução\n1. void imprime_caractere(int cod);\n2. void imprime_menor(float x, float y, float z);\n3. void informa_primo(int x);"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-3",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-3",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nFunção que imprime na tela o caractere correspondente a um número:\nvoid imprime_caractere(int n);\n\nint main(){\n    int x;\n    cout << \"Insira um num. inteiro entre 0 e 255:\\n\";\n    cin >> x;\n    imprime_caractere(x); //observe a chamada à função\n    return 0;\n}\n\nvoid imprime_caractere(int n){\n    cout << \"Caractere: \" << char(n) << endl;\n}"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-4",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-4",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nÉ preciso estar claro a diferença entre:\n\nUma função que retorna um valor, ex:\n\nchar converte_numero(int cod);\n\nUma outra função que imprime o mesmo valor, ex:\n\nvoid imprime_caractere(int cod);"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-5",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-5",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno\nPara entender esta diferença, imagine o seguinte exemplo hipotético:\n\nUm programa no computador A faz uma chamada a uma função a ser executada no computador B\nA função no computador B é executada\n\nO resultado não é retornado: ele é exibido na tela\nEntretanto, o resultado será exibido na tela do computador B\n\nO programa no computador A não tem acesso ao resultado calculado pela função"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-6",
    "href": "slides/07-funcoes2/07-funcoes2.html#funções-sem-retorno-6",
    "title": "Funções II",
    "section": "Funções sem Retorno",
    "text": "Funções sem Retorno"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#lista-de-presença",
    "href": "slides/07-funcoes2/07-funcoes2.html#lista-de-presença",
    "title": "Funções II",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250924"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#passagem-de-parâmetros",
    "href": "slides/07-funcoes2/07-funcoes2.html#passagem-de-parâmetros",
    "title": "Funções II",
    "section": "Passagem de Parâmetros",
    "text": "Passagem de Parâmetros\nDentro do corpo de funções, os parâmetros são variáveis locais. Observe então se o código a seguir está correto:\nvoid troca(int a, int b);\n\nint main(){\n    int n1, n2;\n    cout << \"Insira dois numeros inteiros:\\n\";\n    cin >> n1 >> n2;\n    troca(n1, n2);\n    cout << \"n1: \" << n1 << \" n2: \" << n2 << endl;\n    return 0;\n}\n\nvoid troca(int a, int b){\n    int aux = a;\n    a = b;\n    b = aux;\n}"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#passagem-de-parâmetros-1",
    "href": "slides/07-funcoes2/07-funcoes2.html#passagem-de-parâmetros-1",
    "title": "Funções II",
    "section": "Passagem de Parâmetros",
    "text": "Passagem de Parâmetros\n\nAté agora, utilizamos passagem de parâmetro por valor\n\nO valor da variável utilizada na chamada é copiado para o parâmetro da função\n\nAlternativa: passagem de parâmetro por referência\n\nA variável em si é passada como parâmetro\n\nMesma posição (referência) na memória\n\nUso do operador de referência: &\n\nDeve ser usado em cada parâmetro que deve ser modificado"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#passagem-de-parâmetros-2",
    "href": "slides/07-funcoes2/07-funcoes2.html#passagem-de-parâmetros-2",
    "title": "Funções II",
    "section": "Passagem de Parâmetros",
    "text": "Passagem de Parâmetros\nSolução correta (com passagem de parâmetro por referência):\nvoid troca(int& a, int& b);\n\nint main(){\n    int n1, n2;\n    cout << \"Insira dois numeros inteiros:\\n\";\n    cin >> n1 >> n2;\n    troca(n1, n2);\n    cout << \"n1: \" << n1 << \" n2: \" << n2 << endl;\n    return 0;\n}\n\nvoid troca(int& a, int& b){\n    int aux = a;\n    a = b;\n    b = aux;\n}"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#exercício-1",
    "href": "slides/07-funcoes2/07-funcoes2.html#exercício-1",
    "title": "Funções II",
    "section": "Exercício",
    "text": "Exercício\nImplemente uma função que receba como parâmetro três números inteiros e que armazene no primeiro parâmetro o menor dos números, no segundo o segundo menor e no terceiro o maior.\nEscreva a função main, para ler os três números do usuário, chamar a função e exibir na tela os números em ordem crescente e a média entre o menor e o maior.\nUtilize a função troca na sua implementação."
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#exercício-solução-1",
    "href": "slides/07-funcoes2/07-funcoes2.html#exercício-solução-1",
    "title": "Funções II",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\nObserve que:\n\nA função ordena_crescente deve chamar a função troca na sua solução\n\nIsto não é o mesmo que chamar troca na função main\n\nA ordem das trocas é importante"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#exercício-solução-2",
    "href": "slides/07-funcoes2/07-funcoes2.html#exercício-solução-2",
    "title": "Funções II",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\nObserve que:\n\nA função ordena_crescente chama a função troca na sua solução\n\nIsto não é o mesmo que chamar troca na função main\n\nA ordem das trocas é importante (a 1a. comparação precisa ser entre o 1o. e 3o. parâmetros)"
  },
  {
    "objectID": "slides/07-funcoes2/07-funcoes2.html#sumário",
    "href": "slides/07-funcoes2/07-funcoes2.html#sumário",
    "title": "Funções II",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nFunções sem retorno\nPassagem de parâmetro por valor e por referência\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#linguagem-de-programação",
    "href": "slides/08-funcoes3/08-funcoes3.html#linguagem-de-programação",
    "title": "Funções III",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nAulas anteriores:\n\nSintaxe em C++ para construção de funções (chamada, assinatura e definição)\nFunção com tipo void\nPassagem de parâmetro por valor e por referência"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#objetivo-da-aula",
    "href": "slides/08-funcoes3/08-funcoes3.html#objetivo-da-aula",
    "title": "Funções III",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nExplorar o conceito de entrada/saída nos parâmetros de funções"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência",
    "href": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\n\nUso de operador &\nÚtil quando:\n\nUma função deve modificar os seus parâmetros\nUma função deve retornar mais de um valor"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência-1",
    "href": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência-1",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\nPermite trabalhar com parâmetros:\n\nDe entrada: parâmetros necessários para computar a função\nDe entrada e saída: parâmetros necessários para computar a função e usados para armazenar os resultados da função\nDe saída: parâmetros usados apenas para armazenar os resultados da função"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência-2",
    "href": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência-2",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\nExemplo com Parâmetro de Saída\n\nParâmetro(s) pode(m) ser usado(s) para armazenar resultado(s) de uma função\nExemplo: função que converte temperatura em graus Celsius para Fahrenheit, armazenando o resultado em um parâmetro de saída\n\nvoid converte_temp(float c, float& f){\n    f = 1.8*c + 32;\n}"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência-3",
    "href": "slides/08-funcoes3/08-funcoes3.html#passagem-de-parâmetros-por-referência-3",
    "title": "Funções III",
    "section": "Passagem de Parâmetros por Referência",
    "text": "Passagem de Parâmetros por Referência\nExemplo com Parâmetro de Saída\nChamada à função:\nint main(){\n    float ce, fa;\n    cin >> ce;\n    converte_temp(ce, fa);\n    cout << \"Temp. em Fahrenheit: \" << fa << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções",
    "href": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\nQuantos parâmetros de entrada, saída e entrada/saída?\n\nFunção que gera um número aleatório:\n\nint rand();\n\nFunção que computa o produto entre dois números inteiros:\n\nint produto(int x, int y);\nvoid produto(int x, int y, int& r);"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções-1",
    "href": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções-1",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\n\nFunção que gera um número aleatório:\n\nint rand(); \\rightarrow nenhum parâmetro\n\nFunção que computa o produto entre dois números inteiros:\n\nint produto(int x, int y); \\rightarrow 2 parâmetros de entrada\nvoid produto(int x, int y, int& r); \\rightarrow 2 parâmetros de entrada e 1 de saída"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções-2",
    "href": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções-2",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\nQuantos parâmetros de entrada, saída e entrada/saída?\n\nFunção que troca o valor de dois números inteiros:\n\nvoid troca(int& x, int& y);\n\nFunção que calcula o quociente e resto entre dois números inteiros:\n\nvoid quoc_resto(int& x, int& y);\nvoid quoc_resto(int x, int y, int& q, int& r);}"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções-3",
    "href": "slides/08-funcoes3/08-funcoes3.html#parâmetros-de-funções-3",
    "title": "Funções III",
    "section": "Parâmetros de Funções",
    "text": "Parâmetros de Funções\nExemplos\n\nFunção que troca o valor de dois números inteiros:\n\nvoid troca(int& x, int& y); \\rightarrow 2 parâmetros de entrada e saída, ao mesmo tempo\n\nFunção que calcula o quociente e resto entre dois números inteiros:\n\nvoid quoc_resto(int& x, int& y); \\rightarrow 2 parâmetros de entrada e saída, ao mesmo tempo\nvoid quoc_resto(int x, int y, int& q, int& r);} \\rightarrow 2 entradas, 2 saídas"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#lista-de-presença",
    "href": "slides/08-funcoes3/08-funcoes3.html#lista-de-presença",
    "title": "Funções III",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250929"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#funções-com-múltiplas-saídas",
    "href": "slides/08-funcoes3/08-funcoes3.html#funções-com-múltiplas-saídas",
    "title": "Funções III",
    "section": "Funções com Múltiplas Saídas",
    "text": "Funções com Múltiplas Saídas\n\nFunções com múltiplas saídas são em geral mais complexas\nDica: dividir o problema\n\nIdentifique cada saída a ser computada pelo algoritmo\nVerifique se é melhor implementar uma função auxiliar para calcular cada saída\nChame as funções auxiliares dentro da função solicitada"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#exercício-1",
    "href": "slides/08-funcoes3/08-funcoes3.html#exercício-1",
    "title": "Funções III",
    "section": "Exercício 1",
    "text": "Exercício 1\nImplemente uma função que receba como parâmetros de entrada dois números inteiros x e y. A sua função deve armazenar em um primeiro parâmetro de saída o fatorial de x, o fatorial de y em um segundo parâmetro e x^y em um terceiro.\nA função main deve ler dois números inteiros entre 0 e 10 do usuário, passá-los como parâmetro para a função implementada e exibir as três saídas da função.\nNão utilize a função pow."
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#exercício-1-solução",
    "href": "slides/08-funcoes3/08-funcoes3.html#exercício-1-solução",
    "title": "Funções III",
    "section": "Exercício 1: Solução",
    "text": "Exercício 1: Solução\nint fatorial(int n);\nint potencia(int b, int e);\nvoid fat_pot(int x, int y, int& f1, int& f2, int& p);\n\nint main(){\n    int n1, n2, r1, r2, r3;\n    cout << \"Insira dois numeros:\\n\";\n    cin >> n1 >> n2;\n    fat_pot(n1, n2, r1, r2, r3);\n    cout << \"Fatorial1: \" << r1 << endl;\n    cout << \"Fatorial2: \" << r2 << endl;\n    cout << \"Potencia: \" << r3 << endl;\n    return 0;\n}\nint fatorial(int n){\n    int i, r = 1;\n    for(i = 1; i <= n; i++){\n        r *= i;\n    }\n    return r;\n}\nint potencia(int b, int e){\n    int i, r = 1;\n    for(i = 1; i <= e; i++){\n        r *= b;\n    }\n    return r;\n}\nvoid fat_pot(int x, int y, int& f1, int& f2, int& p){\n    f1 = fatorial(x);\n    f2 = fatorial(y);\n    p = potencia(x, y);\n}"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#exercício-2",
    "href": "slides/08-funcoes3/08-funcoes3.html#exercício-2",
    "title": "Funções III",
    "section": "Exercício 2",
    "text": "Exercício 2\nImplemente uma função que receba como parâmetro de entrada um número inteiro. A função a ser implementada deve armazenar em parâmetros de saída a quantidade de dígitos ímpares e a quantidade de dígitos pares do número.\nImplemente a função main para testar o seu programa."
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#exercício-2-1",
    "href": "slides/08-funcoes3/08-funcoes3.html#exercício-2-1",
    "title": "Funções III",
    "section": "Exercício 2",
    "text": "Exercício 2\nImplemente uma função que receba como parâmetro de entrada um número inteiro positivo denotando o primeiro termo da sequência. A função a ser implementada deve armazenar em parâmetros de saída o maior número que faz parte da sequência e também o total de termos n que compõe a sequência.\nImplemente a função main para testar o seu programa."
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#exercício-2-solução",
    "href": "slides/08-funcoes3/08-funcoes3.html#exercício-2-solução",
    "title": "Funções III",
    "section": "Exercício 2: Solução",
    "text": "Exercício 2: Solução\nvoid digitos_par_impar(int x, int &pares, int &impares);\n\nint main(){\n    int num, np, ni;\n    cout << \"Insira um nr. inteiro:\\n\";\n    cin >> num;\n    digitos_par_impar(num, np, ni);\n    cout << \"Digitos pares: \" << np << endl;\n    cout << \"Digitos impares: \" << ni << endl;\n    return 0;\n}\nvoid digitos_par_impar(int x, int &pares, int &impares){\n    int d;\n\n    pares = 0;\n    impares = 0;\n\n    while(x > 0){\n        d = x % 10;\n        if(d % 2 == 0){\n            pares++;\n        }\n        else{\n            impares++;\n        }\n        x = x/10;\n    }\n}"
  },
  {
    "objectID": "slides/08-funcoes3/08-funcoes3.html#sumário",
    "href": "slides/08-funcoes3/08-funcoes3.html#sumário",
    "title": "Funções III",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nParâmetros de entrada, saída e de entrada e saída\nFunções que chamam outras funções para simplificar a lógica de programas\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções",
    "title": "Funções Recursivas",
    "section": "Funções",
    "text": "Funções\nFunções e Abstração"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#linguagem-de-programação",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#linguagem-de-programação",
    "title": "Funções Recursivas",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nNas aulas anteriores (funções em C++):\n\nChamada, assinatura e definição\nPassagem de parâmetro por valor e por referência\nParâmetros de entrada, saída e entrada/saída"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#objetivo-da-aula",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#objetivo-da-aula",
    "title": "Funções Recursivas",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o conceito e uso de funções recursivas"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\n\n\n\n\n\n\nEstrutura Recursiva:\n\n\nQualquer coisa que, de forma abstrata, é formada por partes menores dela mesma"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade-1",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade-1",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\nExemplos de estruturas recursivas:"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade-2",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade-2",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\n\n\n\n\n\n\nRecursividade em Programação:\n\n\nCom o uso de recursividade (ou recursão), a solução de um problema depende das soluções de partes menores do mesmo problema."
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\n\n\n\n\n\n\nFunção que possui chamadas diretas ou indiretas à ela mesma.\n\n\n\nExemplo:\nint funcao(int x){\n    if(x == 0){\n        return 1;\n    }\n    else{\n        cout << x << endl;\n        return funcao(x-1);\n    }\n}"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-1",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-1",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\n\n\n\n\n\n\nIdeia de uma função recursiva:\n\n\nPara implementar uma função recursiva, você deve programá-la para que ela realize chamadas a ela mesma até que uma condição seja alcançada, evitando assim recursividade infinita."
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-2",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-2",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\nFatorial: exemplo de função recursiva\nO fatorial de um número pode ser calculado a partir do fatorial do número anterior\nEste processo é repetido até que o fatorial do primeiro número para o qual o fatorial está definido seja calculado\n\nLembre-se que f(0) = f(1) = 1"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-3",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-3",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = 1 \\times 2 \\times 3 \\times ... \\times (n-2) \\times (n-1) \\times n"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-4",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-4",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{1\n                                         \\times 2\n                                         \\times 3\n                                         \\times ... \\times (n-2)\n                                         \\times (n-1)}_\\text{f(n-1)}\n                                         \\times n\n\n\n\nO fatorial de n, dado por f(n), pode ser obtido a partir do fatorial de n-1, que é f(n-1)\nEm outras palavras, f(n-1) “está dentro” de f(n)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-5",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-5",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{1\n                                         \\times 2\n                                         \\times 3\n                                         \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                         \\times (n-1)}_\\text{f(n-1)}\n                                         \\times n\n\n\n\nf(n-2) “está dentro” de f(n-1)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-6",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-6",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{\n                             \\underbrace{1\n                                           \\times 2\n                                           \\times 3}_\\text{f(3)}\n                                           \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                           \\times (n-1)}_\\text{f(n-1)}\n                                           \\times n\n\n\n\nf(2) “está dentro” de f(3)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-7",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-7",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{\n                             \\underbrace{\n                             \\underbrace{1\n                                           \\times 2}_\\text{f(2)}\n                                           \\times 3}_\\text{f(3)}\n                                           \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                           \\times (n-1)}_\\text{f(n-1)}\n                                           \\times n\n\n\n\nf(1) “está dentro” de f(2)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-8",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-8",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\n\n\n  f(n) = \\prod_{i=1}^{n} i = \\underbrace{\n                             \\underbrace{\n                             \\underbrace{\n                             \\underbrace{\n                             \\underbrace{1         }_\\text{f(1) = 1}\n                                           \\times 2}_\\text{f(2)}\n                                           \\times 3}_\\text{f(3)}\n                                           \\times ... \\times (n-2)}_\\text{f(n-2)}\n                                           \\times (n-1)}_\\text{f(n-1)}\n                                           \\times n\n\n\n\nFinalmente, f(1) é um valor conhecido: f(1) = 1"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-9",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-9",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\nIsto torna possível calcular f(2) (que depende de f(1)), f(3) (que depende de f(2)) e assim sucessivamente até f(n), que depende de f(n-1)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-10",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-10",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\nDefinição matemática:\n\nf(n)=\\begin{cases}\n    1, & \\text{se } n = 0 \\text{, ou } n = 1\\\\\n    n*f(n-1), & \\text{se } n > 0\\\\\n\\end{cases}"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-11",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-11",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fatorial\nFunção em C++:\nint fat(int n){\n    if(n == 0 || n == 1){\n        return 1;\n    }\n    else{\n        return n*fat(n-1);\n    }\n}"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-12",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-12",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPasso Base e Passo Recursivo\nToda função recursiva possui:\n\nUm (ou mais) passo base\n\nResultado é conhecido sem chamadas à própria função\nPor exemplo: fat(0) e fat(1), que são iguais a 1"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-13",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-13",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPasso Base e Passo Recursivo\nToda função recursiva possui:\n\nUm (ou mais) passo recursivo\n\nEnvolve chamadas à própria função variando-se os parâmetros\nPasso em que se tenta resolver um sub-problema do problema inicial\nPor exemplo: fat(n), que é igual a n*fat(n-1)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-14",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-14",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPasso Base e Passo Recursivo\n\nDefinir funções de forma recursiva se resume a encontrar os dois passos\nTradução para linguagem de programação pode ser obtida facilmente da notação matemática"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-15",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-15",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\nChamada à função para calcular o fatorial de 6:\n1a. chamada: fat(6)\n2a. chamada: 6 * fat(5)\n3a. chamada: 6 * 5 * fat(4)\n4a. chamada: 6 * 5 * 4 * fat(3)\n5a. chamada: 6 * 5 * 4 * 3 * fat(2)\n6a. chamada: 6 * 5 * 4 * 3 * 2 * fat(1)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-16",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-16",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\n1o. retorno: 6 * 5 * 4 * 3 * 2 * 1, fat(1) se tornou 1\n2o. retorno: 6 * 5 * 4 * 3 * 2, fat(2) se tornou 2 * 1\n3o. retorno: 6 * 5 * 4 * 6, fat(3) se tornou 3 * 2\n4o. retorno: 6 * 5 * 24, fat(4) se tornou 4 * 6\n5o. retorno: 6 * 120, fat(5) se tornou 5 * 24\n6o. retorno: 720, fat(6) se tornou 6 * 120"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-17",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-17",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\nComo este mecanismo funciona?\n\nInternamente, o computador gerencia uma estrutura em forma de pilha, com todas as chamadas a funções de um programa\n\n“Pilha”: região na memória que funciona de forma similar a uma pilha de papeis sobre uma mesa (um papel é colocado sobre o outro)\n\nAo ser chamada, diz-se que uma função foi empilhada"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-18",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-18",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nFatorial - Execução do Programa\n\nEm funções recursivas, ocorre o empilhamento de várias chamadas a uma mesma função\nTão logo um passo base é alcançado, a chamada atualmente no topo da pilha é desempilhada\nIsto provoca o desempilhamento das chamadas anteriores, até que a chamada original também seja desempilhada"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#lista-de-presença",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#lista-de-presença",
    "title": "Funções Recursivas",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20251006"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-19",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-19",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(6)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-20",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-20",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(5)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-21",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-21",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(4)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-22",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-22",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(3)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-23",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-23",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(2)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-24",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-24",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nEmpilhamento da chamada fat(1)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-25",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-25",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(1): passo base"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-26",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-26",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(2)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-27",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-27",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(3)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-28",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-28",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(4)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-29",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-29",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(5)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-30",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-30",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nPilha de Chamadas a Funções\n\n\n\n\n\nDesempilhamento de fat(6)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-31",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-31",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Soma dos n Primeiros Números Inteiros\nSoma de 1 até n, onde n é um número inteiro maior que 0:\n\nQual a definição matemática?\nQual o código correspondente à função?"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-32",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-32",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Soma dos n Primeiros Números Inteiros\nDefinição matemática:\n\n\n\n\ns(n)=\\begin{cases}\n    1, & \\text{se } n = 1\\\\\n    n+s(n-1), & \\text{se } n > 1\\\\\n\\end{cases}\n\n\n\nFunção:\nint soma_n(int n){\n    if(n == 1){\n        return 1;\n    }\n    else{\n        return n+soma_n(n-1);\n    }\n}"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-33",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-33",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\n\n  f(n) = \\sum_{i=1}^{n} 3i^{2} = 3 + 12 + 27 + 48 + ... + 3(n-1)^{2} + 3n^{2}\n\nÉ possível obter facilmente o código em C++ para computar fórmulas matemáticas baseadas em somatório/produtório:\n\nA primeira etapa envolve identificar o passo base\nA segunda etapa envolve identificar o passo recursivo"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-34",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-34",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\n\nPasso base:\n\nPara n=1, o somatório f(n) tem apenas um termo, igual a 3\\times(1)^{2}=3\n\nPasso recursivo:\n\nPara um n qualquer, f(n) = f(n-1) + 3 n^{2} (verifique expandindo o somatório)"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-35",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-35",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\nDaí, é possível deduzir a seguinte definição matemática:\n\nf(n)=\\begin{cases}\n    3, & \\text{se } n = 1\\\\\n    3n^2 + f(n-1), & \\text{se } n > 1\\\\\n\\end{cases}"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-36",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-36",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nExemplo: Fórmula Matemática\nA partir da def. matemática, é possível definir a seguinte função em C++:\nint formula(int n){\n    if(n == 1){\n        return 3;\n    }\n    else{\n        return 3*n*n + formula(n-1);\n    }\n}"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#sequências-definidas-recursivamente",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#sequências-definidas-recursivamente",
    "title": "Funções Recursivas",
    "section": "Sequências Definidas Recursivamente",
    "text": "Sequências Definidas Recursivamente\nFunções recursivas podem ser úteis para definir sequências numéricas:\n\nCada termo é gerado em função de termos anteriores\nExemplo: sequência de Fibonacci\n\nOs dois primeiros termos são iguais a 1\nCada termo é a soma dos dois termos anteriores\nSequência resultante: 1, 1, 2, 3, 5, 8, 13, 21, 34, …"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#sequências-definidas-recursivamente-1",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#sequências-definidas-recursivamente-1",
    "title": "Funções Recursivas",
    "section": "Sequências Definidas Recursivamente",
    "text": "Sequências Definidas Recursivamente\n\nQual a definição matemática?\n\nO enésimo termo é dado por f(n)\nO primeiro termo é o termo com n=0\n\nQual o código correspondente à função?"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#exemplo-de-sequência-recursiva",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#exemplo-de-sequência-recursiva",
    "title": "Funções Recursivas",
    "section": "Exemplo de Sequência Recursiva",
    "text": "Exemplo de Sequência Recursiva\nSequência de Fibonacci\n\n\nDefinição matemática:\n\n\nf(n)=\\begin{cases}\n    1, & \\text{se } n = 0\\\\\n    1, & \\text{se } n = 1\\\\\n    f(n-1)+f(n-2), & \\text{se } n > 1\\\\\n\\end{cases}\n\n\n\nFunção:\nint fib(int n){\n    if(n <= 1){\n        return 1;\n    }\n    else{\n        return fib(n-1)+fib(n-2);\n    }\n}"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-37",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#funções-recursivas-37",
    "title": "Funções Recursivas",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nVantagens e Desvantagens\n\nVantagem: facilidade de implementação\nDesvantagem: execução mais lenta em relação à versão iterativa"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade-3",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#recursividade-3",
    "title": "Funções Recursivas",
    "section": "Recursividade",
    "text": "Recursividade\nFunções e Abstração"
  },
  {
    "objectID": "slides/09-funcoes_rec/09-funcoes_rec.html#sumário",
    "href": "slides/09-funcoes_rec/09-funcoes_rec.html#sumário",
    "title": "Funções Recursivas",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nFunções recursivas\nPasso base e passo recursivo\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#nas-aulas-anteriores",
    "href": "slides/10-vetores/10-vetores.html#nas-aulas-anteriores",
    "title": "Vetores",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nConstruções de funções em C++\nFunções recursivas em C++"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#objetivo-da-aula",
    "href": "slides/10-vetores/10-vetores.html#objetivo-da-aula",
    "title": "Vetores",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de vetores:\n\nRepresentação em memória\nDeclaração de vetores\nInicialização de vetores\nExercícios"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#motivação",
    "href": "slides/10-vetores/10-vetores.html#motivação",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nExercício\nImplemente um programa que leia as notas de 3 alunos e mostre quantas notas são maiores do que a média entre elas."
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#motivação-1",
    "href": "slides/10-vetores/10-vetores.html#motivação-1",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nint main(){\n    float n1, n2, n3, media = 0.0;\n    int cont = 0;\n\n    cin >> n1 >> n2 >> n3;\n    media = (n1 + n2 + n3)/3;\n    \n    if(n1 > media){\n        cont++;\n    }\n    if(n2 > media){\n        cont++;\n    }\n    if(n3 > media){\n        cont++;\n    }\n\n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#motivação-2",
    "href": "slides/10-vetores/10-vetores.html#motivação-2",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nE se desejarmos mudar para 6 notas?\nint main(){\n    float n1, n2, n3, n4, n5, n6, media = 0.0;\n    int cont = 0;\n\n    cin >> n1 >> n2 >> n3 >> n4 >> n5 >> n6;\n    media = (n1 + n2 + n3 + n4 + n5 + n6)/6;\n    \n    if(n1 > media){\n        cont++;\n    }\n    if(n2 > media){\n        cont++;\n    }\n    if(n3 > media){\n        cont++;\n    }\n    if(n4 > media){\n        cont++;\n    }\n    if(n5 > media){\n        cont++;\n    }\n    if(n6 > media){\n        cont++;\n    }\n\n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#motivação-3",
    "href": "slides/10-vetores/10-vetores.html#motivação-3",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nE se desejarmos mudar para 100 notas?\n\nUso de vetores\nTambém funciona para um tamanho n qualquer"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#vetor",
    "href": "slides/10-vetores/10-vetores.html#vetor",
    "title": "Vetores",
    "section": "Vetor",
    "text": "Vetor\n\nMecanismo disponibilizado por linguagens de programação\nArmazena dados de um mesmo tipo em memória\nTorna possível o uso de novos tipos de variáveis:\n\nVetor de char\nVetor de int\nVetor de float\nVetor de bool"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#vetor-1",
    "href": "slides/10-vetores/10-vetores.html#vetor-1",
    "title": "Vetores",
    "section": "Vetor",
    "text": "Vetor\nRepresentação em Memória\n\n\n\n\n\n\n\n\n\nVariável: uma posição na memória para guardar um valor\nVetor: várias posições na memória para guardar vários valores"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#declarando-um-vetor",
    "href": "slides/10-vetores/10-vetores.html#declarando-um-vetor",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nSintaxe\ntipo_do_vetor nome_do_vetor[tamanho_do_vetor];\n\ntipo_do_vetor são os tipos de variáveis conhecidos: int, char, float, bool\nnome_do_vetor segue as mesmas regras que usamos para variáveis\nO tamanho_do_vetor é uma expressão cujo tipo deve ser int"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#declarando-um-vetor-1",
    "href": "slides/10-vetores/10-vetores.html#declarando-um-vetor-1",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExercício\nEscrever declaração de vetor:\n\nDo tipo inteiro, com 30 posições, chamado idades\nDo tipo caractere, com 5 posições, chamado vogais\nPara armazenar n valores do tipo float"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#declarando-um-vetor-2",
    "href": "slides/10-vetores/10-vetores.html#declarando-um-vetor-2",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExercício: Solução\n1. int idades[30];\n2. char vogais[5];\n3. float v[n];"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#declarando-um-vetor-3",
    "href": "slides/10-vetores/10-vetores.html#declarando-um-vetor-3",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nTamanho de um Vetor em C++\n\nEm C++, o tamanho do vetor é o seu tamanho máximo\nOu seja, a declaração int v[50]; diz que:\n\nO vetor v pode conter no máximo 50 valores"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#declarando-um-vetor-4",
    "href": "slides/10-vetores/10-vetores.html#declarando-um-vetor-4",
    "title": "Vetores",
    "section": "Declarando um Vetor",
    "text": "Declarando um Vetor\nExpressão Utilizada como Tamanho do Vetor\nPor causa de uma extensão da linguagem, é possível utilizar int v[n], com n sendo uma variável ou até expressões como int v[n1+n2], desde que a expressão resulte em um inteiro"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#posições-de-um-vetor",
    "href": "slides/10-vetores/10-vetores.html#posições-de-um-vetor",
    "title": "Vetores",
    "section": "Posições de um Vetor",
    "text": "Posições de um Vetor\n\n\n\n\n\n\n\n\n\nUm vetor com n posições tem posições válidas que vão de 0 até n-1\nUm vetor v não pode ser usado diretamente em expressões\nCada elemento v[0], …, v[n-1] é que deve ser usado"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#posições-de-um-vetor-1",
    "href": "slides/10-vetores/10-vetores.html#posições-de-um-vetor-1",
    "title": "Vetores",
    "section": "Posições de um Vetor",
    "text": "Posições de um Vetor\n\n\n\n\n\n\n\n\n\nPara o vetor mostrado, qual o valor de cada expressão a seguir, sendo x = 2?\n\nv[6]\nv[0] + v[7]\nv[x]\nv[2*x + 3]\nv[v[x]]\nv[10 - v[-v[4]]]\nv[-1]\nv[8]\nv[1000]"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#lista-de-presença",
    "href": "slides/10-vetores/10-vetores.html#lista-de-presença",
    "title": "Vetores",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20251013"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#inicialização-de-vetores",
    "href": "slides/10-vetores/10-vetores.html#inicialização-de-vetores",
    "title": "Vetores",
    "section": "Inicialização de Vetores",
    "text": "Inicialização de Vetores\nSintaxe\n\nint v[5]; \\rightarrow inicializa cada valor com lixo\nint v[5] = {10, 20, 30, 40, 50}; \\rightarrow inicializa com valores indicados\nint v[] = {10, 20, 30, 40, 50}; \\rightarrow inicializa com valores indicados (tamanho do vetor é deduzido a partir dos valores)"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#inicialização-de-vetores-1",
    "href": "slides/10-vetores/10-vetores.html#inicialização-de-vetores-1",
    "title": "Vetores",
    "section": "Inicialização de Vetores",
    "text": "Inicialização de Vetores\nSintaxe\n\nint v[5] = {}; \\rightarrow inicializa todos os valores com 0\nint v[5] = {5, 10}; \\rightarrow inicializa posições 0 e 1 com os valores indicados, todos os outros com 0"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#motivação-4",
    "href": "slides/10-vetores/10-vetores.html#motivação-4",
    "title": "Vetores",
    "section": "Motivação",
    "text": "Motivação\nVoltando ao exercício inicial: e se desejarmos mudar para 100 notas?\n\nUso de vetores"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-inicial",
    "href": "slides/10-vetores/10-vetores.html#exercício-inicial",
    "title": "Vetores",
    "section": "Exercício Inicial",
    "text": "Exercício Inicial\nExercício: Solução\nint main(){\n    float notas[100], media = 0.0;\n    int i, cont = 0;\n    for(i = 0; i < 100; i++){\n        cin >> notas[i];\n        media += notas[i];\n    }\n    media /= 100;\n\n    for(i = 0; i < 100; i++){\n        if(notas[i] > media) cont++;\n    }\n    \n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-inicial-1",
    "href": "slides/10-vetores/10-vetores.html#exercício-inicial-1",
    "title": "Vetores",
    "section": "Exercício Inicial",
    "text": "Exercício Inicial\nE se fosse pedido um número n (informado pelo usuário) de notas?"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-inicial-2",
    "href": "slides/10-vetores/10-vetores.html#exercício-inicial-2",
    "title": "Vetores",
    "section": "Exercício Inicial",
    "text": "Exercício Inicial\nExercício: Solução\nint main(){\n    int n, i, cont = 0;\n    cout << \"Insira a quantidade de notas:\\n\";\n    cin >> n;\n    float notas[n], media = 0;\n    for(i = 0; i < n; i++){\n        cin >> notas[i];\n        media += notas[i];\n    }\n    media /= n;\n\n    for(i = 0; i < n; i++){\n        if(notas[i] > media) cont++;\n    }\n\n    cout << \"acima da media: \" << cont << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-1-1",
    "href": "slides/10-vetores/10-vetores.html#exercício-1-1",
    "title": "Vetores",
    "section": "Exercício 1",
    "text": "Exercício 1\nLer um número n do usuário e em seguida, armazenar n notas em um vetor. O seu programa deve imprimir a maior das notas armazenadas."
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-1-solução",
    "href": "slides/10-vetores/10-vetores.html#exercício-1-solução",
    "title": "Vetores",
    "section": "Exercício 1: Solução",
    "text": "Exercício 1: Solução\nint main(){\n    int n, i;\n    cout << \"Insira a quantidade de notas:\\n\";\n    cin >> n;\n    float notas[n], maior;\n\n    //Leitura das notas\n    for(i = 0; i < n; i++){\n        cin >> notas[i];\n    }\n\n    //Processamento da maior nota\n    for(i = 0; i < n; i++){\n        if(i == 0){\n            maior = notas[i];\n        }\n        else{\n            if(notas[i] > maior){\n                maior = notas[i];\n            }\n        }\n    }\n    cout << \"Maior nota: \" << maior << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-2",
    "href": "slides/10-vetores/10-vetores.html#exercício-2",
    "title": "Vetores",
    "section": "Exercício 2",
    "text": "Exercício 2\nLer um número n do usuário e em seguida, armazenar n notas em um vetor. O seu programa deve imprimir a posição da maior nota armazenada."
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-2-solução",
    "href": "slides/10-vetores/10-vetores.html#exercício-2-solução",
    "title": "Vetores",
    "section": "Exercício 2: Solução",
    "text": "Exercício 2: Solução\nint main(){\n    int n, i, maiorpos;\n    cout << \"Insira a quantidade de notas:\\n\";\n    cin >> n;\n    float notas[n];\n\n    //Leitura das notas\n    for(i = 0; i < n; i++){\n        cin >> notas[i];\n    }\n    \n    //Processamento da posição da maior nota\n    for(i = 0; i < n; i++){\n        if(i == 0){\n            maiorpos = i;\n        }\n        else{\n            if(notas[i] > notas[maiorpos]){\n                maiorpos = i;\n            }\n        }\n    }\n    cout << \"Pos. da maior nota: \" << maiorpos << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-3",
    "href": "slides/10-vetores/10-vetores.html#exercício-3",
    "title": "Vetores",
    "section": "Exercício 3",
    "text": "Exercício 3\nLer um número n do usuário e em seguida, ler os elementos de dois vetores de números reais de tamanho n. O seu programa deve calcular e exibir na tela o vetor correspondente à soma vetorial dos dois vetores.\n\nVetor u = u[0],...,u[n-1]\nVetor v = v[0],...,v[n-1]\nVetor soma: u[0]+v[0],u[1]+v[1],...,u[n-1]+v[n-1]"
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#exercício-4",
    "href": "slides/10-vetores/10-vetores.html#exercício-4",
    "title": "Vetores",
    "section": "Exercício 4",
    "text": "Exercício 4\nLer um número inteiro n do usuário. O seu programa deve armazenar em um vetor os dígitos que compõem o número n na ordem inversa. Por exemplo, para n = 2134, o vetor resultante v deve ser igual a [4,3,1,2]."
  },
  {
    "objectID": "slides/10-vetores/10-vetores.html#sumário",
    "href": "slides/10-vetores/10-vetores.html#sumário",
    "title": "Vetores",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje: vetores\n\nSintaxe de declaração\nAcesso às posições\nInicialização\nExercícios\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#na-aula-anterior",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#na-aula-anterior",
    "title": "Funções e Vetores",
    "section": "Na Aula Anterior",
    "text": "Na Aula Anterior\nVetores em C++:\n\nDeclaração\nAcesso aos elementos\nInicialização\nExercícios"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#objetivo-da-aula",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#objetivo-da-aula",
    "title": "Funções e Vetores",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de funções que operam sobre vetores:\n\nSintaxe\nExercícios"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-e-vetores",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-e-vetores",
    "title": "Funções e Vetores",
    "section": "Funções e Vetores",
    "text": "Funções e Vetores\n\nÉ possível passar vetores como parâmetro de funções\nAlém do vetor a ser passado como parâmetro, é necessário um parâmetro adicional \\rightarrow o tamanho do vetor"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\nExemplo com um vetor como parâmetro:\ntipo_func nome_func(tipo_vetor nome_vetor[], int tam_vetor){\n    corpo da funcao\n}"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-1",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-1",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\n\ntipo_vetor é o tipo do vetor passado como parâmetro: int, char, float, bool\nnome_vetor é o nome do vetor passado como parâmetro. Observe que o [] é vazio\ntam_vetor é o tamanho do vetor passado como parâmetro"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-2",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-2",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\nCaso haja mais de um vetor:\n\nSe tiverem tamanhos diferentes, é necessário incluir um parâmetro para o tamanho de cada um\nSe tiverem um mesmo tamanho, basta utilizar um único parâmetro para o tamanho"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-3",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-3",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nSintaxe\nExemplo com dois vetores como parâmetros:\ntipo_func nome_func(tipo_vetor nome_vetor1[], int tam_vetor1,\n                    tipo_vetor nome_vetor2[], int tam_vetor2){\n    corpo da funcao\n}"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-4",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-função-com-vetores-4",
    "title": "Funções e Vetores",
    "section": "Declaração de Função com Vetores",
    "text": "Declaração de Função com Vetores\nExercícios\nEscrever assinatura da função:\n\nQue imprime um vetor de inteiros na tela\nQue recebe um vetor de caracteres e retorna quantos dos elementos no vetor são iguais a um caractere passado como parâmetro\nQue recebe dois vetores de inteiros e retorna o maior valor dentre todos, seja ele do primeiro ou do segundo vetor"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-funções-com-vetores",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#declaração-de-funções-com-vetores",
    "title": "Funções e Vetores",
    "section": "Declaração de Funções com Vetores",
    "text": "Declaração de Funções com Vetores\nExercícios: Solução\n1. void imprime_vetor(int v[], int tam);\n2. int conta_ocorrencias(char v[], int tam, char c);\n3. int computa_maior(int v1[], int tam1,\n                     int v2[], int tam2);"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#lista-de-presença",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#lista-de-presença",
    "title": "Funções e Vetores",
    "section": "Lista de Presença",
    "text": "Lista de Presença\nSem lista de presença (greve no transporte público)"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nChamada de Funções\n\nNas chamadas às funções, variáveis do tipo vetor são passadas como parâmetros utilizando apenas o seu nome\nExemplo:\n\nvoid imprime_vet(int vet[], int n);\nint main(){\n        int n;\n        cin >> n;\n        int v[n], i;\n        for(i = 0; i < n; i++){\n            v[i] = 2*n+i;\n        }\n        imprime_vet(v, n); //chama função\n        return 0;\n}"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-1",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-1",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nPassagem de Parâmetros\nO que faz o código a seguir?\nvoid func(int vet[], int n){\n    int i;\n    for(i = 0; i < n; i++){\n        vet[i] = 1;\n    }\n}\nint main(){\n        int n;\n        cin >> n;\n        int v[n], i;\n        func(v, n);\n        for(i = 0; i < n; i++){\n            cout << v[i] << \" \";\n        }\n        cout << endl;\n        return 0;\n}"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-2",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-2",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nPassagem de Parâmetros\n\nTodo vetor passado para funções como parâmetro é passado por referência\nIsto significa dizer que as alterações realizadas nos vetores dentro da função permanecem após a função ser finalizada"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-3",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-3",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nFunção com Vetores como Resultados\n\nEm C++, não é possível retornar um vetor com o comando return\nEm outras palavras, a assinatura seguinte não é permitida:\n\nint[] soma_vetores(int v1[], int v2[], int n);\n\nCaso a função calcule um ou mais vetores, ela deve armazenar o resultado nos parâmetros da função"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#exercícios-1",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#exercícios-1",
    "title": "Funções e Vetores",
    "section": "Exercícios:",
    "text": "Exercícios:\n\nImplemente uma função chamada le_vet, para ler os elementos de um vetor de números inteiros de tamanho n\nImplemente uma função que recebe como parâmetros de entrada um vetor de caracteres e um caractere. A função deve retornar quantos dos caracteres no vetor são iguais ao caractere passado como parâmetro"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-4",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-4",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nFunções Recursivas\nFunções recursivas também podem ser utilizadas com vetores"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-5",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-com-vetores-5",
    "title": "Funções e Vetores",
    "section": "Funções com Vetores",
    "text": "Funções com Vetores\nFunções Recursivas\n\nA recursividade é alcançada pela divisão do vetor em partes menores:\n\nPrimeira chamada considera todos as n posições de um vetor\nSegunda chamada considera as n-1 primeiras posições\nTerceira chamada considera as n-2 primeiras posições\nPasso base: alcançado quando não é possível dividir o vetor, ou seja, o seu tamanho é igual a 1"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-2",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-2",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nFunção recursiva para a soma de todos os valores de um vetor:"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-3",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-3",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nA primeira chamada à função soma divide o vetor em duas partes: um nr. inteiro igual ao último valor e um vetor contendo os demais valores. A função deve ser chamada novamente para o novo vetor"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-4",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-4",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nO mesmo acontece para todas as demais chamadas:"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-5",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-5",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-6",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-6",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-7",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-7",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nQuando o vetor possui apenas um valor, o passo base é alcançado"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-8",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-8",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nApós isto, as chamadas que estão empilhadas utilizam os resultados calculados para serem desempilhadas e calcular a soma de todos os valores do vetor:\n\ns([2,3]) = 5\ns([2,3,6]) = 11\ns([2,3,6,8]) = 19\ns([2,3,6,8,4]) = 23"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-9",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#funções-recursivas-9",
    "title": "Funções e Vetores",
    "section": "Funções Recursivas",
    "text": "Funções Recursivas\nSoma dos Valores em um Vetor\nFunção resultante:\nint soma(int v[], int n){\n    if(n == 1){\n        return v[0];\n    }\n    else{\n        return soma(v, n-1) + v[n-1];\n    }\n}"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#exercícios-2",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#exercícios-2",
    "title": "Funções e Vetores",
    "section": "Exercícios:",
    "text": "Exercícios:\n\nImplemente uma função recursiva chamada imprime_vet, para imprimir os elementos de um vetor de números inteiros de tamanho n na tela\n\nCaso os valores tenham sido impressos na ordem inversa dos valores digitados, modifique a função para imprimir os valores na mesma ordem\n\nImplemente a questão 2 anterior (contar quantos caracteres de um vetor são iguais a um caractere passado como parâmetro) de forma recursiva"
  },
  {
    "objectID": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#sumário",
    "href": "slides/11-funcoes_e_vetores/11-funcoes_e_vetores.html#sumário",
    "title": "Funções e Vetores",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nSintaxe de implementação de funções com vetores\nFunções recursivas com vetores\nExercícios\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#nas-aulas-anteriores",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#nas-aulas-anteriores",
    "title": "Funções e Matrizes",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nVetores\nFunções com vetores"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#objetivo-da-aula",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#objetivo-da-aula",
    "title": "Funções e Matrizes",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de matrizes:\n\nDeclaração de matrizes\nInicialização de matrizes\nFunções e matrizes\nExercícios"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declarando-uma-matriz",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declarando-uma-matriz",
    "title": "Funções e Matrizes",
    "section": "Declarando uma Matriz",
    "text": "Declarando uma Matriz\nSintaxe\ntipo_da_matriz nome_da_matriz[n_linhas][n_colunas];\n\ntipo_da_matriz são os tipos de variáveis conhecidos: int, char, float, bool.\nnome_da_matriz segue as mesmas regras que usamos para variáveis\nn_linhas é uma expressão para o número de linhas da matriz cujo tipo deve ser int\nn_colunas é uma expressão para o número de colunas da matriz cujo tipo deve ser int"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declarando-uma-matriz-1",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declarando-uma-matriz-1",
    "title": "Funções e Matrizes",
    "section": "Declarando uma Matriz",
    "text": "Declarando uma Matriz\nExercício\nEscrever declaração de matriz:\n\nDo tipo real e tamanho 2 x 2, chamada A\nDo tipo caractere e tamanho 10 x 10, chamada img\nDo tipo inteiro e tamanho nl x nc, chamada mat"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declarando-uma-matriz-2",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declarando-uma-matriz-2",
    "title": "Funções e Matrizes",
    "section": "Declarando uma Matriz",
    "text": "Declarando uma Matriz\nExercício: Solução\n1. float A[2][2];\n2. char img[10][10];\n3. int mat[nl][nc];"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz",
    "title": "Funções e Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nAcesso a Elementos de Matrizes\n\nUma matriz com nl linhas e nc colunas:\n\nTem índices de linhas válidos que vão de 0 até nl-1\nTem índices de colunas válidos que vão de 0 até nc-1\n\nUma matriz m não pode ser usada diretamente em expressões\n\nCada elemento m[0][0],m[0][1], …, m[nl-1][nc-1] é que deve ser usado"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-1",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-1",
    "title": "Funções e Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nAcesso a Elementos de Matrizes\nPara acessar cada elemento da matriz m:\n\nO primeiro índice acessa a linha da matriz\nO segundo índice acessa a coluna da matriz\nExemplo: m[2][0] acessa a terceira linha e primeira coluna"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-2",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-2",
    "title": "Funções e Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nPercorrendo uma Matriz\nPara acessar cada elemento de uma matriz de forma automática, é necessário iterar todas as colunas de todas as linhas da matriz. Ou seja:\n\nUm for para variar o índice da linha\nUm for para variar o índice da coluna\nOs laços devem estar aninhados\nA ordem dos laços pode ou não influenciar no resultado, dependendo do uso final do laço no algoritmo"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-3",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-3",
    "title": "Funções e Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nExercício: Leitura de Dados\nImplemente um programa que leia do usuário as dimensões de uma matriz de inteiros e que leia também cada um de seus elementos.\nImprima a matriz no formato adequado na tela."
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-4",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#posições-de-uma-matriz-4",
    "title": "Funções e Matrizes",
    "section": "Posições de uma Matriz",
    "text": "Posições de uma Matriz\nExercício: Solução\nint main(){\n    int nl, nc;\n    cin >> nl >> nc;\n    int m[nl][nc], i, j;\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cin >> m[i][j];\n        }\n    }\n\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cout << m[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#inicialização-de-matrizes",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#inicialização-de-matrizes",
    "title": "Funções e Matrizes",
    "section": "Inicialização de Matrizes",
    "text": "Inicialização de Matrizes\nForma 1:\nint m[3][4] = { {1,2,3,4},\n                {5,6,7,8},\n                {9,10,11,12} };\nForma 2:\nint m[][4] = { {1,2,3,4},\n               {5,6,7,8},\n               {9,10,11,12} };"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#inicialização-de-matrizes-1",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#inicialização-de-matrizes-1",
    "title": "Funções e Matrizes",
    "section": "Inicialização de Matrizes",
    "text": "Inicialização de Matrizes\nForma 3:\nint m[3][4] = {1,2,3,4,\n               5,6,7,8,\n               9,10,11,12};\nForma 4:\nint m[][4] = {1,2,3,4,\n              5,6,7,8,\n              9,10,11,12};"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#lista-de-presença",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#lista-de-presença",
    "title": "Funções e Matrizes",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20251020"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-e-matrizes",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-e-matrizes",
    "title": "Funções e Matrizes",
    "section": "Funções e Matrizes",
    "text": "Funções e Matrizes\n\nÉ possível passar matrizes como parâmetro de funções\nÉ necessário passar também outros dois parâmetros, relativos ao número de linhas e colunas da matriz"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nMatrizes para Uso em Funções\nEm C++, para trabalhar com matrizes como parâmetros de funções, também é preciso:\n\nA declaração de uma constante global com o número máximo de linhas/colunas de uma matriz (constante MAX, inicializada com um número grande)\nQue todas as matrizes do programa sejam declaradas com esta constante no número de linhas e colunas\nInformar na assinatura da função que cada matriz passada como parâmetro tem MAX colunas"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes-1",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes-1",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nMatrizes para Uso em Funções\n\nIsto acontece por causa de uma limitação da linguagem C++, que exige que o número de colunas de uma matriz passada como parâmetro seja constante\nOs programas implementados podem não usar todas as MAX linhas e MAX colunas das matrizes"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes-2",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes-2",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nMatrizes para Uso em Funções - Função main\nO programa declara matriz com tamanho máximo 100 x 100, mas usa nl x nc elementos\nconst int MAX = 100;\nint main(){\n    int mat[MAX][MAX], nl, nc, i, j;\n    cin >> nl >> nc;\n\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cin >> mat[i][j];\n        }\n    }\n\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n            cout << mat[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes-3",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#função-com-matrizes-3",
    "title": "Funções e Matrizes",
    "section": "Função com Matrizes",
    "text": "Função com Matrizes\nA linha\nconst int MAX = 100;\né equivalente a\n#define MAX 100\nVocê pode usar qualquer uma das duas formas."
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nSintaxe\nExemplo com uma matriz como parâmetro:\ntipo_func nome_func(tipo_matriz nome_matriz[][MAX],\n                    int n_linhas, int n_cols){\n    corpo da funcao\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-1",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-1",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nSintaxe\n\ntipo_matriz é o tipo da matriz passada como parâmetro: int, char, float, bool.\nnome_matriz é o nome da matriz passada como parâmetro. Observe que o primeiro [] é em branco e o segundo [] deve ter obrigatoriamente o nr. máximo de colunas (no caso, MAX)\nn_linhas é número de linhas da matriz\nn_cols é número de colunas da matriz"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-2",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-2",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nCaso haja mais de uma matriz, é necessário utilizar parâmetros que indiquem o número de linhas e colunas de cada uma delas"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-3",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-função-com-matrizes-3",
    "title": "Funções e Matrizes",
    "section": "Declaração de Função com Matrizes",
    "text": "Declaração de Função com Matrizes\nExercícios\nEscrever assinatura da função:\n\nQue imprime uma matriz de inteiros na tela\nQue recebe uma matriz de caracteres e retorna quantos dos elementos na matriz são iguais a um caractere passado como parâmetro\nQue recebe duas matrizes de inteiros de mesmo tamanho e retorna o maior valor dentre todos, seja ele da primeira ou da segunda matriz"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-funções-com-matrizes",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#declaração-de-funções-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Declaração de Funções com Matrizes",
    "text": "Declaração de Funções com Matrizes\nExercícios: Solução\nvoid imprime_matriz(int mat[][MAX], int nl, int nc);\nint conta_ocorrencias(char mat[][MAX], int nl, int nc,\n                      char c);\nint computa_maior(int mat1[][MAX], int mat2[][MAX],\n                  int nl, int nc);"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-com-matrizes",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-com-matrizes",
    "title": "Funções e Matrizes",
    "section": "Funções com Matrizes",
    "text": "Funções com Matrizes\nChamada de Funções\nNas chamadas às funções, matrizes são passadas como parâmetros utilizando apenas o seu nome (sem colchetes).\nExemplo:\nconst int MAX = 100;\nvoid imprime_mat(int mat[][MAX], int nl, int nc);\nint main(){\n    int m[MAX][MAX], i, j, nl = 2, nc = 4;\n    for(i = 0; i < nl; i++){\n        for(j = 0; j < nc; j++){\n        m[i][j] = nc*i+j+1;\n        }\n    }\n    imprime_mat(m, nl, nc);\n    return 0;\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-com-matrizes-1",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-com-matrizes-1",
    "title": "Funções e Matrizes",
    "section": "Funções com Matrizes",
    "text": "Funções com Matrizes\nPassagem de Parâmetros\n\nToda matriz passada para funções como parâmetro é passada por referência\nIsto significa que as alterações realizadas nas matrizes se tornam visíveis fora do corpo da função"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-com-matrizes-2",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#funções-com-matrizes-2",
    "title": "Funções e Matrizes",
    "section": "Funções com Matrizes",
    "text": "Funções com Matrizes\nLinhas de uma Matriz como Vetores\nFunções que aceitam um vetor como parâmetro aceitam que uma linha da matriz seja passada na sua chamada. Exemplo:\nvoid imprime_vet(int v[], int n);\n...\nvoid imprime_mat(int mat[][MAX], int nl, int nc){\n    int i = 0;\n    for(i = 0; i < nl; i++){\n        imprime_vet(mat[i], nc);\n    }\n}"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#exercícios-1",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#exercícios-1",
    "title": "Funções e Matrizes",
    "section": "Exercícios",
    "text": "Exercícios\nImplemente as definições das funções:\n\nQue imprime uma matriz de inteiros na tela\nQue recebe uma matriz de caracteres e retorna quantos dos elementos na matriz são iguais a um caractere passado como parâmetro\nQue recebe duas matrizes de inteiros de mesmo tamanho e retorna o maior valor dentre todos, seja ele da primeira ou da segunda matriz"
  },
  {
    "objectID": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#sumário",
    "href": "slides/12-funcoes_e_matrizes/12-funcoes_e_matrizes.html#sumário",
    "title": "Funções e Matrizes",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nSintaxe de implementação de funções com matrizes\nExercícios\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/revisao_unidade2/revisao_unidade2.html#lista-de-presença",
    "href": "slides/revisao_unidade2/revisao_unidade2.html#lista-de-presença",
    "title": "Revisão - Unidade II",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20251103"
  },
  {
    "objectID": "slides/revisao_unidade2/revisao_unidade2.html#revisão---lista-de-presença",
    "href": "slides/revisao_unidade2/revisao_unidade2.html#revisão---lista-de-presença",
    "title": "Revisão - Unidade II",
    "section": "Revisão - Lista de Presença",
    "text": "Revisão - Lista de Presença\n\n\n\nhttps://bit.ly/lip_20240725"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#nas-aulas-anteriores",
    "href": "slides/13-strings/13-strings.html#nas-aulas-anteriores",
    "title": "Strings",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nFunções\nVetores e matrizes\nFunções com vetores e matrizes"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#objetivo-da-aula",
    "href": "slides/13-strings/13-strings.html#objetivo-da-aula",
    "title": "Strings",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de strings:\n\nConceito\nEntrada e saída\nFunções de manipulação de strings"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings",
    "href": "slides/13-strings/13-strings.html#strings",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\n\n\n\n\n\n\nString:\n\n\nCadeia de caracteres envolvida por aspas duplas \\rightarrow \"\n\n\n\nExemplos:\n\n\"ect\"\n\"linguagem de programacao\""
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-1",
    "href": "slides/13-strings/13-strings.html#strings-1",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nAo longo do curso, já utilizamos:\n\nVariáveis para armazenar um único caractere:\nchar carac;\nStrings constantes:\ncout << \"Informe o nr. de linhas\";\n\nE quanto a variáveis para armazenar strings?"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-2",
    "href": "slides/13-strings/13-strings.html#strings-2",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nEm C++, strings são vetores de char com um último caractere especial\n\nNão iremos utilizar o tipo string, disponível em C++\nToda string em C++ termina com o caractere \\0:\n\nCaractere especial delimitador de final de string\nUsado pelos algoritmos/funções que processam strings\nNão é visível e tem código ASCII igual a 0"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-3",
    "href": "slides/13-strings/13-strings.html#strings-3",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nDeclaração de uma string em C++:\nchar s[50]; \nOu seja, idêntica a de um vetor de caracteres."
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-4",
    "href": "slides/13-strings/13-strings.html#strings-4",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nRepresentação em Memória\n\n\n\n\n\nDada a string acima:\n\nQual o caractere na terceira posição?\nQual o caractere s[5]?"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-5",
    "href": "slides/13-strings/13-strings.html#strings-5",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nRepresentação em Memória\n\n\n\n\n\nDada a string acima:\n\nComo poderíamos mudar a string para \"ola mundo\"?\nQual o tamanho da string?"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-6",
    "href": "slides/13-strings/13-strings.html#strings-6",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nInicialização\n\nForma 1:\n\nchar s[4] = {'e','c','t','\\0'};\n\nForma 2:\n\nchar s[] = {'e','c','t','\\0'};\n\nForma 3 ('\\0' é inserido automaticamente):\n\nchar s[] = \"ect\";"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-7",
    "href": "slides/13-strings/13-strings.html#strings-7",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nStrings vs. Vetor de Caracteres\nUma string é um vetor de caracteres, mas não o contrário\n\nString:\n\nchar s[] = {'e','c','t', '\\0'};\n\nVetor de caracteres (não delimitado com \\0):\n\nchar s[] = {'e','c','t'};\n\nAs regras que valem para vetores valem para strings\nEntretanto, strings oferecem algumas vantagens, como mostradas a seguir"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#lista-de-presença",
    "href": "slides/13-strings/13-strings.html#lista-de-presença",
    "title": "Strings",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250702"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-8",
    "href": "slides/13-strings/13-strings.html#strings-8",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nComando de Saída\nPara imprimir uma string, pode-se usar o comando cout, diretamente na variável do tipo string:\nint main(){\n    char str[4] = {'e','c','t','\\0'};\n    cout << str << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-9",
    "href": "slides/13-strings/13-strings.html#strings-9",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nComando de Saída\n\nOu seja, não é necessário utilizar um laço como no caso de vetores\nIsto só funciona para strings bem formadas (terminadas com \\0)\n\nCaso contrário, serão impressos vários caracteres a mais (lixo de memória)"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-10",
    "href": "slides/13-strings/13-strings.html#strings-10",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nComando de Entrada\n\nPara ler uma string do usuário, pode-se usar o comando cin, diretamente na variável do tipo string:\n\nint main(){\n    char str[10];\n    cin >> str;\n    cout << str << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-11",
    "href": "slides/13-strings/13-strings.html#strings-11",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nComando de Entrada\n\nOu seja, também não é necessário um laço\nCom cin, o caractere especial \\0 é inserido automaticamente\nCaso a string possua espaços em branco (' '), ela deve ser lida com um outro comando (próxima aula)"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-12",
    "href": "slides/13-strings/13-strings.html#strings-12",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nTamanho Máximo da Variável String\nSobre o tamanho da variável string na declaração:\n\nNo exemplo anterior, a variável str tem tamanho máximo 10\n\nLembre-se que nem todos os espaços reservados para a string serão necessariamente usados\n\nPortanto, o tamanho máximo do texto que cabe na string é 9\n\nIsto por causa do espaço destinado ao caractere especial \\0"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-13",
    "href": "slides/13-strings/13-strings.html#strings-13",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nBiblioteca cstring \\rightarrow possui algumas funções úteis:\n\nstrlen: computa o tamanho da string\nstrcpy: computa uma cópia da string\nstrcat: concatena duas strings\nstrcmp: compara duas strings\n\nEstas funções podem ser usadas na resolução de exercícios"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-14",
    "href": "slides/13-strings/13-strings.html#strings-14",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nint strlen(char s[]): retorna o tamanho da string s\nvoid strcpy(char dest[], char orig[]): copia o conteúdo de orig para dest"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-15",
    "href": "slides/13-strings/13-strings.html#strings-15",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nvoid strcat(char s1[], char s2[]): concatena o conteúdo de s2 na string s1"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-16",
    "href": "slides/13-strings/13-strings.html#strings-16",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\n\nint strcmp(char s1[], char s2[]): compara a string s1 com s2 \n\nRetorna 0 se elas forem iguais\nRetorna um número negativo se s1 for “menor” do que s2\nRetorna um número positivo se s1 for “maior” do que s2"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-17",
    "href": "slides/13-strings/13-strings.html#strings-17",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nFunções da Biblioteca cstring\nNa função strcmp, “menor”/“maior” não depende dos tamanhos das strings:\n\nA string \"bala\" é “menor” do que \"bola\"\nIsto porque 'a' tem valor ASCII menor do que 'o' (primeiro caractere que difere entre as strings)"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercícios",
    "href": "slides/13-strings/13-strings.html#exercícios",
    "title": "Strings",
    "section": "Exercícios",
    "text": "Exercícios\nImplementar cada uma das funções da biblioteca cstring:\n\nint strlen(char s[])\nvoid strcpy(char dest[], char orig[])\nvoid strcat(char s1[], char s2[])\nint strcmp(char s1[], char s2[])"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercício",
    "href": "slides/13-strings/13-strings.html#exercício",
    "title": "Strings",
    "section": "Exercício",
    "text": "Exercício\nImplementar programa utilizando funções da biblioteca cstring para:\n\nLer uma string do usuário\nCopiar a string lida para uma segunda string\nChecar se a cópia da string é igual à palavra \"ect\", imprimindo uma mensagem conforme o caso"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercício-1",
    "href": "slides/13-strings/13-strings.html#exercício-1",
    "title": "Strings",
    "section": "Exercício",
    "text": "Exercício\nSolução\n#include <cstring>\n\nint main(){\n    char str[10], copia[10], palavra[10] = \"ect\";\n    cin >> str;\n    strcpy(copia, str);\n    if(strcmp(copia, palavra) == 0){\n        cout << \"Iguais\\n\";\n    }\n    else{\n        cout << \"Diferentes\\n\";\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#sumário",
    "href": "slides/13-strings/13-strings.html#sumário",
    "title": "Strings",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nStrings\n\nCaractere delimitador \\0\nInicialização\nEntrada/saída\n\nFunções de manipulação de strings\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-18",
    "href": "slides/13-strings/13-strings.html#strings-18",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nO comando cin não é capaz de ler strings com espaços:\n\nNa entrada, espaços em branco ou quebras de linha (tecla enter) informam o final da string digitada pelo usuário\nÉ necessário algum comando que permita a leitura de strings com espaços em branco"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-19",
    "href": "slides/13-strings/13-strings.html#strings-19",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\n\nPara ler strings com espaços em branco, a função cin.getline deve ser utilizada\nA entrada do teclado é lida até que uma quebra de linha (tecla enter) seja digitada"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-20",
    "href": "slides/13-strings/13-strings.html#strings-20",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\ncin.getline - recebe dois parâmetros:\n\nvariável do tipo string onde o texto deve ser armazenado\nnúmero máximo de caracteres a serem lidos contando com o \\0"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#strings-21",
    "href": "slides/13-strings/13-strings.html#strings-21",
    "title": "Strings",
    "section": "Strings",
    "text": "Strings\nLeitura de Strings com Espaços em Branco\nExemplo:\nint main(){\n    char s[51];\n    cin.getline(s, 51); //le 50 caracteres\n    cout << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercícios-1",
    "href": "slides/13-strings/13-strings.html#exercícios-1",
    "title": "Strings",
    "section": "Exercícios",
    "text": "Exercícios\nImplemente uma função que remova os espaços em branco de uma string:\n\nEntrada:\nEstudos␣de␣LIP\nSaída:\nEstudosdeLIP\n\nArmazene o resultado em um parâmetro de saída.\nImplemente também a função main para testar a função solicitada."
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercícios-2",
    "href": "slides/13-strings/13-strings.html#exercícios-2",
    "title": "Strings",
    "section": "Exercícios",
    "text": "Exercícios\nUm palíndromo é uma palavra/frase que pode ser lida tanto da esquerda para a direita quanto da direita para a esquerda.\nExemplos:\n\nosso\nradar\name o poema\nsubi no onibus"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercícios-3",
    "href": "slides/13-strings/13-strings.html#exercícios-3",
    "title": "Strings",
    "section": "Exercícios",
    "text": "Exercícios\nExistem duas versões para o problema:\n\nConsiderando espaços em branco como parte da string:\n\n\nosso é palíndromo\no␣s␣s␣o é palíndromo\nsubi␣no␣onibus não é palíndromo"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercícios-4",
    "href": "slides/13-strings/13-strings.html#exercícios-4",
    "title": "Strings",
    "section": "Exercícios",
    "text": "Exercícios\nExistem duas versões para o problema:\n\nDesconsiderando espaços em branco como parte da string:\n\n\nsubi␣no␣onibus é palíndromo\nsubi␣␣␣␣␣no␣␣onibus é palíndromo"
  },
  {
    "objectID": "slides/13-strings/13-strings.html#exercícios-5",
    "href": "slides/13-strings/13-strings.html#exercícios-5",
    "title": "Strings",
    "section": "Exercícios",
    "text": "Exercícios\nImplemente uma função que receba como parâmetro uma string e retorne verdadeiro caso ela seja um palíndromo ou falso caso contrário."
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#na-aula-anterior",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#na-aula-anterior",
    "title": "Tipos Estruturados",
    "section": "Na Aula Anterior",
    "text": "Na Aula Anterior\n\nStrings"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#objetivo-da-aula",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#objetivo-da-aula",
    "title": "Tipos Estruturados",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\nIntroduzir o uso de tipos estruturados:\n\nConceito\nSintaxe de definição e uso em programas"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação",
    "title": "Tipos Estruturados",
    "section": "Motivação",
    "text": "Motivação\nExercício\nConsiderando o problema de:\n\nLer do usuário o nome e a nota de 5 alunos\nImprimir o nome dos alunos com nota inferior à média de todas as notas\n\nSeria possível utilizar uma variável para representar um Aluno?"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação-1",
    "title": "Tipos Estruturados",
    "section": "Motivação",
    "text": "Motivação\nExercício - Solução I\nconst int STRMAX = 21;\n\nint main(){\n  int n = 5, i;\n  char nomes[n][STRMAX]; //vetor de vetores\n  float notas[n], media = 0.0;\n  for(i = 0; i < n; i++){\n    cout << \"Insira o nome do aluno: \";\n    cin.getline(nomes[i], STRMAX);\n    cout << \"Insira a nota do aluno: \";\n    cin >> notas[i];\n    cin.ignore();\n    media += notas[i];\n  }\n  media /= n;\n  for(i = 0; i < n; i++){\n    if(notas[i] < media){\n      cout << nomes[i]\n           << \" esta abaixo da media\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação-2",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação-2",
    "title": "Tipos Estruturados",
    "section": "Motivação",
    "text": "Motivação\nRepresentação em Memória - Solução com Par de Vetores\n\n\n\n\n\n\n\n\n\nNa solução utilizada:\n\nDois vetores, um para os nomes e outro para as notas\nNome/nota de um aluno em uma mesma posição\nProgramas sujeitos a falhas"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação-3",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#motivação-3",
    "title": "Tipos Estruturados",
    "section": "Motivação",
    "text": "Motivação\nE se fossem solicitados dados adicionais para um aluno?\n\nNome\nNota\nMatrícula\nCPF\n\nExiste alguma alternativa a utilizar vários vetores, sendo um para cada dado?"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados",
    "title": "Tipos Estruturados",
    "section": "Tipos Estruturados",
    "text": "Tipos Estruturados\n\nMecanismo disponibilizado pela linguagem C++\nTambém conhecido como registros ou estruturas\nPermite ao programador definir um novo tipo de variável"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado",
    "title": "Tipos Estruturados",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\n\nTipos estruturados são usados para permitir que um programa possua variáveis que representam “coisas” do mundo real"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-1",
    "title": "Tipos Estruturados",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nEntão, pense no que você quer representar e que características dela devem estar no programa:\n\nAluno, com nome e nota\nConta bancária, com número, saldo e nome do titular\nCidade, com nome e população\netc."
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-2",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-2",
    "title": "Tipos Estruturados",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nA definição de tipos estruturados deve vir antes das funções e possui a seguinte sintaxe:\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\nNote o ; (ponto e vírgula) após a última chave"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-3",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-3",
    "title": "Tipos Estruturados",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\n\nnome_tipo é o nome do tipo estruturado. É uma boa prática definir um tipo com a primeira letra maiúscula"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-4",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-4",
    "title": "Tipos Estruturados",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\n\ntipo_campo é o tipo (char, int, float…) do campo do tipo estruturado"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-5",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-5",
    "title": "Tipos Estruturados",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nSintaxe\nstruct nome_tipo{\n  tipo_campo_1 nome_campo_1;\n  ...\n  tipo_campo_N nome_campo_N;  \n};\n\nnome_campo é o nome do campo do tipo estruturado e obedece às mesmas regras de nomear variáveis"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercícios",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercícios",
    "title": "Tipos Estruturados",
    "section": "Exercícios",
    "text": "Exercícios\nDefinir cada um dos tipos estruturados a seguir:\n\nTipo estruturado para um ponto no plano 2D\nTipo estruturado para data, com dia, mês e ano\nTipo estruturado para funcionário, com nome, matrícula, salário, data de nascimento e data de admissão"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução",
    "title": "Tipos Estruturados",
    "section": "Solução",
    "text": "Solução\n1 - Ponto no Plano 2D\nstruct Ponto2D{\n  float x;\n  float y;\n};"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-1",
    "title": "Tipos Estruturados",
    "section": "Solução",
    "text": "Solução\n2 - Data\nstruct Data{\n  int dia;\n  int mes;\n  int ano;\n};"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-2",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-2",
    "title": "Tipos Estruturados",
    "section": "Solução",
    "text": "Solução\n3 - Funcionário\nAssumindo que o tipo Data também tenha sido definido:\nstruct Funcionario{\n  char nome[STRMAX];\n  int matricula;\n  float salario;\n  Data data_nascimento;\n  Data data_admissao;\n};\nOu seja, é possível utilizar tipos estruturados como campos de outro tipo estruturado"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-6",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#definindo-um-tipo-estruturado-6",
    "title": "Tipos Estruturados",
    "section": "Definindo um Tipo Estruturado",
    "text": "Definindo um Tipo Estruturado\nExemplo - Aluno\nPara o exemplo que motivou a aula, um tipo estruturado chamado Aluno deve ser definido, contendo os campos nome e nota:\nstruct Aluno{\n  char nome[STRMAX];\n  float nota;\n};"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#lista-de-presença",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#lista-de-presença",
    "title": "Tipos Estruturados",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250709"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAtenção: um tipo estruturado não é uma função"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-1",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nDeclaração de Variáveis\nApós um tipo estruturado ter sido definido, é possível declarar variáveis do tipo estruturado:\nAluno a1, a2; //declara duas variáveis do tipo Aluno\nToda variável do tipo Aluno possui campos nome e nota que devem ser acessados nos programas"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-2",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-2",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAcesso aos Campos de Variáveis\nApós serem declaradas, variáveis de um tipo estruturado podem ter seus campos acessados por meio do operador . (ponto):\nAluno a;\n...\n\ncin.getline(a.nome, SMAX); //acessa o nome\ncin >> a.nota; //acessa a nota"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-3",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-3",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nDeclaração de Variáveis\nOs campos do tipo Aluno funcionam como variáveis do tipo declarado no campo:\n\nnome funciona como string\nnota funciona como float"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-4",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-4",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAcesso aos Campos de Variáveis\nNo exemplo abaixo, os campos são acessados para serem impressos na tela:\nAluno a;\n...\n\ncout << \"Nome: \" << a.nome << endl; //imprime nome de um aluno\ncout << \"Nota: \" << a.nota << endl; //imprime nota de um aluno"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-5",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-5",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nDeclaração de Variáveis\nAs variáveis do tipo estruturado possuem seus campos inicializados com lixo. Para evitar isto:\nAluno a; //declara variável do tipo Aluno\nstrcpy(a.nome, \"\"); //atribui string vazia ao nome\na.nota = 0.0; //atribui zero à nota"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-6",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-6",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAtribuição de Variáveis do Tipo Estruturado\nÉ possível fazer uma variável de um tipo estruturado receber uma outra do mesmo tipo:\nAluno a1, a2;\na1 = a2; //atribuição funciona como esperado (atribui o valor de cada campo)\n\n//Equivalente a :\na1.nota = a2.nota;\nstrcpy(a1.nome, a2.nome);\nObserve como seria trabalhoso copiar uma variável para outra desta última forma se ela contivesse muitos campos"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-7",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-7",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nVetores de Tipo Estruturado\nTambém é possível declarar vetores do tipo estruturado definido:\nAluno vet_alunos[10]; //vetor com capacidade\n                      //para armazenar 10 variáveis do tipo Aluno"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-8",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-8",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAcesso aos Campos de Vetores de Tipo Estruturado\n\nPara acessar um campo de uma variável presente em um vetor de um tipo estruturado:\n\nUtilize um número inteiro para acessar uma posição do vetor\nUtilize o operador . para acessar o campo da variável que está nesta posição\n\n\nAluno vet_alunos[10];\n...\ncout << \"Nome: \" <<  vet_alunos[i].nome << endl; //imprime nome do Aluno na posição i\ncout << \"Nota: \" <<  vet_alunos[i].nota << endl; //imprime nota do Aluno na posição i"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-9",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#utilizando-variáveis-do-tipo-estruturado-9",
    "title": "Tipos Estruturados",
    "section": "Utilizando Variáveis do Tipo Estruturado",
    "text": "Utilizando Variáveis do Tipo Estruturado\nAcesso aos Campos de Vetores de Tipo Estruturado\n\nPara acessar um campo de uma variável presente em um vetor de um tipo estruturado:\n\nUtilize um número inteiro para acessar uma posição do vetor\nUtilize o operador . para acessar o campo da variável que está nesta posição\n\n\nAluno vet_alunos[10];\n...\ncout << \"Nome: \" <<  vet_alunos[i].nome << endl; //imprime nome do Aluno na posição i\ncout << \"Nota: \" <<  vet_alunos[i].nota << endl; //imprime nota do Aluno na posição i"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-1",
    "title": "Tipos Estruturados",
    "section": "Exercício",
    "text": "Exercício\nConsiderando o problema apresentado no início da aula:\n\nLer do usuário o nome e a nota de 5 alunos\nImprimir o nome dos alunos com nota inferior à média de todas as notas\n\nComo ficaria o mesmo com o uso de tipos estruturados?"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-3",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-3",
    "title": "Tipos Estruturados",
    "section": "Solução",
    "text": "Solução\nUso de Tipos Estruturados\nconst int STRMAX = 21;\n\nstruct Aluno{\n  char nome[STRMAX];\n  float nota;\n};\n\nint main(){\n  int n = 5, i;\n  Aluno alunos[n];\n  float media = 0.0;\n\n  for(i = 0; i < n; i++){\n    cout << \"Insira o nome do aluno: \";\n    cin.getline(alunos[i].nome, STRMAX);\n    cout << \"Insira a nota do aluno: \";\n    cin >> alunos[i].nota;\n    cin.ignore();\n    media += alunos[i].nota;\n  }\n  media /= n;\n\n  for(i = 0; i < n; i++){\n    if(alunos[i].nota < media){\n      cout << alunos[i].nome\n           << \" esta abaixo da media\\n\";\n    }\n  }\n  return 0;\n}"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-4",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#solução-4",
    "title": "Tipos Estruturados",
    "section": "Solução",
    "text": "Solução\nRepresentação em Memória - Solução com Uso de Tipos Estruturados\n\n\n\n\n\n\n\n\n\nCom tipos estruturados:\n\nÚnico índice utilizado para todos os dados de um aluno\nTodos os campos de um aluno em uma mesma variável\nProgramas menos sujeitos a falhas"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados-e-funções",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados-e-funções",
    "title": "Tipos Estruturados",
    "section": "Tipos Estruturados e Funções",
    "text": "Tipos Estruturados e Funções\nAssinatura de Funções\nTipos estruturados em funções - mesmas regras de uma variável qualquer:\n\nEx.: função que retorna o aluno com maior nota em um vetor de alunos:\n\nAluno calcula_maior_nota(Aluno v[], int n);"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados-e-funções-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados-e-funções-1",
    "title": "Tipos Estruturados",
    "section": "Tipos Estruturados e Funções",
    "text": "Tipos Estruturados e Funções\nChamadas de Funções\nAssumindo variáveis declaradas como\nAluno a_menor, a_maior, alunos[MAX];\nPassagem de parâmetros nas chamadas de funções também não se alteram:\n//var. recebe o retorno\na_maior = calcula_maior_nota(alunos, n);\n\n//chamada armazena o resultado em parametros de saida\ncalcula_menor_maior_nota(alunos, n, a_menor, a_maior);"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipo-estruturado-para-uma-matriz",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipo-estruturado-para-uma-matriz",
    "title": "Tipos Estruturados",
    "section": "Tipo Estruturado para uma Matriz",
    "text": "Tipo Estruturado para uma Matriz\n\nGrande vantagem de tipos estruturados: tipo estruturado Matriz reduz a quantidade de parâmetros das funções\nPara isto, o tipo Matriz deve ter como campos:\n\nO número de linhas da matriz\nO número de colunas da matriz\nUma matriz de números inteiros, caracteres ou números reais, conforme pede o problema, alocada com espaço suficiente"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipo-estruturado-para-uma-matriz-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipo-estruturado-para-uma-matriz-1",
    "title": "Tipos Estruturados",
    "section": "Tipo Estruturado para uma Matriz",
    "text": "Tipo Estruturado para uma Matriz\nAssim, uma função que lê uma matriz de números inteiros, que tem como assinatura:\nvoid le_mat(int mat[][MAX], int nl, int nc);\nPassa a ter uma assinatura mais compacta dada por:\nvoid le_mat(Matriz& mat);\n(Note o parâmetro passado por referência)."
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-1-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-1-1",
    "title": "Tipos Estruturados",
    "section": "Exercício 1",
    "text": "Exercício 1\nDefina um tipo estruturado Data, com os campos dia, mes e ano. Em seguida, implemente um programa que leia do usuário o dia, mês e ano de duas datas e armazene estes valores em variáveis do tipo Data.\nO programa deve imprimir qual das duas datas é cronologicamente maior. Por exemplo 12/12/2007 é maior do que 09/03/2000."
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-1-2",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-1-2",
    "title": "Tipos Estruturados",
    "section": "Exercício 1",
    "text": "Exercício 1\nSolução\nstruct Data{\n  int dia;\n  int mes;\n  int ano;\n};\n\nint main(){\n  Data d1, d2, maior;\n\n  cout << \"Insira a 1a. data:\\n\";\n  cin >> d1.dia >> d1.mes >> d1.ano;\n  cout << \"Insira a 2a. data:\\n\";\n  cin >> d2.dia >> d2.mes >> d2.ano;\n\n  if(d1.ano > d2.ano){\n    maior = d1;\n  }\n  else if(d2.ano > d1.ano){\n    maior = d2;\n  }\n  else{\n    if(d1.mes > d2.mes){\n      maior = d1;\n    }\n    else if(d2.mes > d1.mes){\n      maior = d2;\n    }\n    else{\n      if(d1.dia > d2.dia){\n        maior = d1;\n      }\n      else{\n        maior = d2;\n      }\n    }\n  }\n  cout << \"Maior data: \" << maior.dia << \"/\"\n                         << maior.mes << \"/\"\n                         << maior.ano << endl;\n\n  return 0;\n}"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-2",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-2",
    "title": "Tipos Estruturados",
    "section": "Exercício 2",
    "text": "Exercício 2\nDefina um tipo estruturado para representar um Ponto2D, isto é, um ponto com coordenadas x e y. Em seguida, implemente um programa que leia do usuário uma quantidade n e as coordenadas (x,y) de n Pontos2D.\nO programa deve imprimir o Ponto2D mais próximo da origem, sabendo-se que a distância de um ponto para a origem é calculada por d(p) = \\sqrt{p.x^2 + p.y^2}."
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-2-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-2-1",
    "title": "Tipos Estruturados",
    "section": "Exercício 2",
    "text": "Exercício 2\nSolução\n#include <cmath> //para sqrt e pow\n\nusing namespace std;\n\nstruct Ponto2D{\n  float x;\n  float y;\n};\n\nint main(){\n  int n, i;\n  float dist, menor_dist;\n\n  cout << \"Insira a quantidade de pontos:\\n\";\n  cin >> n;\n  Ponto2D pts[n], mais_prox;\n\n  cout << \"Insira as coordenadas dos pontos:\\n\";\n  for(i = 0; i < n; i++){\n    cin >> pts[i].x >> pts[i].y;\n  }\n\n  mais_prox = pts[0];\n  float dist;\n  float menor_dist = sqrt(pow(pts[0].x,2) +\n                          pow(pts[0].y,2));\n  for(i = 1; i < n; i++){\n    dist = sqrt(pow(pts[i].x,2) + pow(pts[i].y,2));\n    if(dist < menor_dist){\n      dist = menor_dist;\n      mais_prox = pts[i];\n    }\n  }\n  \n  cout << \"Ponto mais proximo: \"\n       << mais_prox.x << \", \"\n       << mais_prox.y << endl;\n\n  return 0;\n}"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-3",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-3",
    "title": "Tipos Estruturados",
    "section": "Exercício 3",
    "text": "Exercício 3\nDefina um tipo estruturado Matriz, que deve armazenar uma matriz de números inteiros, o seu número de linhas e o seu número de colunas.\nEm seguida, implemente uma função que receba como parâmetro duas matrizes e retorne a soma matricial.\nImplemente também a função main, de modo que o usuário possa inserir os dados das matrizes e testar o programa."
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-3-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#exercício-3-1",
    "title": "Tipos Estruturados",
    "section": "Exercício 3",
    "text": "Exercício 3\nSolução\nconst int MAX = 21;\n\nstruct Matriz{\n  int nl;\n  int nc;\n  int numeros[MAX][MAX];\n};\n\nvoid le_mat(Matriz& m){\n  int i, j;\n\n  cin >> m.nl;\n  cin >> m.nc;\n  for(i = 0; i < m.nl; i++){\n    for(j = 0; j < m.nc; j++){\n      cin >> m.numeros[i][j];\n    }\n  }\n}\n\nvoid imprime_mat(Matriz m){\n  int i, j;\n\n  for(i = 0; i < m.nl; i++){\n    for(j = 0; j < m.nc; j++){\n      cout << m.numeros[i][j] << \" \";\n    }\n    cout << endl;\n  }\n}\n\nMatriz soma_matrizes(Matriz m1, Matriz m2){\n  int i, j;\n  Matriz r;\n\n  r.nl = m1.nl;\n  r.nc = m1.nc;\n  for(i = 0; i < m1.nl; i++){\n    for(j = 0; j < m1.nc; j++){\n      r.numeros[i][j] = m1.numeros[i][j] + m2.numeros[i][j];\n    }\n  }\n\n  return r;\n}\n\nint main(){\n  Matriz mat1, mat2, mat_soma;\n\n  cout << \"Insira a matriz 1:\\n\";\n  le_mat(mat1);\n  cout << \"Insira a matriz 2:\\n\";\n  le_mat(mat2);\n\n  mat_soma = soma_matrizes(mat1, mat2);\n\n  imprime_mat(mat_soma);\n\n  return 0;\n}"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#sumário",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#sumário",
    "title": "Tipos Estruturados",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nDefinição de tipos estruturados\nOperações com variáveis de tipos estruturados\nFunções e tipos estruturados\nExercícios\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#observação",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#observação",
    "title": "Tipos Estruturados",
    "section": "Observação",
    "text": "Observação\nComando cin.ignore()\nO comando cin.ignore() deve ser utilizado após o comando cin >> ... se o cin.getline for usado em seguida:\ncin >> ...\ncin.ignore(); // é necessário para leitura correta dos dados!\ncin.getline(...);"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#nas-aulas-anteriores",
    "href": "slides/15-ordenacao/15-ordenacao.html#nas-aulas-anteriores",
    "title": "Ordenação",
    "section": "Nas Aulas Anteriores",
    "text": "Nas Aulas Anteriores\n\nTipos estruturados"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#objetivo-da-aula",
    "href": "slides/15-ordenacao/15-ordenacao.html#objetivo-da-aula",
    "title": "Ordenação",
    "section": "Objetivo da Aula",
    "text": "Objetivo da Aula\n\nApresentar uma solução para ordenação de vetores"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\n\nO problema de ordenação possui diversas soluções\nOrdenação pode fazer parte de soluções de programas maiores"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-1",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-1",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nIdeia do Algoritmo\nOrdenar vetor de números inteiros acima em ordem crescente:\n\n\n\n\n\n\nPercorra cada elemento do vetor"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-2",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-2",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nIdeia do Algoritmo\nOrdenar vetor de números inteiros acima em ordem crescente:\n\n\n\n\n\n\nChame o elemento na posição atual de chave, e compare-o com todos"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-3",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-3",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nIdeia do Algoritmo\nOrdenar vetor de números inteiros acima em ordem crescente:\n\n\n\n\n\n\nRealize uma troca entre o elemento comparado e o elemento chave caso este último seja maior"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-4",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-4",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 1/11\n\n\n\n\n\n\nElemento chave: v[0] = 5\nElemento comparado: v[1] = 3\nv[0] > v[1] \\rightarrow verdadeiro, trocar v[0] com v[1]\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-5",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-5",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 2/11\n\n\n\n\n\n\nElemento chave: v[0] = 3\nElemento comparado: v[2] = -1\nv[0] > v[2] \\rightarrow verdadeiro, trocar v[0] com v[2]\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-6",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-6",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 3/11\n\n\n\n\n\n\nElemento chave: v[0] = -1\nElemento comparado: v[3] = 8\nv[0] > v[3] \\rightarrow falso,\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-7",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-7",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 4/11\n\n\n\n\n\n\nElemento chave: v[0] = -1\nElemento comparado: v[4] = 4\nv[0] > v[4] \\rightarrow falso,\nFim das comparações com o elemento chave atual: ir para o próximo elemento chave e recomeçar comparações com todos depois dele"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-8",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-8",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 5/11\n\n\n\n\n\n\nElemento chave: v[1] = 5\nElemento comparado: v[2] = 3\nv[1] > v[2] \\rightarrow verdadeiro, trocar v[1] com v[2]\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-9",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-9",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 6/11\n\n\n\n\n\n\nElemento chave: v[1] = 3\nElemento comparado: v[3] = 8\nv[1] > v[3] \\rightarrow falso,\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-10",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-10",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 7/11\n\n\n\n\n\n\nElemento chave: v[1] = 3\nElemento comparado: v[4] = 4\nv[1] > v[4] \\rightarrow falso,\nFim das comparações com o elemento chave atual: ir para o próximo elemento chave e recomeçar comparações com todos depois dele"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-11",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-11",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 8/11\n\n\n\n\n\n\nElemento chave: v[2] = 5\nElemento comparado: v[3] = 8\nv[2] > v[3] \\rightarrow falso,\nIr para o próximo elemento a ser comparado"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-12",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-12",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 9/11\n\n\n\n\n\n\nElemento chave: v[2] = 5\nElemento comparado: v[4] = 4\nv[2] > v[4] \\rightarrow verdadeiro, trocar v[2] com v[4]\nFim das comparações com o elemento chave atual: ir para o próximo elemento chave e recomeçar comparações com todos depois dele"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-13",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-13",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 10/11\n\n\n\n\n\n\nElemento chave: v[3] = 8\nElemento comparado: v[4] = 5\nv[3] > v[4] \\rightarrow verdadeiro, trocar v[3] com v[4]\nFim das comparações com o elemento chave atual. O último elemento chave não possui nenhum elemento após ele."
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-14",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-14",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nExemplo - Vetor de Inteiros 11/11\n\n\n\n\n\n\nTodas as comparações realizadas\nO vetor está ordenado"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-15",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-15",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nNa solução apresentada, o vetor é um parâmetro de entrada e saída"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-16",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-16",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nO elemento chave é v[i]\nO elemento comparado é v[j]\nÉ necessário um laço que percorra os índices 0,1,...,n-2, para cada chave: for(i = 0; i < n-1; i++)"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-17",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-17",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nÉ necessário um laço que passe por cada elemento a ser comparado que está depois da chave atual: for(j = i+1; j < n; j++)"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-18",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-18",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nElementos na parte ordenada do vetor não devem ser comparados: isto deixará o algoritmo incorreto"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-19",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-19",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nGeneralizando o Raciocínio\n\nObserve que:\n\nFora isso, basta incluir as operações de comparação e troca entre elementos"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-20",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-20",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nCódigo da Função - Ordem Crescente\nvoid ordena_crescente(int v[], int n){\n    int i, j, aux;\n    for(i = 0; i < n-1; i++){\n        for(j = i+1; j < n; j++){\n            if(v[i] > v[j]){\n                aux = v[i];\n                v[i] = v[j];\n                v[j] = aux;\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-21",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-21",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nFunção main\nint main(){\n    int n, i;\n    cin >> n;\n    int v[n];\n    for(i = 0; i < n; i++){\n        cin >> v[i];\n    }\n    ordena_crescente(v, n);\n    for(i = 0; i < n; i++){\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#lista-de-presença",
    "href": "slides/15-ordenacao/15-ordenacao.html#lista-de-presença",
    "title": "Ordenação",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250716"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#exercício",
    "href": "slides/15-ordenacao/15-ordenacao.html#exercício",
    "title": "Ordenação",
    "section": "Exercício",
    "text": "Exercício\nUtilizando um tipo estruturado Aluno, que deve possuir nome, matrícula e nota, implemente uma função que ordene um vetor com n alunos por ordem crescente de nota.\nImplemente também a função main, de modo que o usuário possa inserir a quantidade de alunos n, o nome, matrícula e a nota para cada um dos n alunos e então visualizar na tela os dados de todos os alunos ordenados por nota."
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-22",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-22",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nSolução - Ordem Crescente de Notas\nvoid ordena_crescente(Aluno v[], int n){\n    int i, j;\n    Aluno aux;\n    for(i = 0; i < n-1; i++){\n        for(j = i+1; j < n; j++){\n            if(v[i].nota > v[j].nota){\n                aux = v[i];\n                v[i] = v[j];\n                v[j] = aux;\n            }\n        }\n    }\n}"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-23",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-23",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nSolução - Função main\nint main(){\n    int n, i;\n    cin >> n;\n    Aluno alunos[n];\n    for(i = 0; i < n; i++){\n        cin.ignore();\n        cin.getline(alunos[i].nome, MAXNOME);\n        cin >> alunos[i].matricula;\n        cin >> alunos[i].nota;\n    }\n    ordena_crescente(alunos, n);\n    for(i = 0; i < n; i++){\n        cout << alunos[i].nome << \" \"\n             << alunos[i].matricula << \" \"\n             << alunos[i].nota << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#outros-exercícios",
    "href": "slides/15-ordenacao/15-ordenacao.html#outros-exercícios",
    "title": "Ordenação",
    "section": "Outros Exercícios",
    "text": "Outros Exercícios\n\nE quanto à ordenação por matrícula?\nE quanto à ordenação por ordem decrescente?\nE quanto à ordenação por ordem alfabética?"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-24",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-24",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nOrdem Alfabética\nFunção strcmp - duas strings como parâmetros:\n\nRetorna um número negativo se a string do primeiro parâmetros for “menor”\nRetorna um número positivo se a string do primeiro parâmetros for “maior”\nRetorna 0 se as strings são iguais"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#ordenação-25",
    "href": "slides/15-ordenacao/15-ordenacao.html#ordenação-25",
    "title": "Ordenação",
    "section": "Ordenação",
    "text": "Ordenação\nOrdem Alfabética\nEntão, para ordenar alfabeticamente:\n\nstrcmp(alunos[i].nome, alunos[j].nome) retorna um número positivo se o nome do aluno i for alfabeticamente maior do que o nome do aluno j"
  },
  {
    "objectID": "slides/15-ordenacao/15-ordenacao.html#sumário",
    "href": "slides/15-ordenacao/15-ordenacao.html#sumário",
    "title": "Ordenação",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nOrdenação\nOrdenação com tipos estruturados\n\nOrdem crescente/decrescente de campos numéricos\nOrdem alfabética de campos string\n\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/revisao_unidade1/revisao_unidade1.html#lista-de-presença",
    "href": "slides/revisao_unidade1/revisao_unidade1.html#lista-de-presença",
    "title": "Revisão - Unidade I",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\n\n\n\n\nhttps://bit.ly/lip_20241105\n\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados-1",
    "href": "slides/14-tipos_estruturados/14-tipos_estruturados.html#tipos-estruturados-1",
    "title": "Tipos Estruturados",
    "section": "Tipos Estruturados",
    "text": "Tipos Estruturados\n\nAgrupa dados de diferentes tipos\nDados possuem campos, também chamados de membros, atributos ou propriedades"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#linguagem-de-programação",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#linguagem-de-programação",
    "title": "Comandos de Repetição",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComandos de seleção\n\nAula de hoje:\n\nComandos de repetição:\n\nfor\nwhile"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição-1",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição-1",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado for: repete instruções por um determinado número de vezes\nComando de repetição condicional while: repete instruções enquanto uma condição é verdadeira"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nSintaxe:\nfor(inicializacao; condicao; incremento){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-1",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-1",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\n\nItera sobre uma variável, chamada de contador, variável de iteração ou variável de controle\nEsta variável tem o seu valor alterado conforme o programador deseja\nIsto faz o laço executar várias iterações"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-2",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-2",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nDividido em três expressões opcionais:\n\nInicialização: executada somente na primeira vez em que o for é executado\nCondição: avaliada no início de cada iteração\nIncremento: executado no final de cada iteração"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-3",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-3",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nOrdem de execução:\n\nA expressão de inicialização é executada\nA expressão de condição é avaliada:\n\nCaso seja verdadeira: o bloco de comandos é executado\nCaso seja falsa: o laço é encerrado\n\nA expressão de incremento é executada e volta para o passo 2"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-4",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-4",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExemplo\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"i: \" << i << endl;\n    }\n    return 0;\n}\nO que imprime este programa?"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-5",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-5",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\n\nDiferentes for podem ser usados se estivermos preocupados com a quantidade de execuções de um bloco de comandos\nO que não é o caso se desejarmos que a variável de iteração assuma uma sequência de valores específicos"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-6",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-6",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 1\nImplemente um programa que lê um número n e em seguida, lê as notas de n alunos. O programa deve exibir a média das notas na tela.\nAntes de programar: o que deve ser repetido?"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-7",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-7",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 1: Solução\nint main(){\n    int i, n;\n    float nota, media = 0;\n    cout << \"Insira a quantidade de notas\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"Insira a nota do \"\n             << i+1 << \"o. aluno\" << endl;\n        cin >> nota;\n        media += nota;\n    }\n    media /= n;\n    cout << \"media dos alunos: \" << media << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-8",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-8",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExemplos Atípicos\n\nQuantas vezes é executado o laço a seguir? n vezes?\n\nfor(i = 0; i <= n; i++){\n    ...\n}\n\nQuantas vezes é executado o laço a seguir?\n\nfor(i = n; i > 0; i++){\n    ...\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#lista-de-presença",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#lista-de-presença",
    "title": "Comandos de Repetição",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20241008"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-9",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-9",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 2\nImplemente um programa que lê um número n e em seguida, imprime os n primeiros números pares na tela. Considere o número 0 como o primeiro par."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-10",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-10",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 2: Solução\nint main(){\n    int i, n;\n    cout << \"Digite n\\n\";\n    cin >> n;\n    for(i = 0; i < 2*n; i += 2){\n        cout << i << endl;\n    }\n    return 0;\n}\nObviamente, há outras formas de se implementar este programa"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-11",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-11",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 3\nImplemente um programa que imprime na tela em forma de tabela as seguintes contagens:\n\nDe 1 a 100\nDe 10 a 1000 (incrementando o contador de 10 em 10)\nDe 100 a 1 (em ordem decrescente)"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-12",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-12",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nSaída esperada para o exercício 3:\n\n\n\n1\n10\n100\n\n\n\n\n2\n20\n99\n\n\n3\n30\n98\n\n\n…\n…\n…\n\n\n100\n1000\n1"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-13",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-13",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 3: Solução\nint main(){\n    int i;\n    for(i = 1; i <= 100; i++){\n        cout << i << \" \"\n             << 10*i << \" \"\n             << 101-i << endl;\n    }\n    return 0;\n}\nÉ possível implementar o programa com o uso de variáveis adicionais"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-14",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-14",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 4\nImplemente um programa que lê um número n e em seguida, lê n caracteres. O programa deve exibir a quantidade de caracteres digitados que são letras minúsculas."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-15",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-15",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 4: Solução\nint main(){\n    char car;\n    int n, cont = 0;\n    cout << \"Informe a quantidade de caracteres:\\n\";\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        cout << \"Informe um caractere\\n\";\n        cin >> car;\n        if(car >= 'a' && car <= 'z'){\n            cont++;\n        }\n    }\n    cout << cont << \" letras minusculas digitadas\\n\";\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-16",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-16",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 5\nFaça um programa que lê um número n e um número m. Em seguida, o seu programa deve exibir na tela as m primeiras potências positivas dos n primeiros números positivos. As potências devem estar separadas por linha."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-17",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-17",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExemplo de execução:\nInforme a quantidade de numeros\n5\nInforme a quantidade de potencias\n4\nPotencias:\n1 1 1 1 \n2 4 8 16 \n3 9 27 81 \n4 16 64 256 \n5 25 125 625"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-18",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-for-18",
    "title": "Comandos de Repetição",
    "section": "Comando for",
    "text": "Comando for\nExercício 5: Solução\nint main(){\n    int i, j, n, m;\n    cout << \"Informe a quantidade de numeros\\n\";\n    cin >> n;\n    cout << \"Informe a quantidade de potencias\\n\";\n    cin >> m;\n    for(i = 1; i <= n; i++){\n        for(j = 1; j <= m; j++){\n            cout << pow(i,j) << \" \"; \n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nSintaxe:\nwhile(condicao){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-1",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-1",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\n\nExecuta enquanto a condição é verdadeira\nCondição é qualquer expressão e é obrigatória (é convertida implicitamente em expressão lógica)\nA condição é testada antes de cada iteração"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-2",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-2",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nDevemos nos certificar de dois itens para garantir o seu funcionamento de forma correta:\n\nQue a condição tem a possibilidade de ser verdadeira ao ser testada pela primeira vez\nQue a condição vai se tornar falsa, em algum momento"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-3",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-3",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nExemplo\nint main(){\n    int i = 0, n;\n    cin >> n;\n    while(i < n){\n        cout << \"i: \" << i << endl;\n        i++;\n    }\n    return 0;\n}\n\nQual a saída deste programa?\nComo foram garantidos os dois itens necessários?"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição-2",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição-2",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDiferenças entre while e for\n\nO comando while é apropriado para repetição condicional\n\nÉ possível utilizá-lo para repetição contada, embora isto seja mais propenso a erros\n\nO comando for é apropriado para repetição contada\n\nÉ possível utilizá-lo para repetição condicional, embora o código resultante fique menos intuitivo"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição-3",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-de-repetição-3",
    "title": "Comandos de Repetição",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-4",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-4",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nExercício 6\nFaça um programa que lê vários números e informa se cada um deles é par ou ímpar. O programa deve se encerrar quando for digitado um número negativo."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-5",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-5",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nAntes de programar, precisamos identificar:\n\nVariáveis do programa\nEntrada e saída do programa\nO que deve ser repetido\nExpressão lógica para repetição"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-6",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-6",
    "title": "Comandos de Repetição",
    "section": "Comando while",
    "text": "Comando while\nExercício 6: Solução\nint main(){\n    int x;\n    cout << \"Informe um numero\\n\";\n    cin >> x;\n    while(x >= 0){\n        if(x % 2 == 0){\n            cout << x << \" e um numero par\\n\";\n        }\n        else{\n            cout << x << \" e um numero impar\\n\";\n        }\n        cout << \"Informe um numero\\n\";\n        cin >> x;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-do-while",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-do-while",
    "title": "Comandos de Repetição",
    "section": "Comando do-while",
    "text": "Comando do-while\n\nA linguagem C++ oferece também o comando do-while (faça-enquanto)\nSintaxe:\n\ndo{\n    comando1;\n    ...\n    comandoN;\n} while(condicao);"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-do-while-1",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-do-while-1",
    "title": "Comandos de Repetição",
    "section": "Comando do-while",
    "text": "Comando do-while\nDiferença para o while: a condição é testada após a execução do corpo\n\nNo comando while, o corpo pode não ser executado nenhuma vez\nNo comando do-while, o corpo é executado pelo menos uma vez"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-e-do-while",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-e-do-while",
    "title": "Comandos de Repetição",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nErros Comuns\n\nNão garantir que a condição pode ser verdadeira ao ser testada pela primeira vez (while)\nNão garantir que a condição vai se tornar falsa na lógica do algoritmo\nInverter condição: a expressão lógica deve ter valor verdadeiro para que o laço execute"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-while-e-do-while",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-while-e-do-while",
    "title": "Comandos de Repetição",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 7\nImplemente um programa com um menu de escolha, que deve ler do usuário uma entrada denotando uma opção. O programa deve imprimir:\n\n“opcao1 escolhida” quando o usuário inserir 1\n“opcao2 escolhida” quando o usuário inserir 2\n“opcao3 escolhida” quando o usuário inserir 3\n\nPara cada escolha acima, o programa deve voltar ao menu inicial. Caso o usuário insira s, o programa deve se encerrar."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-while-e-do-while-1",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-while-e-do-while-1",
    "title": "Comandos de Repetição",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 7: Solução\nint main(){\n    char o;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> o;\n        if(o == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(o == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(o == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(o == 's'){\n            cout << \"Vc escolheu sair\\n\";\n        }\n    }while(o != 's');\n    return 0;"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-break-e-continue",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comandos-break-e-continue",
    "title": "Comandos de Repetição",
    "section": "Comandos break e continue",
    "text": "Comandos break e continue\n\nComandos que podem ser utilizados dentro de for, while e do-while:\n\nComando break: utilizado para encerrar o laço em que o comando break se encontra\nComando continue: utilizado para ignorar a iteração atual do laço e forçar a próxima iteração\n\nNo geral, há alternativas que tornam ambos os comandos opcionais"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-break",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-break",
    "title": "Comandos de Repetição",
    "section": "Comando break",
    "text": "Comando break\nMenu com break\nO comando break pode ser usado em menus:\nint main(){\n    char c1;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> c1;\n        if(c1 == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(c1 == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(c1 == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(c1 == 's'){\n            cout << \"Vc escolheu sair\\n\";\n            break;\n        }\n    }while(true);\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-continue",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-continue",
    "title": "Comandos de Repetição",
    "section": "Comando continue",
    "text": "Comando continue\nExemplo de Uso\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 == 0){\n            continue;\n        }\n        s += i;\n    }\n    cout << s << endl;\n    return 0;\n}\nO que faz este programa?"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-continue-1",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-continue-1",
    "title": "Comandos de Repetição",
    "section": "Comando continue",
    "text": "Comando continue\nPrograma equivalente sem continue\nO mesmo programa pode ser implementado sem continue:\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 != 0){\n            s += i;\n        }\n    }\n    cout << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-e-do-while-1",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-e-do-while-1",
    "title": "Comandos de Repetição",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 8\nImplemente um programa que lê a população no ano corrente de dois países, A e B. O país A tem taxa de crescimento de 2% ao ano, enquanto o país B cresce 4% ao ano. Supondo que a população do país A é maior do que a do país B, o seu programa deve informar em quantos anos a população do país B ultrapassará a população do país A."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-e-do-while-2",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#comando-while-e-do-while-2",
    "title": "Comandos de Repetição",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 8: Solução\nint main(){\n    int anos = 0;\n    int pop_a, pop_b;\n\n    cout << \"Insira as populacoes iniciais:\\n\";\n    cin >> pop_a >> pop_b;\n\n    while(pop_b <= pop_a){\n        pop_a *= 1.02;\n        pop_b *= 1.04;\n        anos++;\n    }\n    cout << \"A populacao do pais B ultrapassa\n             a do pais A em \"\n         << anos << \" anos.\\n\";\n    \n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#sumário",
    "href": "slides/05a-comando_repeticao_for/05-comandos_repeticao.html#sumário",
    "title": "Comandos de Repetição",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição for\nComando de repetição while\nComandos break e continue\nExercícios\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#linguagem-de-programação",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#linguagem-de-programação",
    "title": "Comando de Repetição for",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComandos de seleção\n\nAula de hoje:\n\nComando de repetição for"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição-1",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição-1",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado for: repete instruções por um determinado número de vezes\nComando de repetição condicional while: repete instruções enquanto uma condição é verdadeira (próxima aula)"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição-2",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição-2",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nImplemente um programa que escreva n vezes na tela \"vou estudar lip\""
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nSintaxe:\nfor(inicializacao; condicao; incremento){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-1",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-1",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nItera sobre uma variável, chamada de contador, variável de iteração ou variável de controle\nEsta variável tem o seu valor alterado conforme o programador deseja\nIsto faz o laço executar várias iterações"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-2",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-2",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nDividido em três expressões opcionais:\n\nInicialização: executada somente na primeira vez em que o for é executado\nCondição: avaliada no início de cada iteração\nIncremento: executado no final de cada iteração"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-3",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-3",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nOrdem de execução:\n\nA expressão de inicialização é executada\nA expressão de condição é avaliada:\n\nCaso seja verdadeira: o bloco de comandos é executado\nCaso seja falsa: o laço é encerrado\n\nA expressão de incremento é executada e volta para o passo 2"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-4",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-4",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"i: \" << i << endl;\n    }\n    return 0;\n}\nO que imprime este programa?"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição-3",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comandos-de-repetição-3",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nVoltando ao exemplo inicial: agora sim, vimos o que é necessário\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"vou estudar lip\\n\";\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#programação-e-automatização-de-tarefas",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#programação-e-automatização-de-tarefas",
    "title": "Comando de Repetição for",
    "section": "Programação e Automatização de Tarefas",
    "text": "Programação e Automatização de Tarefas\n\n\n\n\n\nAprender programação é aprender a automatizar tarefas"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-5",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-5",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo de Motivação\nNo mesmo exemplo, o que aconteceria se fosse usado:\n\nfor(i = 0; i < 10*n; i += 10)...\nfor(i = n; i > 0; i--)...\nfor(i = 10*n; i > 0; i -= 10)...\n\n?"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-6",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-6",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\nDiferentes combinações para a inicialização, condição e incremento fazem o for repetir pela mesma quantidade de vezes"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-7",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-7",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\n\nDiferentes for podem ser usados se estivermos preocupados com a quantidade de execuções de um bloco de comandos\nO que não é o caso se desejarmos que a variável de iteração assuma uma sequência de valores específicos"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-8",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-8",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 1\nFaça um programa que lê um número n e em seguida, lê as notas de n alunos. O programa deve exibir a média das notas na tela.\nAntes de programar: o que deve ser repetido?"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-9",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-9",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 1: Solução\nint main(){\n    int i, n;\n    float nota, media = 0;\n    cout << \"Insira a quantidade de notas\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"Insira a nota do \"\n             << i+1 << \"o. aluno\" << endl;\n        cin >> nota;\n        media += nota;\n    }\n    media /= n;\n    cout << \"media dos alunos: \" << media << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-10",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-10",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplos Atípicos\n\nQuantas vezes é executado o laço a seguir? n vezes?\n\nfor(i = 0; i <= n; i++){\n    ...\n}\n\nQuantas vezes é executado o laço a seguir?\n\nfor(i = n; i > 0; i++){\n    ...\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#lista-de-presença",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#lista-de-presença",
    "title": "Comando de Repetição for",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20240409"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-11",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-11",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 2\nImplemente um programa que lê um número n e em seguida, imprime os n primeiros números pares na tela. Considere o número 0 como o primeiro par."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-12",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-12",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 2: Solução\nint main(){\n    int i, n;\n    cout << \"Digite n\\n\";\n    cin >> n;\n    for(i = 0; i < 2*n; i += 2){\n        cout << i << endl;\n    }\n    return 0;\n}\nObviamente, há outras formas de se implementar este programa"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-13",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-13",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 3\nImplemente um programa que imprime na tela em forma de tabela as seguintes contagens:\n\nDe 1 a 100\nDe 10 a 1000 (incrementando o contador de 10 em 10)\nDe 100 a 1 (em ordem decrescente)"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-14",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-14",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nSaída esperada para o exercício 3:\n\n\n\n1\n10\n100\n\n\n\n\n2\n20\n99\n\n\n3\n30\n98\n\n\n…\n…\n…\n\n\n100\n1000\n1"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-15",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-15",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 3: Solução\nint main(){\n    int i;\n    for(i = 1; i <= 100; i++){\n        cout << i << \" \"\n             << 10*i << \" \"\n             << 101-i << endl;\n    }\n    return 0;\n}\nÉ possível implementar o programa com o uso de variáveis adicionais"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-16",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-16",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 4\nImplemente um programa que lê um número n e em seguida, lê n caracteres. O programa deve exibir a quantidade de caracteres digitados que são letras minúsculas."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-17",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-17",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 4: Solução\nint main(){\n    char car;\n    int n, cont = 0;\n    cout << \"Informe a quantidade de caracteres:\\n\";\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        cout << \"Informe um caractere\\n\";\n        cin >> car;\n        if(car >= 'a' && car <= 'z'){\n            cont++;\n        }\n    }\n    cout << cont << \" letras minusculas digitadas\\n\";\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-18",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-18",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 5\nFaça um programa que lê um número n e um número m. Em seguida, o seu programa deve exibir na tela as m primeiras potências positivas dos n primeiros números positivos. As potências devem estar separadas por linha."
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-19",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-19",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo de execução:\nInforme a quantidade de numeros\n5\nInforme a quantidade de potencias\n4\nPotencias:\n1 1 1 1 \n2 4 8 16 \n3 9 27 81 \n4 16 64 256 \n5 25 125 625"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-20",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#comando-for-20",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 5: Solução\nint main(){\n    int i, j, n, m;\n    cout << \"Informe a quantidade de numeros\\n\";\n    cin >> n;\n    cout << \"Informe a quantidade de potencias\\n\";\n    cin >> m;\n    for(i = 1; i <= n; i++){\n        for(j = 1; j <= m; j++){\n            cout << pow(i,j) << \" \"; \n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#sumário",
    "href": "slides/05a-comando_repeticao_for/05a-comando_repeticao_for.html#sumário",
    "title": "Comando de Repetição for",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição for\nExercícios\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#linguagem-de-programação",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#linguagem-de-programação",
    "title": "Comando de Repetição while",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComando de repetição for\n\nAula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-1",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-1",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado: o for repete instruções por um determinado número de vezes (aula anterior)\nComando de repetição condicional: o while repete instruções enquanto uma condição é verdadeira"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-2",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-2",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nImplemente um programa que escreva na tela \"vou estudar lip\" enquanto um número lido não for 0"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nSintaxe:\nwhile(condicao){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-1",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\n\nExecuta enquanto a condição é verdadeira\nCondição é qualquer expressão e é obrigatória (é convertida implicitamente em expressão lógica)\nA condição é testada antes de cada iteração"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-2",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-2",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nDevemos nos certificar de dois itens para garantir o seu funcionamento de forma correta:\n\nQue a condição tem a possibilidade de ser verdadeira ao ser testada pela primeira vez\nQue a condição vai se tornar falsa, em algum momento"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-3",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-3",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExemplo\nint main(){\n    int i = 0, n;\n    cin >> n;\n    while(i < n){\n        cout << \"i: \" << i << endl;\n        i++;\n    }\n    return 0;\n}\n\nQual a saída deste programa?\nComo foram garantidos os dois itens necessários?"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-3",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-3",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nVoltando ao exemplo inicial: agora sim, vimos o que é necessário\nint main(){\n    int n;\n    cout << \"Digite um numero\\n\";\n    cin >> n;\n    while(n != 0){\n        cout << \"vou estudar lip\\n\";\n        cout << \"Digite um numero\\n\";\n        cin >> n;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-4",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-4",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDiferenças entre while e for\n\nO comando while é apropriado para repetição condicional\n\nÉ possível utilizá-lo para repetição contada, embora isto seja mais propenso a erros\n\nO comando for é apropriado para repetição contada\n\nÉ possível utilizá-lo para repetição condicional, embora o código resultante fique menos intuitivo"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-5",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-5",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-4",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-4",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExercício 1\nFaça um programa que lê vários números e informa se cada um deles é par ou ímpar. O programa deve se encerrar quando for digitado um número negativo."
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-5",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-5",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nAntes de programar, precisamos identificar:\n\nVariáveis do programa\nEntrada e saída do programa\nO que deve ser repetido\nExpressão lógica para repetição"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-6",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-6",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExercício 1: Solução\nint main(){\n    int x;\n    cout << \"Informe um numero\\n\";\n    cin >> x;\n    while(x >= 0){\n        if(x % 2 == 0){\n            cout << x << \" e um numero par\\n\";\n        }\n        else{\n            cout << x << \" e um numero impar\\n\";\n        }\n        cout << \"Informe um numero\\n\";\n        cin >> x;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-do-while",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-do-while",
    "title": "Comando de Repetição while",
    "section": "Comando do-while",
    "text": "Comando do-while\n\nA linguagem C++ oferece também o comando do-while (faça-enquanto)\nSintaxe:\n\ndo{\n    comando1;\n    ...\n    comandoN;\n} while(condicao);"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-do-while-1",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando do-while",
    "text": "Comando do-while\nDiferença para o while: a condição é testada após a execução do corpo\n\nNo comando while, o corpo pode não ser executado nenhuma vez\nNo comando do-while, o corpo é executado pelo menos uma vez"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-e-do-while",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-e-do-while",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nErros Comuns\n\nNão garantir que a condição pode ser verdadeira ao ser testada pela primeira vez (while)\nNão garantir que a condição vai se tornar falsa na lógica do algoritmo\nInverter condição: a expressão lógica deve ter valor verdadeiro para que o laço execute"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-6",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-de-repetição-6",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#lista-de-presença",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#lista-de-presença",
    "title": "Comando de Repetição while",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250416"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-while-e-do-while",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-while-e-do-while",
    "title": "Comando de Repetição while",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 2\nImplemente um programa que lê um número inteiro positivo n e em seguida, imprime o quociente e o resto da divisão de n por 10. O seu programa deve checar se o usuário digitou um número inteiro positivo, solicitando ao mesmo para redigitá-lo se não for o caso."
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-while-e-do-while-1",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-while-e-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 2: Solução\nint main(){\n    int x;\n    do{\n        cout << \"Insira um numero inteiro\n                 e positivo\\n\";\n        cin >> x;\n    } while(x < 0);\n\n    cout << \"q: \" << x/10\n         << \", r:\" << x%10 << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-break-e-continue",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comandos-break-e-continue",
    "title": "Comando de Repetição while",
    "section": "Comandos break e continue",
    "text": "Comandos break e continue\n\nComandos que podem ser utilizados dentro de for, while e do-while:\n\nComando break: utilizado para encerrar o laço em que o comando break se encontra\nComando continue: utilizado para ignorar a iteração atual do laço e forçar a próxima iteração\n\nNo geral, há alternativas que tornam ambos os comandos opcionais"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-break",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-break",
    "title": "Comando de Repetição while",
    "section": "Comando break",
    "text": "Comando break\nMenu com break\nO comando break pode ser usado em menus:\nint main(){\n    char c1;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> c1;\n        if(c1 == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(c1 == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(c1 == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(c1 == 's'){\n            cout << \"Vc escolheu sair\\n\";\n            break;\n        }\n    }while(true);\n    return 0;\n}"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-break-1",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-break-1",
    "title": "Comando de Repetição while",
    "section": "Comando break",
    "text": "Comando break\nMenu sem break\nO mesmo menu pode ser implementado sem break:\nint main(){\n    char o;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> o;\n        if(o == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(o == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(o == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(o == 's'){\n            cout << \"Vc escolheu sair\\n\";\n        }\n    }while(o != 's');\n    return 0;"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-continue",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-continue",
    "title": "Comando de Repetição while",
    "section": "Comando continue",
    "text": "Comando continue\nExemplo de Uso\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 == 0){\n            continue;\n        }\n        s += i;\n    }\n    cout << s << endl;\n    return 0;\n}\nO que faz este programa?"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-continue-1",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-continue-1",
    "title": "Comando de Repetição while",
    "section": "Comando continue",
    "text": "Comando continue\nPrograma equivalente sem continue\nO mesmo programa pode ser implementado sem continue:\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 != 0){\n            s += i;\n        }\n    }\n    cout << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-e-do-while-1",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-e-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 3\nImplemente um programa que lê a população no ano corrente de dois países, A e B. O país A tem taxa de crescimento de 2% ao ano, enquanto o país B cresce 4% ao ano. Supondo que a população do país A é maior do que a do país B, o seu programa deve informar em quantos anos a população do país B ultrapassará a população do país A."
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-e-do-while-2",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#comando-while-e-do-while-2",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 3: Solução\nint main(){\n    int anos = 0;\n    int pop_a, pop_b;\n\n    cout << \"Insira as populacoes iniciais:\\n\";\n    cin >> pop_a >> pop_b;\n\n    while(pop_b <= pop_a){\n        pop_a *= 1.02;\n        pop_b *= 1.04;\n        anos++;\n    }\n    cout << \"A populacao do pais B ultrapassa\n             a do pais A em \"\n         << anos << \" anos.\\n\";\n    \n    return 0;\n}"
  },
  {
    "objectID": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#sumário",
    "href": "slides/05b-comando_repeticao_while/05b-comando_repeticao_while.html#sumário",
    "title": "Comando de Repetição while",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue\nExercícios\n\n\n\n\nECT3201 - Linguagem de Programação"
  },
  {
    "objectID": "slides/exercicios_un2/exercicios_un2.html#exercício-1",
    "href": "slides/exercicios_un2/exercicios_un2.html#exercício-1",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nFunção para Informar se Vetor é Conjunto\nUm vetor é considerado um conjunto quando nenhum dos seus valores se repetem.\nFunção: informar (verdadeiro ou falso) se vetor é conjunto. Parâmetro: vetor (e o seu tamanho)\nImplemente também a função main."
  },
  {
    "objectID": "slides/exercicios_un2/exercicios_un2.html#exercício-2",
    "href": "slides/exercicios_un2/exercicios_un2.html#exercício-2",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nFunção para calcular conjunto união\nFunção: calcular o conjunto união (parâmetro de saída) entre dois conjuntos (parâmetros de entrada)\nImplemente também a função main."
  },
  {
    "objectID": "slides/exercicios_un2/exercicios_un2.html#lista-de-presença",
    "href": "slides/exercicios_un2/exercicios_un2.html#lista-de-presença",
    "title": "Unidade 2: exercícios",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20250618"
  },
  {
    "objectID": "slides/exercicios_un2/exercicios_un2.html#exercício-3",
    "href": "slides/exercicios_un2/exercicios_un2.html#exercício-3",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nMultiplicação entre matriz e vetor\nO vetor \\mathbf{u} de R^n é calculado a partir do vetor \\mathbf{v} também de R^n por\n\n    \\mathbf{u} = A\\mathbf{v},\n\nou seja\n\n\\begin{align*}\nu_{0}   & = A_{0,0}.v_{0} + A_{0,1}.v_{1} + ... + A_{0,n-1}.v_{n-1}\\\\\nu_{1}   & = A_{1,0}.v_{0} + A_{1,1}.v_{1} + ... + A_{1,n-1}.v_{n-1}\\\\\n\\vdot\\\\\nu_{n-1} & = A_{n-1,0}.v_{0} + A_{n-1,1}.v_{1} + ... + A_{n-1,n-1}.v_{n-1}\\\\\n\\end{align*}"
  },
  {
    "objectID": "slides/exercicios_un2/exercicios_un2.html#exercício-3-1",
    "href": "slides/exercicios_un2/exercicios_un2.html#exercício-3-1",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nMultiplicação entre matriz e vetor\nFunção: calcular o vetor produto (parâmetro de saída) entre uma matriz (parâmetro de entrada) e um vetor (outro parâmetro de entrada). A matriz M \\times N terá sempre N colunas, que é o tamanho dos vetores.\nImplemente também a função main."
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-1",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-1",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 1",
    "text": "Exercício 1\nFunção para Informar se Vetor é Conjunto\nUm vetor é considerado um conjunto quando nenhum dos seus valores se repetem.\nFunção: informar (verdadeiro ou falso) se vetor é conjunto. Parâmetro: vetor (e o seu tamanho)\nImplemente também a função main."
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-2",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-2",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 2",
    "text": "Exercício 2\nFunção para calcular conjunto união\nFunção: calcular o conjunto união (parâmetro de saída) entre dois conjuntos (parâmetros de entrada)\nImplemente também a função main."
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-3",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-3",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nMultiplicação entre matriz e vetor\nO vetor \\mathbf{u} de R^N é calculado a partir do vetor \\mathbf{v} também de R^N por\n\n    \\mathbf{u} = A\\mathbf{v},\n\nou seja"
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-3-1",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-3-1",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nMultiplicação entre matriz e vetor\n\n\\begin{align*}\nu_{0}   & = A_{0,0}.v_{0} + A_{0,1}.v_{1} + ... + A_{0,n-1}.v_{n-1}\\\\\nu_{1}   & = A_{1,0}.v_{0} + A_{1,1}.v_{1} + ... + A_{1,n-1}.v_{n-1}\\\\\n\\vdots\\\\\nu_{n-1} & = A_{n-1,0}.v_{0} + A_{n-1,1}.v_{1} + ... + A_{n-1,n-1}.v_{n-1}\\\\\n\\end{align*}"
  },
  {
    "objectID": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-3-2",
    "href": "slides/exercicios_unidade2/exercicios_unidade2.html#exercício-3-2",
    "title": "Unidade 2: exercícios",
    "section": "Exercício 3",
    "text": "Exercício 3\nMultiplicação entre matriz e vetor\nFunção: calcular o vetor produto (parâmetro de saída) entre uma matriz (parâmetro de entrada) e um vetor (outro parâmetro de entrada).\nA matriz M \\times N terá sempre N colunas, e os vetores tamanho N.\nImplemente também a função main.\n\n\n\nECT3201 - Linguagem de Programação"
  }
]