[
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nPerguntas pertinentes sobre Linguagem de Programação (LiP) na ECT:\n\nPor que é tão importante?\nPor que 90h?\nQual a relação com o curso de Bacharelado em Ciências e Tecnologia?"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-1",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-1",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nO curso de Linguagem de Programação está relacionado com várias competências e habilidades desejáveis em profissionais da engenharia. Por exemplo:"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-2",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-2",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nCapacidade de identificar, avaliar e resolver problemas, enfrentar desafios e responder a novas demandas da sociedade contemporânea\nCapacidade de comunicação e argumentação em suas múltiplas formas\nCapacidade de atuar em áreas de fronteira e interfaces de diferentes disciplinas e campos de saber"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-3",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-3",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\n\nAtitude investigativa, de prospecção, de permanente busca e produção do conhecimento\nAtitude ética nas esferas profissional, acadêmica e das relações interpessoais"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-4",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-4",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nFonte: Projeto Pedagógico do Curso de Bacharelado em Ciências e Tecnologia\nConsulte o Projeto Pedagógico do seu curso de engenharia e verifique quais competências e habilidades você acha que estão relacionadas com o curso de LiP"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#linguagem-de-programação-5",
    "href": "slides/01-intro/01-intro.html#linguagem-de-programação-5",
    "title": "Introdução",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\nCompetências e Habilidades\nComo é possível ver, o curso de Linguagem de Programação (LiP) é bem completo quanto ao seu envolvimento com as competências e habilidades desejadas de um bacharel em CeT."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#apresentação",
    "href": "slides/01-intro/01-intro.html#apresentação",
    "title": "Introdução",
    "section": "Apresentação",
    "text": "Apresentação\n\nProf. Bruno Silva\nAtendimento:\n\nVia email: bruno.silva@ect.ufrn.br\nVia Discord\nHorário para a turma: terças e quintas, das 9:30 às 10:30\n\nÁreas de interesse:\n\nProcessamento de imagens e visão computacional\nInteligência artificial e robótica"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sobre-a-disciplina",
    "href": "slides/01-intro/01-intro.html#sobre-a-disciplina",
    "title": "Introdução",
    "section": "Sobre a Disciplina",
    "text": "Sobre a Disciplina\n\nAulas teóricas: terças e quintas, de 10:50 às 12:30, Auditório F da ECT\nCarga horária: 90 horas (30h de laboratório)\nMetodologia:\n\nAulas expositivas com slides digitais\nTópicos de aula seguidos por exercícios\nAtividades práticas em laboratório"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#laboratórios",
    "href": "slides/01-intro/01-intro.html#laboratórios",
    "title": "Introdução",
    "section": "Laboratórios",
    "text": "Laboratórios\n\nSubturma 1A: Terça, 16:50 às 18:30, Lab. 3 (Prof. Bruno)\nSubturma 1B: Quarta, 14:55 às 16:35, Lab. 3 (Prof. Vidal)\nSubturma 1C: Quarta, 16:50 às 18:30, Lab. 3 (Prof. Vidal)"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#avaliações",
    "href": "slides/01-intro/01-intro.html#avaliações",
    "title": "Introdução",
    "section": "Avaliações",
    "text": "Avaliações\n\nPráticas semanais no laboratório (30%)\nProva prática em cada unidade (70%)\nPresenças serão registradas por chamada em todas as aulas"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#sobre-a-disciplina-observação-importante",
    "href": "slides/01-intro/01-intro.html#sobre-a-disciplina-observação-importante",
    "title": "Introdução",
    "section": "Sobre a Disciplina: Observação Importante",
    "text": "Sobre a Disciplina: Observação Importante\nRegimento Interno/UFRN, Seção III:\n\nPrevê punições para casos de:\n\nFraudes (colas)\nPerturbação ao andamento normal das atividades\nOfensas a servidores da universidade"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma",
    "href": "slides/01-intro/01-intro.html#cronograma",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 1"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma-1",
    "href": "slides/01-intro/01-intro.html#cronograma-1",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 2"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#cronograma-2",
    "href": "slides/01-intro/01-intro.html#cronograma-2",
    "title": "Introdução",
    "section": "Cronograma",
    "text": "Cronograma\nUnidade 3"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#livros-utilizados",
    "href": "slides/01-intro/01-intro.html#livros-utilizados",
    "title": "Introdução",
    "section": "Livros Utilizados",
    "text": "Livros Utilizados"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso assistir aula em uma subturma de laboratório que não seja a minha? Neste semestre estamos oferecendo esta flexibilidade. Fale com o professor responsável pelo seu laboratório.\nEsta semana tem aula de laboratório? Na disciplina de LiP, os laboratórios são semanais. Caso não haja nenhum aviso (no SIGAA), a resposta provavelmente é sim. Na dúvida, confira o plano de aulas no SIGAA."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes-1",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes-1",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nMeu programa enviado no Multiprova/Sistema LoP deu 100% correto. Por que a minha nota não foi 10? O seu programa ter 100% de acerto não implica no fato de que você implementou a questão como solicitada.\nAcho curto o tempo para entrega das questões de lab. Por que não estender este prazo? As questões são elaboradas para serem entregues em um determinado prazo. O fato de você não conseguir entregá-las significa que o seu nível de desenvoltura com a disciplina está abaixo do esperado."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#perguntas-frequentes-2",
    "href": "slides/01-intro/01-intro.html#perguntas-frequentes-2",
    "title": "Introdução",
    "section": "Perguntas Frequentes",
    "text": "Perguntas Frequentes\n\nPosso utilizar o recurso XYZ (p. ex. vetores) em uma atividade, mesmo que ele ainda não tenha sido apresentado em sala de aula? E quanto a recursos não passados pelo professor? Não. Todas as atividades avaliativas são elaboradas de forma que o aluno seja avaliado considerando o conteúdo que a ele foi passado até o momento da atividade."
  },
  {
    "objectID": "slides/01-intro/01-intro.html#experiências-passadas-em-lip",
    "href": "slides/01-intro/01-intro.html#experiências-passadas-em-lip",
    "title": "Introdução",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que não ouve o professor\n\nParadoxo: se o aluno não ouve o professor, ele também não irá ouvir esta afirmação e portanto, o problema não tem solução\nPor exemplo: quantos daqui ouviram os argumentos da importância de LiP?\n\nAluno que não estudou o suficiente para uma atividade"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#experiências-passadas-em-lip-1",
    "href": "slides/01-intro/01-intro.html#experiências-passadas-em-lip-1",
    "title": "Introdução",
    "section": "Experiências Passadas em LiP",
    "text": "Experiências Passadas em LiP\nA partir de experiências em turmas passadas, algumas fontes de problema na disciplina:\n\nAluno que acha que está aprendendo, mas não está\n\nPor exemplo, aluno que costuma fazer trabalhos em grupo ou acha que programação se aprende vendo alguém praticar\n\nAluno que quer burlar o sistema de avaliação"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#demais-perguntas",
    "href": "slides/01-intro/01-intro.html#demais-perguntas",
    "title": "Introdução",
    "section": "Demais Perguntas",
    "text": "Demais Perguntas\nSintam-se à vontade para fazer qualquer pergunta sobre a disciplina ou sobre o professor"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#dúvidas",
    "href": "slides/01-intro/01-intro.html#dúvidas",
    "title": "Introdução",
    "section": "Dúvidas",
    "text": "Dúvidas\n\nMensagem via Discord\nEmail: bruno.silva@ect.ufrn.br\n\n\n\n\nECT2303 - Linguagem de Programação"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#horários-dos-laboratórios",
    "href": "slides/01-intro/01-intro.html#horários-dos-laboratórios",
    "title": "Introdução",
    "section": "Horários dos Laboratórios",
    "text": "Horários dos Laboratórios\n\nSubturma 1A: Terça, 16:50 às 18:30, Lab. 3 (Prof. Bruno)\nSubturma 1B: Quarta, 14:55 às 16:35, Lab. 3 (Prof. Vidal)\nSubturma 1C: Quarta, 16:50 às 18:30, Lab. 3 (Prof. Vidal)\n\nAs atividades práticas serão realizadas no Multiprova"
  },
  {
    "objectID": "slides/01-intro/01-intro.html#observação-importante",
    "href": "slides/01-intro/01-intro.html#observação-importante",
    "title": "Introdução",
    "section": "Observação Importante",
    "text": "Observação Importante\nRegimento Interno/UFRN, Seção III:\n\nPrevê punições para casos de:\n\nFraudes (colas)\nPerturbação ao andamento normal das atividades\nOfensas a servidores da universidade"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#objetivos-da-disciplina",
    "href": "slides/02-cpp/02-cpp.html#objetivos-da-disciplina",
    "title": "Introdução à Linguagem C++",
    "section": "Objetivos da Disciplina",
    "text": "Objetivos da Disciplina\n\nDesenvolver a capacidade de implementar algoritmos em uma linguagem de programação estruturada e conceitos relacionados\nDesenvolver programas com funções e tipos estruturados\n\nPara isto, utilizaremos a linguagem:\n\nC++"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação",
    "href": "slides/02-cpp/02-cpp.html#programação",
    "title": "Introdução à Linguagem C++",
    "section": "Programação",
    "text": "Programação\nA capacidade de programar computadores será aplicada na resolução de problemas como:\n\nResolução de funções matemáticas, possivelmente com vetores e matrizes\nSimulação de sistemas\nProcessamento de grandes volumes de dados\netc."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-1",
    "href": "slides/02-cpp/02-cpp.html#programação-1",
    "title": "Introdução à Linguagem C++",
    "section": "Programação",
    "text": "Programação\nProgramação envolve:\n\nCompreender o problema a ser resolvido\nElaborar uma sequência de comandos/instruções conhecidos\nEscrever um programa na linguagem escolhida em um arquivo chamado código fonte (possui terminação .cpp)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-processo-de-compilação",
    "href": "slides/02-cpp/02-cpp.html#programação-processo-de-compilação",
    "title": "Introdução à Linguagem C++",
    "section": "Programação: Processo de Compilação",
    "text": "Programação: Processo de Compilação\n\n\nCompilação: transformação de código fonte em um programa\nCódigo fonte: formato legível por humanos, formado por comandos/instruções\nPrograma: formato legível por máquinas (arquivo binário)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio",
    "href": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio",
    "title": "Introdução à Linguagem C++",
    "section": "Programação: Representação de um Raciocínio",
    "text": "Programação: Representação de um Raciocínio\n\nLinguagem escolhida tem um formato próprio, denominado sintaxe\nPortanto, aprender programação se resume a:\n\nDominar a sintaxe da linguagem de programação utilizada\nDominar raciocínio lógico e a sua transcrição em um programa"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-2",
    "href": "slides/02-cpp/02-cpp.html#programação-2",
    "title": "Introdução à Linguagem C++",
    "section": "Programação",
    "text": "Programação\nProgramando na linguagem C++"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-primeiro-programa",
    "href": "slides/02-cpp/02-cpp.html#c-primeiro-programa",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Primeiro Programa",
    "text": "C++: Primeiro Programa\nint main(){\n    return 0;\n}\n\nEntretanto, o programa mostrado não faz nada."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-primeiro-programa-útil",
    "href": "slides/02-cpp/02-cpp.html#c-primeiro-programa-útil",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Primeiro Programa Útil",
    "text": "C++: Primeiro Programa Útil\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    cout << \"LiP: programando em C++\\n\";\n    return 0;\n}\n\nUm programa é dito “útil” quando tem algum tipo de saída."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-comando-de-saída",
    "href": "slides/02-cpp/02-cpp.html#c-comando-de-saída",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Comando de Saída",
    "text": "C++: Comando de Saída\n\nComando de saída cout: imprime na tela o que vem após cada <<\nIsto requer a inclusão da biblioteca iostream (com a diretiva #include)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-espaços-em-branco",
    "href": "slides/02-cpp/02-cpp.html#c-espaços-em-branco",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Espaços em Branco",
    "text": "C++: Espaços em Branco\nEspaços em branco não alteram o programa:\n#include <iostream>\n\nusing namespace std;\n\nint main(){\ncout << \"LiP: programando em C++\\n\";\nreturn 0;\n}\nEntretanto, mantenha sempre o seu código indentado (facilita a leitura)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-comentários-de-código",
    "href": "slides/02-cpp/02-cpp.html#c-comentários-de-código",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Comentários de Código",
    "text": "C++: Comentários de Código\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    //A proxima linha imprime uma frase\n    cout << \"LiP: primeiro programa\" << endl;\n\n    /* O proximo comando nao e processado pelo\n       compilador, pois e um comentario\n       de linha */\n    //cout << \"ECT/UFRN\" << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Variáveis",
    "text": "C++: Variáveis\n\nNomes dados a endereços de memória do computador\nUtilizadas para armazenar valores de diferentes tipos\nVariáveis precisam ser declaradas antes de serem utilizadas"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Sintaxe de Declaração de Variáveis",
    "text": "C++: Sintaxe de Declaração de Variáveis\nEm qualquer local dentro do bloco main:\ntipo_da_variavel nome_da_variavel;\n\ntipo_da_variavel pode ser:\n\nbool: declara um booleano (verdadeiro ou falso)\nint: declara um número inteiro\nfloat: declara um número real\nchar: declara um único caractere"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis-1",
    "href": "slides/02-cpp/02-cpp.html#c-sintaxe-de-declaração-de-variáveis-1",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Sintaxe de Declaração de Variáveis",
    "text": "C++: Sintaxe de Declaração de Variáveis\n\nnome_da_variavel deve obedecer às regras:\n\ndeve começar com uma letra ou _\ndeve ser composto por letras, dígitos ou _\nnão pode ser uma palavra reservada (p. ex. if)"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Declaração de Variáveis",
    "text": "C++: Declaração de Variáveis\nExercício\nUtilizando o seu caderno, declare variáveis:\n\nChamada de x para armazenar um inteiro\nChamada de temp para armazenar uma temperatura\nPara armazenar o resultado de uma média aritmética\nPara armazenar o sexo de uma pessoa\nPara armazenar se um motor está ligado ou desligado"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis-1",
    "href": "slides/02-cpp/02-cpp.html#c-declaração-de-variáveis-1",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Declaração de Variáveis",
    "text": "C++: Declaração de Variáveis\nSolução\n1. int x;\n2. float temp;\n3. float media;\n4. char sexo;\n5. bool ligado;"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#lista-de-presença",
    "href": "slides/02-cpp/02-cpp.html#lista-de-presença",
    "title": "Introdução à Linguagem C++",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/3QV1pX1"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-valor-inicial-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-valor-inicial-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Valor Inicial de Variáveis",
    "text": "C++: Valor Inicial de Variáveis\nO que é impresso pelo seguinte programa?\n#include <iostream>\n\nusing namespace std;\n\nint main(){\n    int x;\n    cout << \"o valor de x e: \" << x << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-inicialização-de-variáveis",
    "href": "slides/02-cpp/02-cpp.html#c-inicialização-de-variáveis",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Inicialização de Variáveis",
    "text": "C++: Inicialização de Variáveis\n\nAo serem declaradas em C++, as variáveis são inicializadas com valores aleatórios (lixo em memória)\nC++ oferece o recurso de inicializar uma variável ao mesmo tempo em que ela é declarada\nPor exemplo:\n\nfloat media = 0; \\(\\rightarrow\\) declara e inicializa a media com 0\nchar sexo = 'M'; \\(\\rightarrow\\) declara e inicializa a sexo com M"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nValores devem ser atribuídos com aspas simples: '\nVariáveis char armazenam um único caractere\n\nLetra: 'a', 'e', 'Z', etc.\nDígito: '5', '2', etc.\nSímbolo: ']', '/', ';', etc."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char-1",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char-1",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nCaracteres especiais:\n\n'\\n': quebra de linha\n'\\t': tabulação horizontal\n'\\0': delimitador de final de cadeia de caracteres"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char-2",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char-2",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nTodo caractere está presente na tabela ASCII (lê-se “ásqui”):\n\nAssocia um número inteiro diferente para cada caractere\nImagem com a tabela"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-entrada-de-dados",
    "href": "slides/02-cpp/02-cpp.html#c-entrada-de-dados",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Entrada de Dados",
    "text": "C++: Entrada de Dados\nComando de entrada cin: atribui valor lido do teclado às variáveis após o >>:\n#include <iostream>\nusing namespace std;\nint main(){\n    int x = 0;\n    cout << \"digite um valor: \";\n    cin >> x;\n    cout << \"o valor digitado foi \" << x << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-1",
    "href": "slides/02-cpp/02-cpp.html#exercício-1",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício",
    "text": "Exercício\nImplemente um programa que lê um número inteiro e um caractere e imprime o texto \"O inteiro eh X e o caractere eh Y\" seguido por uma quebra de linha, sendo X e Y o inteiro e o caractere respectivamente."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-solução",
    "href": "slides/02-cpp/02-cpp.html#exercício-solução",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\n#include <iostream>\nusing namespace std;\nint main(){\n    int num;\n    char carac;\n    cout << \"insira um num. inteiro:\\n\";\n    cin >> num;\n    cout << \"insira um caractere:\\n\";\n    cin >> carac;\n    cout << \"O inteiro eh \" << num\n         << \" e o caractere eh \"\n         << carac << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-operadores",
    "href": "slides/02-cpp/02-cpp.html#c-operadores",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Operadores",
    "text": "C++: Operadores\n\nOperador de atribuição: =\nOperadores aritméticos: +, -, *, /\nOperadores relacionais: >, >=, <, <=, ==, !=\nOperadores lógicos: ! (negação), || (ou), && (e)\n\nVocê verá mais sobre operadores na aula que vem"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-2",
    "href": "slides/02-cpp/02-cpp.html#exercício-2",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício",
    "text": "Exercício\nImplemente um programa que lê dois números inteiros. O programa deve armazenar em uma variável booleana o resultado da comparação X == Y, sendo X e Y os dois inteiros lidos. Em seguida, o programa deve imprimir a variável booleana."
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#exercício-solução-1",
    "href": "slides/02-cpp/02-cpp.html#exercício-solução-1",
    "title": "Introdução à Linguagem C++",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\n#include <iostream>\nusing namespace std;\nint main(){\n    int x, y;\n    bool iguais;\n    cout << \"insira dois num. inteiros:\\n\";\n    cin >> x >> y;\n    iguais = x == y;\n    cout << \"Iguais: \" << iguais << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#sumário",
    "href": "slides/02-cpp/02-cpp.html#sumário",
    "title": "Introdução à Linguagem C++",
    "section": "Sumário",
    "text": "Sumário\n\nNa aula de hoje, você viu:\n\nEstrutura de um programa em C++\nDeclaração e inicialização de variáveis\nTipos básicos\nComandos de entrada e saída\nOperadores"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio-1",
    "href": "slides/02-cpp/02-cpp.html#programação-representação-de-um-raciocínio-1",
    "title": "Introdução à Linguagem C++",
    "section": "Programação: Representação de um Raciocínio",
    "text": "Programação: Representação de um Raciocínio\n\nCaso esteja sintaticamente correto, o código fonte é compilado em um programa"
  },
  {
    "objectID": "slides/02-cpp/02-cpp.html#c-tipo-char-3",
    "href": "slides/02-cpp/02-cpp.html#c-tipo-char-3",
    "title": "Introdução à Linguagem C++",
    "section": "C++: Tipo char",
    "text": "C++: Tipo char\n\nNão se decora a tabela ASCII, mas é importante saber que:\n\nO alfabeto maiúsculo está em sequência na tabela: se 'A' é igual a um inteiro x, o correspondente a 'B' é igual a x+1, 'C' é x+2, etc.\nO mesmo para o alfabeto minúsculo: 'a' é y, 'b' é y+1…\nO mesmo para os números: '1' é z, '2' é z+1…\nO intervalo [A,Z] tem valores menores que [a,z]"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#linguagem-de-programação",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#linguagem-de-programação",
    "title": "Operadores e Expressões",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior: variáveis e tipos básicos\nAula de hoje: operadores e expressões"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-e-operandos",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-e-operandos",
    "title": "Operadores e Expressões",
    "section": "Operadores e Operandos",
    "text": "Operadores e Operandos\n\nCompõem uma expressão\nExemplo:\n\nx + y\n\nOperador: +\nOperandos: x e y"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores",
    "title": "Operadores e Expressões",
    "section": "Operadores",
    "text": "Operadores\nOs operadores possuem uma precedência (quem será computado primeiro) e estão divididos em grupos:\n\nOperador de atribuição\nOperadores aritméticos\nOperadores relacionais\nOperadores lógicos"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões",
    "title": "Operadores e Expressões",
    "section": "Expressões",
    "text": "Expressões\n\nSequências de operandos e operadores que especificam algo a ser calculado\nEm C++:\n\nExpressões aritméticas\nExpressões lógicas"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-atribuição",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-atribuição",
    "title": "Operadores e Expressões",
    "section": "Operador de Atribuição",
    "text": "Operador de Atribuição\nOperador = (“recebe”):\n\nAtribui um determinado valor a uma variável\nx = 0; \\(\\rightarrow\\) lê-se “x recebe zero”\nSempre: variável à esquerda da atribuição e qualquer outra expressão à sua direita"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos",
    "text": "Operadores Aritméticos\n\nFormam expressões aritméticas: valor resultante é um número\nOperadores de mesma precedência são avaliados da esquerda para a direita\n\n\n\n\n\nOperador\nFuncionalidade\nPrecedência no Grupo\n\n\n\n\n()\nAssociar operandos\nPrimeiro\n\n\n+\nAdição\nÚltimo\n\n\n-\nSubtração\nÚltimo\n\n\n*\nMultiplicação\nSegundo\n\n\n/\nDivisão\nSegundo\n\n\n%\nResto\nSegundo"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-aritméticas",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-aritméticas",
    "title": "Operadores e Expressões",
    "section": "Expressões Aritméticas",
    "text": "Expressões Aritméticas\nExemplos:\n\n1+2*3\n1*2+3\n(1+2)*3\n1*2%3\n((1*2)+3)*2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#programa-com-expressões",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#programa-com-expressões",
    "title": "Operadores e Expressões",
    "section": "Programa com expressões",
    "text": "Programa com expressões\nint main(){\n    int x = 0;\n    x + 45;\n    x = x + 100;\n    cout << x << endl;\n    return 0;\n}\nO programa está sintaticamente correto? Qual o valor impresso?"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos de Atribuição",
    "text": "Operadores Aritméticos de Atribuição\nComputam a expressão, aplicam o operador aritmético e atribuem o seu valor à variável à esquerda do op. de atribuição\n\n\n\nOperador\nExpressão\nExpressão Equivalente\n\n\n\n\n+=\nx += y\nx = x + y\n\n\n-=\nx -= y\nx = x - y\n\n\n*=\nx *= y\nx = x * y\n\n\n/=\nx /= y\nx = x/y\n\n\n%=\nx %= y\nx = x%y"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-de-atribuição-1",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos de Atribuição",
    "text": "Operadores Aritméticos de Atribuição\nQual o valor final das variáveis a seguir, para x = 1, y = 2, z = 3?\n\nx += 2*2;\nx += y -= z;\nz %= y %= x;"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operações-de-potência-e-raíz-quadrada",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operações-de-potência-e-raíz-quadrada",
    "title": "Operadores e Expressões",
    "section": "Operações de Potência e Raíz Quadrada",
    "text": "Operações de Potência e Raíz Quadrada\n\nEm C++, não existem operadores para potência e raíz quadrada\nEstas operações são realizadas por chamadas a funções\n\npow(b,e) para potência (b elevado a e)\nsqrt(x) para raíz quadrada de x\n\nAmbas as funções estão na biblioteca cmath\n\n#include <cmath>"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento",
    "title": "Operadores e Expressões",
    "section": "Operador de Incremento/Decremento",
    "text": "Operador de Incremento/Decremento\nOperadores unários (só precisam de um operando)\n\n\n\n\nExpressao\nExpressao Equivalente\n\n\n\n\nx++\nx = x + 1\n\n\nx–\nx = x - 1\n\n\n\n\n\nPrecedência: mais alta do que a multiplicação/divisão/resto\nPor exemplo, para x = 1, y = 2, z = 3:\n\nx++; //x será igual a 2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-de-incrementodecremento-1",
    "title": "Operadores e Expressões",
    "section": "Operador de Incremento/Decremento",
    "text": "Operador de Incremento/Decremento\n\nPrecedência: mais alta do que a multiplicação/divisão/resto\nPor exemplo, para x = 1, y = 2, z = 3:\n\nx++; //x será igual a 2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\n\nExpressões que possuem como resultado os valores 0 (falso) ou 1 (verdadeiro)\nEm C++, valores numéricos são interpretados como falso ou verdadeiro\n\nO único valor a ser interpretado como falso é o 0\nQualquer outro é interpretado como 1 (ex. 1.000001, -10000, etc.)\n\nEstas expressões são muitas vezes a parte mais importante dos programas"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-1",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\n\nExpressões lógicas são formadas por dois tipos de operadores:\n\nOperadores relacionais\nOperadores lógicos"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-relacionais",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-relacionais",
    "title": "Operadores e Expressões",
    "section": "Operadores Relacionais",
    "text": "Operadores Relacionais\nPossuem precedência mais alta do que o operador de atribuição e mais baixa do que os operadores aritméticos\n\n\n\nOperador\nFuncionalidade\nPrecedência no grupo\n\n\n\n\n==\nIgual\nÚltimo\n\n\n!=\nDiferente\nÚltimo\n\n\n<\nMenor\nPrimeiro\n\n\n<=\nMenor ou igual\nPrimeiro\n\n\n>\nMaior\nPrimeiro\n\n\n>=\nMaior ou igual\nPrimeiro"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-2",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-2",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nCom Operadores Relacionais\nExemplos:\n\n1 > 2\n'a' < 'b'\nx == x\nx = 5*2 > 4 == 2+3 > 1"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-lógicos",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-lógicos",
    "title": "Operadores e Expressões",
    "section": "Operadores Lógicos",
    "text": "Operadores Lógicos\nPossuem precedência mais baixa do que os operadores relacionais (exceto a negação, que tem precedência igual ao op. de incremento)\n\n\n\nOperador\nFuncionalidade\nPrecedencia no grupo\n\n\n\n\n!\nNegacao (nao logico)\nPrimeiro\n\n\n||\nDisjuncao (ou logico)\nUltimo\n\n\n&&\nConjuncao (e logico)\nSegundo"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-negação-não-lógico",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-negação-não-lógico",
    "title": "Operadores e Expressões",
    "section": "Operador Lógico de Negação (Não Lógico)",
    "text": "Operador Lógico de Negação (Não Lógico)\nTabela Verdade\nNegação: inverte o valor lógico do operando (op. unário)\n\n\n\nx\n!x\n\n\n\n\n0\n1\n\n\n1\n0"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-disjunção-ou-lógico",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-disjunção-ou-lógico",
    "title": "Operadores e Expressões",
    "section": "Operador Lógico de Disjunção (OU Lógico)",
    "text": "Operador Lógico de Disjunção (OU Lógico)\nTabela Verdade\nDisjunção: falso quando os dois operandos são falsos\n\n\n\nx\ny\nx || y\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n1"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-conjunção-e-lógico",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operador-lógico-de-conjunção-e-lógico",
    "title": "Operadores e Expressões",
    "section": "Operador Lógico de Conjunção (E Lógico)",
    "text": "Operador Lógico de Conjunção (E Lógico)\nTabela Verdade\nConjunção: verdadeiro quando os dois operandos são verdadeiros\n\n\n\nx\ny\nx && y\n\n\n\n\n0\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n1"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-3",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-3",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nCom Todos os Operadores\nExemplos (para x = 1, y = 2, z = 3):\n\ny-x == false\nx > 0 && x < z+10\nz >= y || true\nx != 1 || x != 2"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#lista-de-presença",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#lista-de-presença",
    "title": "Operadores e Expressões",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/3l7ktq8"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-4",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-4",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nExemplo de Expressão Mal Construída\nA expressão abaixo é sintaticamente correta mas é logicamente incorreta. O que há de errado com ela? Como consertar?\nint i = 3, j = 2, k = 1;\nbool expr;\n\nexpr = (i > j > k);"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-5",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#expressões-lógicas-5",
    "title": "Operadores e Expressões",
    "section": "Expressões Lógicas",
    "text": "Expressões Lógicas\nExemplo de Expressão Mal Construída\nForma correta da expressão anterior:\nint i = 3, j = 2, k = 1;\nbool expr;\n\nexpr = (i > j  && j > k);"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#precedência",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#precedência",
    "title": "Operadores e Expressões",
    "section": "Precedência",
    "text": "Precedência\nOrdem geral\n\nParênteses\nOperador de incremento/não lógico\nOperadores aritméticos\nOperadores relacionais\nOperadores lógicos\nAtribuição"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas",
    "title": "Operadores e Expressões",
    "section": "Verificando o Valor de Expressões Lógicas",
    "text": "Verificando o Valor de Expressões Lógicas\nUtilize o cout com a expressão lógica inteira entre parênteses para verificar o seu valor em programas:\nint main(){\n    int i = 1, j = 2, k = 3;\n\n    cout << (i + j < k || 5 >= k) << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#verificando-o-valor-de-expressões-lógicas-1",
    "title": "Operadores e Expressões",
    "section": "Verificando o Valor de Expressões Lógicas",
    "text": "Verificando o Valor de Expressões Lógicas\nOu, atribua o resultado da expressão a uma variável booleana e imprima esta variável:\nint main(){\n    int i = 1, j = 2, k = 3;\n    bool expr;\n\n    expr = i + j < k || 5 >= k;\n\n    cout << expr << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos I",
    "text": "Conversão de Tipos I\nEm C++, o tipo do resultado de uma expressão aritmética é sempre convertido no tipo do operando com maior precisão (com maior capacidade de armazenamento)"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-i-1",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos I",
    "text": "Conversão de Tipos I\nExemplo:\nchar ch;\nint i;\nfloat f;\n\nresult = (ch/i) + (f*i); \n\nch/i é uma expressão com tipo int\nf*i é uma expressão com tipo float\n(ch/i) + (f*i) é uma expressão com tipo float\nresult tem portanto tipo float"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos II",
    "text": "Conversão de Tipos II\nEm C++, o tipo da expressão do lado direito de uma atribuição é convertido no tipo do lado esquerdo apenas quando este último representa um conjunto menor de valores"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-ii-1",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos II",
    "text": "Conversão de Tipos II\nExemplos:\nfloat g = 9.8;\n//valor de g e convertido para int\nint x = g;\nint x = 3, y = 3, z = 4;\n//valor da expressao NAO e convertido para float\nfloat media = (x + y + z)/3;"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos III",
    "text": "Conversão de Tipos III\nEm C++, é possível forçar uma expressão a ser interpretada como um tipo informado"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#conversão-de-tipos-iii-1",
    "title": "Operadores e Expressões",
    "section": "Conversão de Tipos III",
    "text": "Conversão de Tipos III\nSintaxe do typecast:\nnovo_tipo(expressao);\nou\n(novo_tipo) expressao;\nExemplos:\nint x = 3, y = 3, z = 4;\nfloat media = float(x + y + z)/3;"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#exercício",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#exercício",
    "title": "Operadores e Expressões",
    "section": "Exercício",
    "text": "Exercício\nImplemente um programa que leia do usuário um caractere. O programa deve imprimir na tela o número inteiro da tabela ASCII correspondente ao caractere informado. Dica: utilize o operador de conversão."
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#exercício-solução",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#exercício-solução",
    "title": "Operadores e Expressões",
    "section": "Exercício: Solução",
    "text": "Exercício: Solução\n#include <iostream>\nusing namespace std;\nint main(){\n    char car;\n    cout << \"insira um caractere:\\n\";\n    cin >> car;\n    cout << \"Num. ASCII: \" << int(car) << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#exercício-1",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#exercício-1",
    "title": "Operadores e Expressões",
    "section": "Exercício",
    "text": "Exercício\nForneça valores para as variáveis e calcule os resultados das expressões a seguir. Implemente um programa para verificar as suas respostas:\nint x, y, z;\nchar car;\n\n1. car && (x || y)\n2. (x > y && y > z) || (x == z)\n3. expressao verdadeira quando x nao eh 0 e nem 1\n   e y nao eh 0 e nem -1"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#desafio",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#desafio",
    "title": "Operadores e Expressões",
    "section": "Desafio",
    "text": "Desafio\nUtilizando apenas o que foi visto até o momento na disciplina, implemente um programa que leia do usuário um número inteiro. O seu programa deve imprimir na tela o antecessor do número, exceto se ele for o número 17. Neste caso, o próprio número deve ser impresso."
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#sumário",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#sumário",
    "title": "Operadores e Expressões",
    "section": "Sumário",
    "text": "Sumário\nChecklist da aula:\n\nOperador de atribuição\nOperadores aritméticos\nOperadores lógicos\nOperadores relacionais\nOperador de typecast\nExpressões aritméticas e lógicas\nOrdem de precedência e avaliação de expressões"
  },
  {
    "objectID": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-small_table",
    "href": "slides/03-op_e_exp/03-op_e_exp.html#operadores-aritméticos-small_table",
    "title": "Operadores e Expressões",
    "section": "Operadores Aritméticos {small_table}",
    "text": "Operadores Aritméticos {small_table}\n\nFormam expressões aritméticas: valor resultante é um número\nOperadores de mesma precedência são avaliados da esquerda para a direita\n\n\n\n\nOperador\nFuncionalidade\nPrecedência no Grupo\n\n\n\n\n()\nAssociar operandos\nPrimeiro\n\n\n+\nAdição\nÚltimo\n\n\n-\nSubtração\nÚltimo\n\n\n*\nMultiplicação\nSegundo\n\n\n/\nDivisão\nSegundo\n\n\n%\nResto\nSegundo"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#linguagem-de-programação",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#linguagem-de-programação",
    "title": "Comandos de Seleção",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAulas anteriores:\n\nVariáveis e tipos básicos\nComo modificar variáveis: operadores e expressões\nTipos diferentes em uma mesma expressão\n\nAula de hoje: comandos de seleção\n\nComando if-else\nComando switch-case\nOperador ternário ? :"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção",
    "title": "Comandos de Seleção",
    "section": "Comandos de Seleção",
    "text": "Comandos de Seleção\n\nDesviam o fluxo de execução de um programa\nPermitem a execução de uma ou mais instruções (bloco de código) quando uma determinada expressão for verdadeira"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nSintaxe:\nif(condicao){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-1",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\n\nComando de seleção simples: depende apenas de uma condição\nA condição é qualquer expressão (inclusive expressões aritméticas ou constantes)\nA condição é sempre avaliada como expressão lógica\n\nVerdadeiro: qualquer valor diferente de zero\nFalso: zero"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-2",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExemplo\nPrograma que lê um número digitado pelo usuário e imprime a frase \"Numero invalido\" caso o usuário digite zero:\nint main(){\n    int x;\n    cin >> x;\n    if(x == 0){\n        cout << \"Numero invalido\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-3",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExemplos Atípicos\n\nComando if que sempre executa:\n\nif(1){\n    cout << \"Sempre imprime\" << endl;\n}\n\nUso incorreto de operadores:\n\nif(x = 0){ //ha um problema aqui\n    cout << \"Numero invalido\" << endl;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-4",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-4",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExercício: faça um programa que lê uma letra digitada pelo usuário e imprime a frase \"Vogal minuscula digitada\" caso o usuário digite uma vogal minúscula"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-5",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-5",
    "title": "Comandos de Seleção",
    "section": "Comando if",
    "text": "Comando if\nExercício: Solução\nint main(){\n    char cr;\n    cin >> cr;\n    if(cr == 'a' || cr == 'e' || cr == 'i' ||\n       cr == 'o' || cr == 'u'){\n        cout << \"Vogal minuscula digitada\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nSintaxe:\nif(condicao){\n    comandoI.1;\n    ...\n    comandoI.N;\n}\nelse{\n    comandoE.1;\n    ...\n    comandoE.N;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-1",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\n\nComando de seleção composto: dois blocos dependem de uma mesma condição\nQuando a condição é verdadeira: bloco correspondente ao if é executado\nQuando a condição é falsa: bloco correspondente ao else é executado"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-2",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nExemplo: programa que lê um número digitado pelo usuário e imprime a frase \"Numero invalido\" caso o usuário digite zero ou a frase \"Numero valido\" caso contrário"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-3",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nint main(){\n    int x;\n    cin >> x;\n    if(x == 0){\n        cout << \"Numero invalido\" << endl;\n    }\n    else{\n        cout << \"Numero valido\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-4",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-4",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nExercício: faça um programa que lê uma letra digitada pelo usuário e imprime a frase \"Vogal minuscula digitada\" caso o usuário digite uma vogal minúscula ou a frase \"Consoante minuscula digitada\" caso o usuário digite uma consoante minúscula"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-5",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-if-else-5",
    "title": "Comandos de Seleção",
    "section": "Comando if-else",
    "text": "Comando if-else\nExercício: Solução\nint main(){\n    char cr;\n    cin >> cr;\n    if(cr == 'a' || cr == 'e' || cr == 'i' ||\n       cr == 'o' || cr == 'u'){\n        cout << \"Vogal minuscula digitada\" << endl;\n    }\n    else{\n        cout << \"Consoante minuscula digitada\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#lista-de-presença",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#lista-de-presença",
    "title": "Comandos de Seleção",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/40e5ASi"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\nSintaxe:\nif(condicao1){\n    comando1.1;\n    ...\n    comando1.N;\n}\nelse if(condicao2){\n    comando2.1;\n    ...\n    comando2.N;\n}\nelse{\n    comando3.1;\n    ...\n    comando3.N;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-1",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\n\nComando de seleção aninhado: associação de vários if-else\nCada else só é executado se o if anterior for falso\nSomente então a condição do próximo if é testada\nAssim, os blocos de comandos são mutuamente exclusivos (apenas um deles pode ser verdadeiro por execução)"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-2",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\nExercício: faça um programa que lê a nota de um aluno e imprime:\n\n\"Aprovado\", caso a nota seja maior ou igual a 5.0\n\"Em recuperacao\", caso a nota seja maior ou igual a 3.0 e menor do que 5.0\n\"Reprovado\", caso a nota seja menor do que 3.0"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#encadeamento-de-if-else-3",
    "title": "Comandos de Seleção",
    "section": "Encadeamento de if-else",
    "text": "Encadeamento de if-else\nExercício: Solução\nint main(){\n    float nota;\n    cin >> nota;\n    if(nota >= 5.0){\n        cout << \"Aprovado\" << endl;\n    }\n    else if(nota >= 3.0){\n        cout << \"Em recuperacao\" << endl;\n    }\n    else{\n        cout << \"Reprovado\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nSintaxe:\nswitch(expressao){\n    case constante1:\n        comando 1.1;\n        ...\n        comando 1.N;\n        break;\n    ...\n    case constanteN:\n        comando N.1;\n        ...\n        comando N.N;\n        break;\n    default:\n        comando d.1;\n        ...\n        comando d.N;    \n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-1",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\n\nComando de seleção de múltipla escolha: alternativa ao uso de vários if-else\nPossui sintaxe específica que compara o valor de uma variável ao de várias constantes\nFuncionamento:\n\nO bloco case que possuir valor igual ao da constante será executado\nTodos os blocos case abaixo do executado são também executados…"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-2",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\n\n… exceto no caso em que cada case termina com um break\ndefault (opcional): executado quando a expressão não é igual a nenhuma das constantes"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-3",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nExemplo: programa que escreve por extenso na tela o nome de cada dígito (de 0 a 2; complete o código para nrs. até 9):\nint main(){\n    int d;\n    cin >> d;\n    switch(d){\n        case 0:\n            cout << \"zero\" << endl;\n            break;\n        case 1:\n            cout << \"um\" << endl;\n            break;\n        case 2:\n            cout << \"dois\" << endl;\n            break;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-4",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-4",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nExercício: utilizando o switch-case, faça um programa que lê uma letra digitada pelo usuário e imprime a frase \"Vogal digitada\" caso o usuário digite uma vogal ou a \"Consoante digitada\" caso o usuário digite uma consoante"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-5",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comando-switch-case-5",
    "title": "Comandos de Seleção",
    "section": "Comando switch-case",
    "text": "Comando switch-case\nExercício: Solução\nint main(){\n    char c;\n    cin >> c;\n    switch(c){\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case u':\n            cout << \"Vogal digitada\" << endl;\n            break;\n        default:\n            cout << \"Consoante digitada\" << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário ? :",
    "text": "Operador Ternário ? :\nSintaxe:\nexpr1 ? expr2 : expr3;  \n\nComo o nome sugere, necessita de três operandos expr1, expr2 e expr3\n\nexpr1 é avaliada\nse expr1 for verdadeira, expr2 é calculada\nse expr1 for falsa, expr3 é calculada\n\nO resultado calculado é o resultado do operador ternário"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-1",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário ? :",
    "text": "Operador Ternário ? :\nExemplo: programa que atribui à y: - O valor 1 se x for maior ou igual a zero - O valor -1 se x for menor que zero\nint main(){\n    int x, y;\n    cin >> x;\n    y = x >= 0 ? 1 : -1;\n    cout << \"y: \" << y << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-2",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-2",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário ? :",
    "text": "Operador Ternário ? :\nExercício: utilizando o ? :, faça um programa que lê dois números e imprime qual é o maior dos dois"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-3",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#operador-ternário-3",
    "title": "Comandos de Seleção",
    "section": "Operador Ternário: ? :",
    "text": "Operador Ternário: ? :\nExercício: Solução\nint main(){\n    int x, y, maior;\n    cin >> x >> y;\n    x > y ? maior = x : maior = y;\n    cout << maior << \" e o maior\" << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção-1",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#comandos-de-seleção-1",
    "title": "Comandos de Seleção",
    "section": "Comandos de Seleção",
    "text": "Comandos de Seleção\nDicas Gerais\n\nTodo switch-case pode ser feito com if-else, mas não o contrário\nOperador ternário: utilizado em casos simples de if-else\nNo final das contas: if-else é mais genérico e portanto, mais indicado para uso"
  },
  {
    "objectID": "slides/04-comandos_selecao/04-comandos_selecao.html#sumário",
    "href": "slides/04-comandos_selecao/04-comandos_selecao.html#sumário",
    "title": "Comandos de Seleção",
    "section": "Sumário",
    "text": "Sumário\nChecklist da aula de hoje:\n\nSeleção simples if\nSeleção composta if-else\nSeleção aninhada (encadeamento de if-else)\nComando switch\nOperador ternário ? :"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#linguagem-de-programação",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#linguagem-de-programação",
    "title": "Comando de Repetição for",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComandos de seleção\n\nAula de hoje:\n\nComando de repetição for"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-1",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-1",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado for: repete instruções por um determinado número de vezes\nComando de repetição condicional while: repete instruções enquanto uma condição é verdadeira (próxima aula)"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-2",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-2",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nImplemente um programa que escreva n vezes na tela \"vou estudar lip\""
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nSintaxe:\nfor(inicializacao; condicao; incremento){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-1",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-1",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nItera sobre uma variável, chamada de contador, variável de iteração ou variável de controle\nEsta variável tem o seu valor alterado conforme o programador deseja\nIsto faz o laço executar várias iterações"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-2",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-2",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nDividido em três expressões opcionais:\n\nInicialização: executada somente na primeira vez em que o for é executado\nCondição: avaliada no início de cada iteração\nIncremento: executado no final de cada iteração"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-3",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-3",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nOrdem de execução:\n\nA expressão de inicialização é executada\nA expressão de condição é avaliada:\n\nCaso seja verdadeira: o bloco de comandos é executado\nCaso seja falsa: o laço é encerrado\n\nA expressão de incremento é executada e volta para o passo 2"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-4",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-4",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"i: \" << i << endl;\n    }\n    return 0;\n}\nO que imprime este programa?"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-3",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comandos-de-repetição-3",
    "title": "Comando de Repetição for",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nVoltando ao exemplo inicial: agora sim, vimos o que é necessário\nint main(){\n    int i, n;\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"vou estudar lip\\n\";\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#programação-e-automatização-de-tarefas",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#programação-e-automatização-de-tarefas",
    "title": "Comando de Repetição for",
    "section": "Programação e Automatização de Tarefas",
    "text": "Programação e Automatização de Tarefas\n\nAprender programação é aprender a automatizar tarefas"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-5",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-5",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo de Motivação\nNo mesmo exemplo, o que aconteceria se fosse usado:\n\nfor(i = 0; i < 10*n; i += 10)...\nfor(i = n; i > 0; i--)...\nfor(i = 10*n; i > 0; i -= 10)...\n\n?"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-6",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-6",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\nDiferentes combinações para a inicialização, condição e incremento fazem o for repetir pela mesma quantidade de vezes"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-7",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-7",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nUsos Equivalentes do for\n\nDiferentes for podem ser usados se estivermos preocupados com a quantidade de execuções de um bloco de comandos\nO que não é o caso se desejarmos que a variável de iteração assuma uma sequência de valores específicos"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-8",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-8",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nExercício 1: faça um programa que lê um número n e em seguida, lê as notas de n alunos. O programa deve exibir a média das notas na tela.\nAntes de programar: o que deve ser repetido?"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-9",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-9",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 1: Solução\nint main(){\n    int i, n;\n    float nota, media = 0;\n    cout << \"Insira a quantidade de notas\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        cout << \"Insira a nota do \"\n             << i+1 << \"o. aluno\" << endl;\n        cin >> nota;\n        media += nota;\n    }\n    media /= n;\n    cout << \"media dos alunos: \" << media << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-10",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-10",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplos Atípicos\n\nQuantas vezes é executado o laço a seguir? n vezes?\n\nfor(i = 0; i <= n; i++){\n    ...\n}\n\nQuantas vezes é executado o laço a seguir?\n\nfor(i = n; i > 0; i++){\n    ...\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#lista-de-presença",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#lista-de-presença",
    "title": "Comando de Repetição for",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/3K9Ve08"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-11",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-11",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nExercício 2: implemente um programa que lê um número n e em seguida, imprime os n primeiros números pares na tela. Considere o número 0 como o primeiro par."
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-12",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-12",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 2: Solução\nint main(){\n    int i, n;\n    cout << \"Digite n\\n\";\n    cin >> n;\n    for(i = 0; i < 2*n; i += 2){\n        cout << i << endl;\n    }\n    return 0;\n}\nObviamente, há outras formas de se implementar este programa"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-13",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-13",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nExercício 3: implemente um programa que imprime na tela em forma de tabela as seguintes contagens\n\nDe 1 a 100\nDe 10 a 1000 (incrementando o contador de 10 em 10)\nDe 100 a 1 (em ordem decrescente)"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-14",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-14",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nSaída esperada para o exercício 3:\n\n\n\n1\n10\n100\n\n\n\n\n2\n20\n99\n\n\n3\n30\n98\n\n\n…\n…\n…\n\n\n100\n1000\n1"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-15",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-15",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 3: Solução\nint main(){\n    int i;\n    for(i = 1; i <= 100; i++){\n        cout << i << \" \"\n             << 10*i << \" \"\n             << 101-i << endl;\n    }\n    return 0;\n}\nÉ possível implementar o programa com o uso de variáveis adicionais"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-16",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-16",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nExercício 4: implemente um programa que lê um número n e em seguida, lê n caracteres. O programa deve exibir a quantidade de caracteres digitados que são letras minúsculas."
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-17",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-17",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 4: Solução\nint main(){\n    char car;\n    int n, cont = 0;\n    cout << \"Informe a quantidade de caracteres:\\n\";\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        cout << \"Informe um caractere\\n\";\n        cin >> car;\n        if(car >= 'a' && car <= 'z'){\n            cont++;\n        }\n    }\n    cout << cont << \" letras minusculas digitadas\\n\";\n    return 0;\n}"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-18",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-18",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\n\nExercício 5: faça um programa que lê um número n e um número m. Em seguida, o seu programa deve exibir na tela as m primeiras potências positivas dos n primeiros números positivos. As potências devem estar separadas por linha."
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-19",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-19",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExemplo de execução:\nInforme a quantidade de numeros\n5\nInforme a quantidade de potencias\n4\nPotencias:\n1 1 1 1 \n2 4 8 16 \n3 9 27 81 \n4 16 64 256 \n5 25 125 625"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#sumário",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#sumário",
    "title": "Comando de Repetição for",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição for\nExercícios"
  },
  {
    "objectID": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-20",
    "href": "slides/05-comando_repeticao_for/05-comando_repeticao_for.html#comando-for-20",
    "title": "Comando de Repetição for",
    "section": "Comando for",
    "text": "Comando for\nExercício 5: Solução\nint main(){\n    int i, j, n, m;\n    cout << \"Informe a quantidade de numeros\\n\";\n    cin >> n;\n    cout << \"Informe a quantidade de potencias\\n\";\n    cin >> m;\n    for(i = 1; i <= n; i++){\n        for(j = 1; j <= m; j++){\n            cout << pow(i,j) << \" \"; \n        }\n        cout << endl;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação",
    "title": "Comando de Repetição while",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComando de repetição for\n\nAula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#linguagem-de-programação-1",
    "title": "Comando de Repetição while",
    "section": "Linguagem de Programação",
    "text": "Linguagem de Programação\n\nAula anterior:\n\nComando de repetição for\n\nAula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\n\nEssenciais para a automatização de tarefas repetitivas\nRepetem todos os comandos que estejam no seu corpo\nTambém chamados de laços ou loops"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-1",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDois tipos:\n\nComando de repetição contado: o for repete instruções por um determinado número de vezes (aula anterior)\nComando de repetição condicional: o while repete instruções enquanto uma condição é verdadeira"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-2",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-2",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nImplemente um programa que escreva na tela \"vou estudar lip\" enquanto um número lido não for 0"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nSintaxe:\nwhile(condicao){\n    comando1;\n    ...\n    comandoN;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\n\nExecuta enquanto a condição é verdadeira\nCondição é qualquer expressão e é obrigatória (é convertida implicitamente em expressão lógica)\nA condição é testada antes de cada iteração"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-2",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-2",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nDevemos nos certificar de dois itens para garantir o seu funcionamento de forma correta:\n\nQue a condição tem a possibilidade de ser verdadeira ao ser testada pela primeira vez\nQue a condição vai se tornar falsa, em algum momento"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-3",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-3",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExemplo\nint main(){\n    int i = 0, n;\n    cin >> n;\n    while(i < n){\n        cout << \"i: \" << i << endl;\n        i++;\n    }\n    return 0;\n}\n\nQual a saída deste programa?\nComo foram garantidos os dois itens necessários?"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-3",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-3",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nExemplo de Motivação\nVoltando ao exemplo inicial: agora sim, vimos o que é necessário\nint main(){\n    int n;\n    cout << \"Digite um numero\\n\";\n    cin >> n;\n    while(n != 0){\n        cout << \"vou estudar lip\\n\";\n        cout << \"Digite um numero\\n\";\n        cin >> n;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-4",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-4",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição\nDiferenças entre while e for\n\nO comando while é apropriado para repetição condicional\n\nÉ possível utilizá-lo para repetição contada, embora isto seja mais propenso a erros\n\nO comando for é apropriado para repetição contada\n\nÉ possível utilizá-lo para repetição condicional, embora o código resultante fique menos intuitivo"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-5",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-de-repetição-5",
    "title": "Comando de Repetição while",
    "section": "Comandos de Repetição",
    "text": "Comandos de Repetição"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-4",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-4",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\n\nExercício 1: faça um programa que lê vários números e informa se cada um deles é par ou ímpar. O programa deve se encerrar quando for digitado um número negativo."
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-5",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-5",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nAntes de programar, precisamos identificar:\n\nVariáveis do programa\nEntrada e saída do programa\nO que deve ser repetido\nExpressão lógica para repetição"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-6",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-6",
    "title": "Comando de Repetição while",
    "section": "Comando while",
    "text": "Comando while\nExercício 1: Solução\nint main(){\n    int x;\n    cout << \"Informe um numero\\n\";\n    cin >> x;\n    while(x >= 0){\n        if(x % 2 == 0){\n            cout << x << \" e um numero par\\n\";\n        }\n        else{\n            cout << x << \" e um numero impar\\n\";\n        }\n        cout << \"Informe um numero\\n\";\n        cin >> x;\n    }\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while",
    "title": "Comando de Repetição while",
    "section": "Comando do-while",
    "text": "Comando do-while\n\nA linguagem C++ oferece também o comando do-while (faça-enquanto)\nSintaxe:\n\ndo{\n    comando1;\n    ...\n    comandoN;\n} while(condicao);"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando do-while",
    "text": "Comando do-while\nDiferença para o while: a condição é testada após a execução do corpo\n\nNo comando while, o corpo pode não ser executado nenhuma vez\nNo comando do-while, o corpo é executado pelo menos uma vez"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nErros Comuns\n\nNão garantir que a condição pode ser verdadeira ao ser testada pela primeira vez (while)\nNão garantir que a condição vai se tornar falsa na lógica do algoritmo\nInverter condição: a expressão lógica deve ter valor verdadeiro para que o laço execute"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#lista-de-presença",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#lista-de-presença",
    "title": "Comando de Repetição while",
    "section": "Lista de Presença",
    "text": "Lista de Presença\n\n\n\nhttps://bit.ly/lip_20230404"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while",
    "title": "Comando de Repetição while",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\n\nExercício 2: implemente um programa que lê um número inteiro positivo n e em seguida, imprime o quociente e o resto da divisão de n por 10. O seu programa deve checar se o usuário digitou um número inteiro positivo, solicitando ao mesmo para redigitá-lo se não for o caso."
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-while-e-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comandos while e do-while",
    "text": "Comandos while e do-while\nExercício 2: Solução\nint main(){\n    int x;\n    do{\n        cout << \"Insira um numero inteiro\n                 e positivo\\n\";\n        cin >> x;\n    } while(x < 0);\n\n    cout << \"q: \" << x/10\n         << \", r:\" << x%10 << endl;\n\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-break-e-continue",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comandos-break-e-continue",
    "title": "Comando de Repetição while",
    "section": "Comandos break e continue",
    "text": "Comandos break e continue\n\nComandos que podem ser utilizados dentro de for, while e do-while:\n\nComando break: utilizado para encerrar o laço em que o comando break se encontra\nComando continue: utilizado para ignorar a iteração atual do laço e forçar a próxima iteração\n\nNo geral, há alternativas que tornam ambos os comandos opcionais"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break",
    "title": "Comando de Repetição while",
    "section": "Comando break",
    "text": "Comando break\nMenu com break\nO comando break pode ser usado em menus:\nint main(){\n    char c1;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> c1;\n        if(c1 == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(c1 == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(c1 == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(c1 == 's'){\n            cout << \"Vc escolheu sair\\n\";\n            break;\n        }\n    }while(true);\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-break-1",
    "title": "Comando de Repetição while",
    "section": "Comando break",
    "text": "Comando break\nMenu sem break\nO mesmo menu pode ser implementado sem break:\nint main(){\n    char o;\n    do{\n        cout << \"Insira uma opcao:\\n\";\n        cout << \"\\t (1) opcao1\\n\";\n        cout << \"\\t (2) opcao2\\n\";\n        cout << \"\\t (3) opcao3\\n\";\n        cout << \"\\t (s) air\\n\";\n        cin >> o;\n        if(o == '1'){\n            cout << \"opcao1 escolhida\\n\";\n        }\n        else if(o == '2'){\n            cout << \"opcao2 escolhida\\n\";\n        }\n        else if(o == '3'){\n            cout << \"opcao3 escolhida\\n\";\n        }\n        else if(o == 's'){\n            cout << \"Vc escolheu sair\\n\";\n        }\n    }while(o != 's');\n    return 0;"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue",
    "title": "Comando de Repetição while",
    "section": "Comando continue",
    "text": "Comando continue\nExemplo de Uso\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 == 0){\n            continue;\n        }\n        s += i;\n    }\n    cout << s << endl;\n    return 0;\n}\nO que faz este programa?"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-continue-1",
    "title": "Comando de Repetição while",
    "section": "Comando continue",
    "text": "Comando continue\nPrograma equivalente sem continue\nO mesmo programa pode ser implementado sem continue:\nint main(){\n    int n, i, s = 0;\n    cout << \"Informe um numero\\n\";\n    cin >> n;\n    for(i = 0; i < n; i++){\n        if(i % 2 != 0){\n            s += i;\n        }\n    }\n    cout << s << endl;\n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-1",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-1",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\n\nExercício 3: implemente um programa que lê a população no ano corrente de dois países, A e B. O país A tem taxa de crescimento de 2% ao ano, enquanto o país B cresce 4% ao ano. Supondo que a população do país A é maior do que a do país B, o seu programa deve informar em quantos anos a população do país B ultrapassará a população do país A."
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-2",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#comando-while-e-do-while-2",
    "title": "Comando de Repetição while",
    "section": "Comando while e do-while",
    "text": "Comando while e do-while\nExercício 3: Solução\nint main(){\n    int anos = 0;\n    int pop_a, pop_b;\n\n    cout << \"Insira as populacoes iniciais:\\n\";\n    cin >> pop_a >> pop_b;\n\n    while(pop_b <= pop_a){\n        pop_a *= 1.02;\n        pop_b *= 1.04;\n        anos++;\n    }\n    cout << \"A populacao do pais B ultrapassa\n             a do pais A em \"\n         << anos << \" anos.\\n\";\n    \n    return 0;\n}"
  },
  {
    "objectID": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#sumário",
    "href": "slides/06-comando_repeticao_while/06-comando_repeticao_while.html#sumário",
    "title": "Comando de Repetição while",
    "section": "Sumário",
    "text": "Sumário\nNa aula de hoje:\n\nComando de repetição while\nComando de repetição do-while\nComandos break e continue\nExercícios"
  }
]